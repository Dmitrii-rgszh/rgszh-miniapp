#!/usr/bin/env python3
# test_updated_calculator.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

import os
import sys

print("üß™ === –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê ===")
print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
print("\nüìÇ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:")
required_files = [
    'justincase_calculator.py',
    'justincase_routes.py', 
    'server.py'
]

for file in required_files:
    exists = os.path.exists(file)
    size = os.path.getsize(file) if exists else 0
    print(f"  {'‚úÖ' if exists else '‚ùå'} {file} ({size:,} bytes)")

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
print("\nüîÑ –ò–ú–ü–û–†–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê:")
try:
    from justincase_calculator import JustincaseCalculatorComplete
    print("  ‚úÖ JustincaseCalculatorComplete –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
    calculator = JustincaseCalculatorComplete()
    info = calculator.get_calculator_info()
    
    print(f"  üìä –ù–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
    print(f"  üìä –í–µ—Ä—Å–∏—è: {info['version']}")
    print(f"  üìä –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ü–†–ê–í–ò–õ–¨–ù–û–ô –≤–µ—Ä—Å–∏–∏
    features = info.get('features', {})
    print(f"  üìä –°–ë–°–ñ —Ç–∞–±–ª–∏—Ü—ã: {'‚úÖ' if features.get('sbszh_actuarial_tables') else '‚ùå'}")
    print(f"  üìä Excel —Ñ–æ—Ä–º—É–ª–∞: {'‚úÖ' if features.get('excel_formula') else '‚ùå'}")
    print(f"  üìä –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ù–°: {'‚úÖ' if features.get('correct_accident_tariffs') else '‚ùå'}")
    print(f"  üìä –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ö–ó: {'‚úÖ' if features.get('fixed_critical_illness') else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –∞–∫—Ç—É–∞—Ä–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    coverage = info.get('actuarial_coverage', {})
    male_ages = coverage.get('male_ages', [])
    female_ages = coverage.get('female_ages', [])
    terms_range = coverage.get('terms_range', '')
    
    print(f"  üìä –ú—É–∂—Å–∫–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞: {len(male_ages)} ({min(male_ages) if male_ages else 0}-{max(male_ages) if male_ages else 0})")
    print(f"  üìä –ñ–µ–Ω—Å–∫–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞: {len(female_ages)} ({min(female_ages) if female_ages else 0}-{max(female_ages) if female_ages else 0})")
    print(f"  üìä –°—Ä–æ–∫–∏: {terms_range}")
    
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç—ã –ü–†–ê–í–ò–õ–¨–ù–û–ô –≤–µ—Ä—Å–∏–∏
print("\nüßÆ –¢–ï–°–¢ –†–ê–°–ß–ï–¢–û–í –ü–†–ê–í–ò–õ–¨–ù–û–ô –í–ï–†–°–ò–ò:")

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –ø—Ä–∏–º–µ—Ä–∞
test_cases = [
    {
        'name': '–ü—Ä–∏–º–µ—Ä –∏–∑ Excel (–º—É–∂—á–∏–Ω–∞ 35 –ª–µ—Ç, 11 –ª–µ—Ç, 2 –º–ª–Ω)',
        'data': {
            'birthDate': '1990-01-01',  # ~35 –ª–µ—Ç
            'gender': 'male',
            'insuranceInfo': 'yes',
            'insuranceTerm': '11',
            'insuranceSum': '2000000',
            'insuranceFrequency': '–ï–∂–µ–≥–æ–¥–Ω–æ',
            'accidentPackage': True,
            'criticalPackage': True,
            'treatmentRegion': 'abroad',
            'sportPackage': True
        },
        'expected': {
            'base_premium': 7359,      # –û–∂–∏–¥–∞–µ–º–∞—è –±–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è
            'accident_premium': 6472,  # –û–∂–∏–¥–∞–µ–º–∞—è –ù–° –ø—Ä–µ–º–∏—è  
            'critical_premium': 54095, # –û–∂–∏–¥–∞–µ–º–∞—è –ö–ó –ø—Ä–µ–º–∏—è
            'total_premium': 67926     # –û–∂–∏–¥–∞–µ–º–∞—è –æ–±—â–∞—è –ø—Ä–µ–º–∏—è
        }
    },
    {
        'name': '–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç (–º—É–∂—á–∏–Ω–∞ 30 –ª–µ—Ç, 5 –ª–µ—Ç, 1 –º–ª–Ω)',
        'data': {
            'birthDate': '1995-01-01',  # ~30 –ª–µ—Ç
            'gender': 'male', 
            'insuranceInfo': 'yes',
            'insuranceTerm': '5',
            'insuranceSum': '1000000',
            'insuranceFrequency': '–ï–∂–µ–≥–æ–¥–Ω–æ',
            'accidentPackage': False,
            'criticalPackage': False,
            'sportPackage': False
        },
        'expected': {
            'total_premium': 10000  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }
    },
    {
        'name': '–¢–µ—Å—Ç —Å –∂–µ–Ω—â–∏–Ω–æ–π (25 –ª–µ—Ç, 10 –ª–µ—Ç, 1.5 –º–ª–Ω)',
        'data': {
            'birthDate': '2000-01-01',  # ~25 –ª–µ—Ç
            'gender': 'female',
            'insuranceInfo': 'yes', 
            'insuranceTerm': '10',
            'insuranceSum': '1500000',
            'insuranceFrequency': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',  # +5% –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            'accidentPackage': True,
            'criticalPackage': False,
            'sportPackage': False
        },
        'expected': {
            'total_premium': 12000  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }
    }
]

for i, test_case in enumerate(test_cases, 1):
    print(f"\n  üß™ –¢–µ—Å—Ç {i}: {test_case['name']}")
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid, errors = calculator.validate_input_data(test_case['data'])
        if not is_valid:
            print(f"    ‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {errors}")
            continue
        
        # –†–∞—Å—á–µ—Ç
        result = calculator.calculate_full_program(test_case['data'])
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        base_premium = result.get('basePremium', 0)
        accident_premium = result.get('accidentPremium', 0)
        critical_premium = result.get('criticalPremium', 0)
        total_premium = result.get('annualPremium', 0)
        
        print(f"    üìä –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {base_premium:,.2f} —Ä—É–±")
        print(f"    üìä –ù–° –ø—Ä–µ–º–∏—è: {accident_premium:,.2f} —Ä—É–±")
        print(f"    üìä –ö–ó –ø—Ä–µ–º–∏—è: {critical_premium:,.2f} —Ä—É–±")
        print(f"    üìä –ò–¢–û–ì–û: {total_premium:,.2f} —Ä—É–±")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        expected = test_case.get('expected', {})
        if 'total_premium' in expected:
            expected_total = expected['total_premium']
            deviation = abs(total_premium - expected_total) / expected_total * 100
            
            if deviation <= 5:  # –î–æ–ø—É—Å–∫ 5%
                print(f"    ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation:.1f}%)")
            else:
                print(f"    ‚ö†Ô∏è –ë–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_total:,}, –ø–æ–ª—É—á–µ–Ω–æ {total_premium:,.2f} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞
        details = result.get('calculationDetails', {})
        calculator_version = details.get('calculatorVersion', 'Unknown')
        uses_sbszh = details.get('usesSBSZHTables', False)
        
        print(f"    üìã –í–µ—Ä—Å–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {calculator_version}")
        print(f"    üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –°–ë–°–ñ: {'‚úÖ' if uses_sbszh else '‚ùå'}")
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
print("\nüåê –ü–†–û–í–ï–†–ö–ê –ú–ê–†–®–†–£–¢–û–í:")
try:
    from justincase_routes import register_justincase_routes, justincase_bp
    print("  ‚úÖ justincase_routes –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    from flask import Flask
    test_app = Flask(__name__)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    register_result = register_justincase_routes(test_app)
    print(f"  {'‚úÖ' if register_result else '‚ùå'} –ú–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {register_result}")
    
    # –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    justincase_routes = []
    for rule in test_app.url_map.iter_rules():
        if '/api/proxy/calculator/save' in rule.rule or '/api/justincase' in rule.rule:
            justincase_routes.append(f"{list(rule.methods)} {rule.rule}")
    
    print(f"  üìç –ù–∞–π–¥–µ–Ω–æ {len(justincase_routes)} API –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
    for route in justincase_routes:
        print(f"    - {route}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
    main_endpoint_exists = any('/api/proxy/calculator/save' in rule.rule for rule in test_app.url_map.iter_rules())
    print(f"  {'‚úÖ' if main_endpoint_exists else '‚ùå'} –û—Å–Ω–æ–≤–Ω–æ–π endpoint /api/proxy/calculator/save –Ω–∞–π–¥–µ–Ω")
    
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")

# 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
print("\nüéØ === –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê ===")

try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è
    calculator_info = calculator.get_calculator_info()
    is_correct_version = (
        'CORRECT' in calculator_info.get('version', '') or
        '–°–ë–°–ñ' in calculator_info.get('name', '') or
        calculator_info.get('features', {}).get('sbszh_actuarial_tables', False)
    )
    
    print(f"‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {'–î–ê' if is_correct_version else '–ù–ï–¢'}")
    
    if is_correct_version:
        print("üéâ –í–°–ï –ì–û–¢–û–í–û! –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        print("üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:")
        print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: python server.py")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: curl http://localhost:4000/api/justincase/status")
        print("   3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Telegram Miniapp")
    else:
        print("‚ùå –í–ù–ò–ú–ê–ù–ò–ï! –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª justincase_calculator.py –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω –Ω–æ–≤—ã–º –∫–æ–¥–æ–º.")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

print("\n" + "="*50)
print("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")