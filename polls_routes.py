# polls_routes.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º broadcast

from flask import request, jsonify
from poll_manager import poll_manager
import logging

logger = logging.getLogger("polls_routes")

def register_poll_routes(app, socketio):
    
    @app.route('/api/poll', methods=['GET'])
    def get_poll():
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
        try:
            opts = poll_manager.snapshot()
            total = sum(o["votes"] for o in opts)
            
            logger.info(f"üìä GET /api/poll: {total} –≥–æ–ª–æ—Å–æ–≤")
            return jsonify({"options": opts, "total": total}), 200
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ GET /api/poll: {e}")
            return jsonify({"error": "Internal server error"}), 500

    @app.route('/api/poll/vote', methods=['POST'])
    def vote():
        """–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –æ–ø—Ü–∏—é"""
        try:
            data = request.get_json(force=True)
            idx = data.get('index')
            
            logger.info(f"üó≥Ô∏è POST /api/poll/vote: –∏–Ω–¥–µ–∫—Å {idx}")
            
            if not isinstance(idx, int) or not poll_manager.vote(idx):
                logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {idx}")
                return jsonify(success=False, error="Invalid index"), 400

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            opts = poll_manager.snapshot()
            total = sum(o["votes"] for o in opts)
            
            # ‚úÖ –í–ê–ñ–ù–û: –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –í–°–ï–ú –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            try:
                socketio.emit('pollResults', {"options": opts, "total": total}, room='poll_room')
                logger.info(f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–æ—Å–ª–∞–Ω—ã —á–µ—Ä–µ–∑ Socket.IO: {total} –≥–æ–ª–æ—Å–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Socket.IO broadcast: {e}")
            
            return jsonify(success=True, options=opts, total=total), 200
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ POST /api/poll/vote: {e}")
            return jsonify({"error": "Internal server error"}), 500

    @app.route('/api/poll/reset', methods=['POST'])
    def reset_poll():
        """–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞"""
        try:
            logger.info("üîÑ POST /api/poll/reset")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            poll_manager.reset()
            
            # ‚úÖ –í–ê–ñ–ù–û: –†–∞—Å—Å—ã–ª–∞–µ–º —Å–±—Ä–æ—Å –í–°–ï–ú –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            try:
                # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–æ—Å
                socketio.emit('pollReset', room='poll_room')
                
                # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                opts = poll_manager.snapshot()
                total = sum(o["votes"] for o in opts)
                socketio.emit('pollResults', {"options": opts, "total": total}, room='poll_room')
                
                logger.info("üì° –°–±—Ä–æ—Å —Ä–∞–∑–æ—Å–ª–∞–Ω —á–µ—Ä–µ–∑ Socket.IO")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Socket.IO broadcast reset: {e}")
            
            return jsonify(success=True), 200
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ POST /api/poll/reset: {e}")
            return jsonify({"error": "Internal server error"}), 500

    @app.route('/api/poll/status', methods=['GET'])
    def poll_status():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            opts = poll_manager.snapshot()
            total = sum(o["votes"] for o in opts)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            connected_clients = len(socketio.server.manager.get_participants('poll_room', '/')) if hasattr(socketio.server, 'manager') else 'unknown'
            
            return jsonify({
                "status": "active",
                "total_votes": total,
                "options_count": len(opts),
                "connected_clients": connected_clients,
                "options": opts
            }), 200
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ GET /api/poll/status: {e}")
            return jsonify({"error": "Internal server error"}), 500






