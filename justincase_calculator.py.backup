# justincase_calculator.py
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ Excel

import logging
from datetime import datetime, date
from typing import Dict, Any, List, Tuple
import math

logger = logging.getLogger(__name__)

class JustincaseCalculatorComplete:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∞–∫—Ç—É–∞—Ä–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –°–ë–°–ñ + –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ Excel
    """
    
    def __init__(self):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π'")
        
        # ===== –û–°–ù–û–í–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ =====
        self.MIN_INSURANCE_SUM = 1000000
        self.MAX_INSURANCE_SUM = 100000000
        self.MIN_INSURANCE_TERM = 1
        self.MAX_INSURANCE_TERM = 30
        self.MIN_AGE = 18
        self.MAX_AGE = 70
        
        # ===== –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ =====
        self.GUARANTEED_RATE = 0.08          # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 8%
        self.COMMISSION_RATE = 0.30          # –ö–æ–º–∏—Å—Å–∏—è: 30%
        self.LOAD_RATE = 0.05                # –ù–∞–≥—Ä—É–∑–∫–∞: 5%
        
        # ===== –ü–†–ê–í–ò–õ–¨–ù–´–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –ß–ê–°–¢–û–¢–´ –ü–õ–ê–¢–ï–ñ–ï–ô (–∏–∑ Excel tbl_freq_k) =====
        # –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ Excel —Ñ–∞–π–ª–∞ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.xlsm"
        # kk=1 (–µ–∂–µ–≥–æ–¥–Ω–æ): –∫–æ—ç—Ñ—Ñ=1.0 ‚Üí –æ–±—â–∞—è –¥–æ–ø–ª–∞—Ç–∞ 0%
        # kk=2 (–ø–æ–ª—É–≥–æ–¥–∏–µ): –∫–æ—ç—Ñ—Ñ=0.51 ‚Üí –æ–±—â–∞—è –¥–æ–ø–ª–∞—Ç–∞ +2% (2 √ó 0.51 = 1.02)
        # kk=4 (–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ): –∫–æ—ç—Ñ—Ñ=0.2575 ‚Üí –æ–±—â–∞—è –¥–æ–ø–ª–∞—Ç–∞ +3% (4 √ó 0.2575 = 1.03)
        # kk=12 (–µ–∂–µ–º–µ—Å—è—á–Ω–æ): –∫–æ—ç—Ñ—Ñ=0.0867 ‚Üí –æ–±—â–∞—è –¥–æ–ø–ª–∞—Ç–∞ +4% (12 √ó 0.0867 = 1.04)
        self.FREQUENCY_COEFFICIENTS = {
            '–ï–∂–µ–≥–æ–¥–Ω–æ': 1.0,        # +0%  (–±–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è)
            '–ü–æ–ª—É–≥–æ–¥–∏–µ': 1.02,      # +2%  (2 √ó 0.51)
            '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ': 1.03,   # +3%  (4 √ó 0.2575)  
            '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': 1.04      # +4%  (12 √ó 0.0867)
        }
        
        # ===== –ü–†–ê–í–ò–õ–¨–ù–´–ï –¢–ê–†–ò–§–´ –ù–° (–∏–∑ Excel) =====
        self.ACCIDENT_TARIFFS = {
            'death_accident': 0.0011213,      # –ù–° —Å–º–µ—Ä—Ç—å: 1.1213 / 1000
            'death_transport': 0.0002807,     # –ù–° –î–¢–ü: 0.2807 / 1000  
            'trauma_accident': 0.0018341,     # –ù–° —Ç—Ä–∞–≤–º–∞: 1.8341 / 1000
        }
        
        # ===== –¢–ê–†–ò–§–´ –ö–ó (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ Excel) =====
        self.CRITICAL_ILLNESS_TARIFFS = {
            'russia': 0.0,        # –í –†–§ - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–∏–º–µ—Ä–µ
            'abroad': 54094.74    # –ó–∞ —Ä—É–±–µ–∂–æ–º - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
        }
        
        # ===== –ê–ö–¢–£–ê–†–ù–´–ï –¢–ê–ë–õ–ò–¶–´ –°–¢–†–ê–•–û–í–ê–ù–ò–Ø –ñ–ò–ó–ù–ò –°–ë–°–ñ =====
        # –ú–£–ñ–ß–ò–ù–´ - –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
        self.LIFE_TARIFFS_MALE = self._generate_complete_male_table()
        
        # –ñ–ï–ù–©–ò–ù–´ - –ü–†–ê–í–ò–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        self.LIFE_TARIFFS_FEMALE = {
            18: {5: 3.951, 6: 3.973, 7: 3.996, 8: 4.020, 9: 4.046, 10: 4.071, 11: 4.097, 12: 4.124, 13: 4.150, 14: 4.179, 15: 4.209, 16: 4.240, 17: 4.274, 18: 4.309, 19: 4.347, 20: 4.386, 21: 4.428, 22: 4.473, 23: 4.520, 24: 4.570, 25: 4.623, 26: 4.679, 27: 4.738, 28: 4.800, 29: 4.865, 30: 4.940},
            19: {5: 3.995, 6: 4.019, 7: 4.044, 8: 4.070, 9: 4.097, 10: 4.124, 11: 4.151, 12: 4.178, 13: 4.208, 14: 4.239, 15: 4.272, 16: 4.305, 17: 4.343, 18: 4.382, 19: 4.422, 20: 4.466, 21: 4.512, 22: 4.561, 23: 4.613, 24: 4.668, 25: 4.725, 26: 4.787, 27: 4.853, 28: 4.922, 29: 4.996, 30: 5.073},
            20: {5: 4.043, 6: 4.069, 7: 4.096, 8: 4.124, 9: 4.151, 10: 4.179, 11: 4.208, 12: 4.238, 13: 4.270, 14: 4.304, 15: 4.340, 16: 4.377, 17: 4.418, 18: 4.460, 19: 4.505, 20: 4.553, 21: 4.604, 22: 4.657, 23: 4.714, 24: 4.774, 25: 4.838, 26: 4.906, 27: 4.978, 28: 5.054, 29: 5.134, 30: 5.219},
            21: {5: 4.095, 6: 4.123, 7: 4.152, 8: 4.180, 9: 4.209, 10: 4.238, 11: 4.269, 12: 4.302, 13: 4.337, 14: 4.374, 15: 4.413, 16: 4.455, 17: 4.499, 18: 4.545, 19: 4.595, 20: 4.648, 21: 4.703, 22: 4.762, 23: 4.825, 24: 4.891, 25: 4.962, 26: 5.036, 27: 5.115, 28: 5.198, 29: 5.286, 30: 5.385},
            22: {5: 4.152, 6: 4.181, 7: 4.210, 8: 4.240, 9: 4.269, 10: 4.301, 11: 4.335, 12: 4.372, 13: 4.410, 14: 4.451, 15: 4.494, 16: 4.539, 17: 4.587, 18: 4.639, 19: 4.694, 20: 4.752, 21: 4.813, 22: 4.877, 23: 4.946, 24: 5.019, 25: 5.097, 26: 5.179, 27: 5.265, 28: 5.356, 29: 5.459, 30: 5.567},
            23: {5: 4.211, 6: 4.241, 7: 4.272, 8: 4.302, 9: 4.335, 10: 4.370, 11: 4.407, 12: 4.447, 13: 4.489, 14: 4.534, 15: 4.581, 16: 4.631, 17: 4.685, 18: 4.742, 19: 4.802, 20: 4.865, 21: 4.932, 22: 5.004, 23: 5.079, 24: 5.160, 25: 5.245, 26: 5.334, 27: 5.428, 28: 5.536, 29: 5.648, 30: 5.766},
            24: {5: 4.274, 6: 4.305, 7: 4.335, 8: 4.369, 9: 4.405, 10: 4.444, 11: 4.486, 12: 4.529, 13: 4.576, 14: 4.625, 15: 4.677, 16: 4.732, 17: 4.791, 18: 4.853, 19: 4.919, 20: 4.989, 21: 5.063, 22: 5.142, 23: 5.225, 24: 5.313, 25: 5.406, 26: 5.504, 27: 5.615, 28: 5.732, 29: 5.855, 30: 5.985},
            25: {5: 4.338, 6: 4.369, 7: 4.404, 8: 4.442, 9: 4.482, 10: 4.525, 11: 4.570, 12: 4.619, 13: 4.669, 14: 4.723, 15: 4.781, 16: 4.843, 17: 4.907, 18: 4.976, 19: 5.048, 20: 5.125, 21: 5.207, 22: 5.294, 23: 5.385, 24: 5.481, 25: 5.583, 26: 5.698, 27: 5.820, 28: 5.947, 29: 6.080, 30: 6.219},
            26: {5: 4.404, 6: 4.440, 7: 4.479, 8: 4.521, 9: 4.565, 10: 4.613, 11: 4.663, 12: 4.715, 13: 4.772, 14: 4.831, 15: 4.896, 16: 4.963, 17: 5.034, 18: 5.109, 19: 5.189, 20: 5.274, 21: 5.364, 22: 5.459, 23: 5.559, 24: 5.665, 25: 5.785, 26: 5.911, 27: 6.043, 28: 6.181, 29: 6.325, 30: 6.475},
            27: {5: 4.475, 6: 4.516, 7: 4.560, 8: 4.607, 9: 4.656, 10: 4.708, 11: 4.763, 12: 4.821, 13: 4.884, 14: 4.951, 15: 5.021, 16: 5.095, 17: 5.173, 18: 5.256, 19: 5.345, 20: 5.438, 21: 5.537, 22: 5.641, 23: 5.750, 24: 5.875, 25: 6.006, 26: 6.143, 27: 6.287, 28: 6.436, 29: 6.592, 30: 6.753},
            28: {5: 4.554, 6: 4.600, 7: 4.649, 8: 4.701, 9: 4.755, 10: 4.813, 11: 4.874, 12: 4.939, 13: 5.009, 14: 5.081, 15: 5.158, 16: 5.240, 17: 5.326, 18: 5.418, 19: 5.516, 20: 5.618, 21: 5.726, 22: 5.840, 23: 5.970, 24: 6.106, 25: 6.249, 26: 6.398, 27: 6.553, 28: 6.714, 29: 6.881, 30: 7.053},
            29: {5: 4.643, 6: 4.695, 7: 4.748, 8: 4.805, 9: 4.865, 10: 4.929, 11: 4.997, 12: 5.070, 13: 5.145, 14: 5.226, 15: 5.310, 16: 5.400, 17: 5.496, 18: 5.597, 19: 5.704, 20: 5.816, 21: 5.934, 22: 6.069, 23: 6.211, 24: 6.359, 25: 6.514, 26: 6.675, 27: 6.843, 28: 7.016, 29: 7.194, 30: 7.377},
            30: {5: 4.743, 6: 4.799, 7: 4.859, 8: 4.921, 9: 4.988, 10: 5.058, 11: 5.134, 12: 5.213, 13: 5.297, 14: 5.385, 15: 5.479, 16: 5.578, 17: 5.684, 18: 5.794, 19: 5.911, 20: 6.034, 21: 6.172, 22: 6.322, 23: 6.476, 24: 6.637, 25: 6.804, 26: 6.978, 27: 7.157, 28: 7.343, 29: 7.534, 30: 7.731},
            31: {5: 4.856, 6: 4.918, 7: 4.983, 8: 5.052, 9: 5.125, 10: 5.204, 11: 5.287, 12: 5.373, 13: 5.465, 14: 5.563, 15: 5.665, 16: 5.776, 17: 5.891, 18: 6.012, 19: 6.139, 20: 6.286, 21: 6.439, 22: 6.599, 23: 6.766, 24: 6.940, 25: 7.121, 26: 7.307, 27: 7.499, 28: 7.697, 29: 7.901, 30: 8.112},
            32: {5: 4.979, 6: 5.047, 7: 5.119, 8: 5.195, 9: 5.278, 10: 5.363, 11: 5.454, 12: 5.549, 13: 5.650, 14: 5.758, 15: 5.872, 16: 5.992, 17: 6.118, 18: 6.250, 19: 6.403, 20: 6.562, 21: 6.729, 22: 6.903, 23: 7.083, 24: 7.270, 25: 7.464, 26: 7.663, 27: 7.868, 28: 8.080, 29: 8.298, 30: 8.524},
            33: {5: 5.114, 6: 5.189, 7: 5.269, 8: 5.355, 9: 5.444, 10: 5.538, 11: 5.637, 12: 5.743, 13: 5.855, 14: 5.973, 15: 6.098, 16: 6.229, 17: 6.366, 18: 6.525, 19: 6.692, 20: 6.865, 21: 7.045, 22: 7.233, 23: 7.428, 24: 7.628, 25: 7.835, 26: 8.048, 27: 8.267, 28: 8.494, 29: 8.728, 30: 8.969},
            34: {5: 5.262, 6: 5.346, 7: 5.436, 8: 5.528, 9: 5.626, 10: 5.730, 11: 5.840, 12: 5.956, 13: 6.080, 14: 6.209, 15: 6.345, 16: 6.488, 17: 6.654, 18: 6.827, 19: 7.008, 20: 7.195, 21: 7.390, 22: 7.592, 23: 7.801, 24: 8.016, 25: 8.236, 26: 8.463, 27: 8.696, 28: 8.940, 29: 9.191, 30: 9.451},
            35: {5: 5.426, 6: 5.521, 7: 5.617, 8: 5.719, 9: 5.827, 10: 5.942, 11: 6.063, 12: 6.192, 13: 6.326, 14: 6.468, 15: 6.617, 16: 6.790, 17: 6.970, 18: 7.158, 19: 7.353, 20: 7.556, 21: 7.766, 22: 7.982, 23: 8.205, 24: 8.434, 25: 8.669, 26: 8.913, 27: 9.164, 28: 9.423, 29: 9.692, 30: 9.972},
            36: {5: 5.611, 6: 5.712, 7: 5.818, 8: 5.930, 9: 6.050, 10: 6.176, 11: 6.310, 12: 6.450, 13: 6.597, 14: 6.752, 15: 6.933, 16: 7.121, 17: 7.316, 18: 7.520, 19: 7.730, 20: 7.948, 21: 8.173, 22: 8.404, 23: 8.642, 24: 8.886, 25: 9.138, 26: 9.398, 27: 9.667, 28: 9.946, 29: 10.236, 30: 10.537},
            37: {5: 5.812, 6: 5.922, 7: 6.039, 8: 6.163, 9: 6.295, 10: 6.434, 11: 6.580, 12: 6.733, 13: 6.895, 14: 7.083, 15: 7.279, 16: 7.483, 17: 7.694, 18: 7.914, 19: 8.140, 20: 8.374, 21: 8.613, 22: 8.860, 23: 9.113, 24: 9.374, 25: 9.644, 26: 9.925, 27: 10.211, 28: 10.517, 29: 10.834, 30: 11.156},
            38: {5: 6.033, 6: 6.154, 7: 6.284, 8: 6.421, 9: 6.566, 10: 6.718, 11: 6.877, 12: 7.045, 13: 7.242, 14: 7.446, 15: 7.659, 16: 7.879, 17: 8.107, 18: 8.342, 19: 8.585, 20: 8.834, 21: 9.089, 22: 9.351, 23: 9.622, 24: 9.902, 25: 10.190, 26: 10.490, 27: 10.801, 28: 11.125, 29: 11.463, 30: 11.815},
            39: {5: 6.276, 6: 6.411, 7: 6.554, 8: 6.705, 9: 6.863, 10: 7.029, 11: 7.203, 12: 7.409, 13: 7.623, 14: 7.844, 15: 8.073, 16: 8.311, 17: 8.555, 18: 8.807, 19: 9.065, 20: 9.330, 21: 9.602, 22: 9.883, 23: 10.172, 24: 10.471, 25: 10.782, 26: 11.104, 27: 11.440, 28: 11.790, 29: 12.155, 30: 12.536},
            40: {5: 6.544, 6: 6.694, 7: 6.851, 8: 7.016, 9: 7.188, 10: 7.369, 11: 7.585, 12: 7.808, 13: 8.039, 14: 8.278, 15: 8.525, 16: 8.779, 17: 9.041, 18: 9.308, 19: 9.583, 20: 9.865, 21: 10.156, 22: 10.456, 23: 10.766, 24: 11.087, 25: 11.421, 26: 11.769, 27: 12.132, 28: 12.510, 29: 12.905, 30: 13.318},
            41: {5: 6.838, 6: 7.002, 7: 7.174, 8: 7.353, 9: 7.542, 10: 7.769, 11: 8.002, 12: 8.244, 13: 8.492, 14: 8.749, 15: 9.014, 16: 9.285, 17: 9.563, 18: 9.848, 19: 10.140, 20: 10.441, 21: 10.752, 22: 11.073, 23: 11.406, 24: 11.752, 25: 12.113, 26: 12.489, 27: 12.882, 28: 13.291, 29: 13.720},
            42: {5: 7.164, 6: 7.343, 7: 7.529, 8: 7.726, 9: 7.964, 10: 8.209, 11: 8.461, 12: 8.720, 13: 8.987, 14: 9.262, 15: 9.544, 16: 9.832, 17: 10.127, 18: 10.430, 19: 10.742, 20: 11.064, 21: 11.397, 22: 11.742, 23: 12.101, 24: 12.475, 25: 12.865, 26: 13.271, 27: 13.696, 28: 14.141},
            43: {5: 7.522, 6: 7.716, 7: 7.920, 8: 8.171, 9: 8.427, 10: 8.690, 11: 8.961, 12: 9.239, 13: 9.524, 14: 9.817, 15: 10.116, 16: 10.422, 17: 10.735, 18: 11.059, 19: 11.392, 20: 11.737, 21: 12.094, 22: 12.465, 23: 12.853, 24: 13.257, 25: 13.679, 26: 14.120, 27: 14.581},
            44: {5: 7.912, 6: 8.124, 7: 8.390, 8: 8.659, 9: 8.934, 10: 9.216, 11: 9.505, 12: 9.802, 13: 10.105, 14: 10.415, 15: 10.731, 16: 11.056, 17: 11.391, 18: 11.738, 19: 12.093, 20: 12.463, 21: 12.848, 22: 13.249, 23: 13.669, 24: 14.106, 25: 14.563, 26: 15.042},
            45: {5: 8.338, 6: 8.621, 7: 8.904, 8: 9.191, 9: 9.485, 10: 9.786, 11: 10.094, 12: 10.408, 13: 10.729, 14: 11.057, 15: 11.393, 16: 11.739, 17: 12.096, 18: 12.466, 19: 12.849, 20: 13.248, 21: 13.664, 22: 14.099, 23: 14.552, 24: 15.027, 25: 15.524},
            46: {5: 8.863, 6: 9.162, 7: 9.463, 8: 9.769, 9: 10.082, 10: 10.401, 11: 10.727, 12: 11.060, 13: 11.399, 14: 11.746, 15: 12.104, 16: 12.474, 17: 12.856, 18: 13.253, 19: 13.666, 20: 14.097, 21: 14.548, 22: 15.018, 23: 15.511, 24: 16.027, 25: 16.569},
            47: {5: 9.439, 6: 9.754, 7: 10.072, 8: 10.397, 9: 10.728, 10: 11.065, 11: 11.408, 12: 11.759, 13: 12.118, 14: 12.488, 15: 12.870, 16: 13.265, 17: 13.676, 18: 14.103, 19: 14.550, 20: 15.017, 21: 15.506, 22: 16.017, 23: 16.552},
            48: {5: 10.063, 6: 10.398, 7: 10.784, 8: 11.075, 9: 11.423, 10: 11.778, 11: 12.139, 12: 12.509, 13: 12.891, 14: 13.286, 15: 13.694, 16: 14.119, 17: 14.562, 18: 15.025, 19: 15.509, 20: 16.015, 21: 16.546, 22: 17.102},
            49: {5: 10.754, 6: 11.098, 7: 11.449, 8: 11.806, 9: 12.170, 10: 12.542, 11: 12.923, 12: 13.317, 13: 13.724, 14: 14.146, 15: 14.584, 16: 15.042, 17: 15.522, 18: 16.024, 19: 16.549, 20: 17.100, 21: 17.677},
            50: {5: 11.498, 6: 11.853, 7: 12.217, 8: 12.589, 9: 12.969, 10: 13.360, 11: 13.765, 12: 14.184, 13: 14.619, 14: 15.072, 15: 15.546, 16: 16.042, 17: 16.562, 18: 17.107, 19: 17.678, 20: 18.279},
            51: {5: 12.304, 6: 12.659, 7: 13.083, 8: 13.375, 9: 13.779, 10: 14.197, 11: 14.631, 12: 15.082, 13: 15.551, 14: 16.042, 15: 16.557, 16: 17.098, 17: 17.668, 18: 18.268, 19: 18.902, 20: 19.571},
            52: {5: 12.995, 6: 13.391, 7: 13.795, 8: 14.212, 9: 14.644, 10: 15.095, 11: 15.559, 12: 16.046, 13: 16.555, 14: 17.090, 15: 17.652, 16: 18.241, 17: 18.859, 18: 19.509, 19: 20.194, 20: 20.915},
            53: {5: 13.811, 6: 14.228, 7: 14.658, 8: 15.105, 9: 15.569, 10: 16.052, 11: 16.557, 12: 17.086, 13: 17.642, 14: 18.225, 15: 18.838, 16: 19.481, 17: 20.158, 18: 20.869, 19: 21.618},
            54: {5: 14.673, 6: 15.117, 7: 15.579, 8: 16.059, 9: 16.560, 10: 17.084, 11: 17.633, 12: 18.211, 13: 18.819, 14: 19.456, 15: 20.127, 16: 20.833},
            55: {5: 15.586, 6: 16.064, 7: 16.363, 8: 17.082, 9: 17.626, 10: 18.197, 11: 18.799, 12: 19.432, 13: 20.097, 14: 20.796, 15: 21.532},
            56: {5: 16.563, 6: 17.080, 7: 17.620, 8: 18.186, 9: 18.781, 10: 19.408, 11: 20.068, 12: 20.761, 13: 21.490, 14: 22.259},
            57: {5: 17.614, 6: 18.176, 7: 18.769, 8: 19.385, 9: 20.039, 10: 20.728, 11: 21.452, 12: 22.214, 13: 23.017},
            58: {5: 18.753, 6: 19.367, 7: 20.014, 8: 20.688, 9: 21.418, 10: 22.174, 11: 22.970, 12: 23.811, 13: 0.000},
            59: {5: 19.998, 6: 20.673, 7: 21.388, 8: 22.140, 9: 22.932, 10: 23.764, 11: 24.644},
            60: {5: 21.354, 6: 22.111, 7: 22.899, 8: 23.727, 9: 24.599, 10: 25.519},
            61: {5: 22.870, 6: 23.693, 7: 24.562, 8: 25.475, 9: 26.439},
            62: {5: 24.532, 6: 25.441, 7: 26.398, 8: 27.409},
            63: {5: 26.369, 6: 27.327, 7: 28.333, 8: 0.000},
            64: {5: 28.403, 6: 29.516, 7: 0.000},
            65: {5: 30.660, 6: 0.000},
            66: {5: 0.000},
            67: {5: 0.000},
            68: {5: 0.000},
            69: {5: 0.000},
            70: {5: 0.000}
        }
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ 18-70
        self._fill_missing_ages()
        
        logger.info("‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –ò –∂–µ–Ω—Å–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å Excel")
    
    def _generate_complete_male_table(self):
        """–ü–æ–ª–Ω–∞—è –º—É–∂—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ Excel —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        
        # –¢–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ - –º—É–∂—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞
        return {
            18: {5: 4.658, 6: 4.735, 7: 4.815, 8: 4.896, 9: 4.979, 10: 5.061, 11: 5.143, 12: 5.224, 13: 5.304, 14: 5.382, 15: 5.462, 16: 5.541, 17: 5.619, 18: 5.696, 19: 5.774, 20: 5.353, 21: 5.394, 22: 6.018, 23: 6.105, 24: 6.196, 25: 6.290, 26: 6.388, 27: 6.491, 28: 6.599, 29: 6.712, 30: 6.830},
            19: {5: 4.814, 6: 4.896, 7: 4.980, 8: 5.065, 9: 5.150, 10: 5.234, 11: 5.316, 12: 5.398, 13: 5.479, 14: 5.560, 15: 5.640, 16: 5.719, 17: 5.798, 18: 5.877, 19: 5.958, 20: 6.041, 21: 6.126, 22: 6.216, 23: 6.308, 24: 6.405, 25: 6.506, 26: 6.612, 27: 6.723, 28: 6.840, 29: 6.961, 30: 7.087},
            20: {5: 4.981, 6: 5.067, 7: 5.155, 8: 5.241, 9: 5.327, 10: 5.412, 11: 5.494, 12: 5.577, 13: 5.659, 14: 5.741, 15: 5.821, 16: 5.902, 17: 5.983, 18: 6.065, 19: 6.149, 20: 6.237, 21: 6.328, 22: 6.423, 23: 6.523, 24: 6.627, 25: 6.736, 26: 6.850, 27: 6.970, 28: 7.095, 29: 7.226, 30: 7.361},
            21: {5: 5.157, 6: 5.247, 7: 5.335, 8: 5.423, 9: 5.509, 10: 5.593, 11: 5.677, 12: 5.761, 13: 5.844, 14: 5.926, 15: 6.007, 16: 6.090, 17: 6.173, 18: 6.259, 19: 6.349, 20: 6.443, 21: 6.540, 22: 6.642, 23: 6.749, 24: 6.861, 25: 6.979, 26: 7.103, 27: 7.232, 28: 7.366, 29: 7.507, 30: 7.664},
            22: {5: 5.341, 6: 5.432, 7: 5.521, 8: 5.609, 9: 5.694, 10: 5.779, 11: 5.864, 12: 5.948, 13: 6.031, 14: 6.114, 15: 6.195, 16: 6.283, 17: 6.371, 18: 6.462, 19: 6.558, 20: 6.658, 21: 6.763, 22: 6.873, 23: 6.989, 24: 7.110, 25: 7.238, 26: 7.371, 27: 7.510, 28: 7.654, 29: 7.818, 30: 7.987},
            23: {5: 5.531, 6: 5.621, 7: 5.710, 8: 5.796, 9: 5.883, 10: 5.968, 11: 6.054, 12: 6.138, 13: 6.222, 14: 6.307, 15: 6.394, 16: 6.483, 17: 6.576, 18: 6.675, 19: 6.778, 20: 6.885, 21: 6.998, 22: 7.117, 23: 7.243, 24: 7.374, 25: 7.512, 26: 7.655, 27: 7.805, 28: 7.974, 29: 8.149, 30: 8.329},
            24: {5: 5.728, 6: 5.812, 7: 5.896, 8: 5.987, 9: 6.074, 10: 6.160, 11: 6.245, 12: 6.330, 13: 6.417, 14: 6.505, 15: 6.596, 16: 6.691, 17: 6.792, 18: 6.898, 19: 7.008, 20: 7.125, 21: 7.248, 22: 7.377, 23: 7.513, 24: 7.655, 25: 7.803, 26: 7.958, 27: 8.133, 28: 8.314, 29: 8.501, 30: 8.694},
            25: {5: 5.915, 6: 6.002, 7: 6.090, 8: 6.178, 9: 6.265, 10: 6.350, 11: 6.438, 12: 6.526, 13: 6.615, 14: 6.708, 15: 6.806, 16: 6.910, 17: 7.018, 18: 7.132, 19: 7.253, 20: 7.379, 21: 7.512, 22: 7.653, 23: 7.799, 24: 7.953, 25: 8.113, 26: 8.294, 27: 8.482, 28: 8.675, 29: 8.875, 30: 9.088},
            26: {5: 6.103, 6: 6.192, 7: 6.281, 8: 6.369, 9: 6.457, 10: 6.544, 11: 6.633, 12: 6.724, 13: 6.820, 14: 6.920, 15: 7.026, 16: 7.138, 17: 7.255, 18: 7.379, 19: 7.510, 20: 7.648, 21: 7.793, 22: 7.945, 23: 8.104, 24: 8.269, 25: 8.457, 26: 8.652, 27: 8.853, 28: 9.060, 29: 9.273, 30: 9.491},
            27: {5: 6.292, 6: 6.382, 7: 6.471, 8: 6.560, 9: 6.649, 10: 6.739, 11: 6.832, 12: 6.930, 13: 7.033, 14: 7.142, 15: 7.257, 16: 7.378, 17: 7.506, 18: 7.642, 19: 7.785, 20: 7.935, 21: 8.092, 22: 8.257, 23: 8.428, 24: 8.623, 25: 8.825, 26: 9.034, 27: 9.248, 28: 9.469, 29: 9.695, 30: 9.927},
            28: {5: 6.481, 6: 6.572, 7: 6.662, 8: 6.752, 9: 6.844, 10: 6.940, 11: 7.039, 12: 7.145, 13: 7.258, 14: 7.377, 15: 7.502, 16: 7.635, 17: 7.775, 18: 7.923, 19: 8.079, 20: 8.242, 21: 8.412, 22: 8.590, 23: 8.793, 24: 9.003, 25: 9.219, 26: 9.442, 27: 9.670, 28: 9.905, 29: 10.145, 30: 10.389},
            29: {5: 6.672, 6: 6.763, 7: 6.855, 8: 6.949, 9: 7.046, 10: 7.148, 11: 7.258, 12: 7.375, 13: 7.498, 14: 7.627, 15: 7.764, 16: 7.910, 17: 8.064, 18: 8.225, 19: 8.394, 20: 8.571, 21: 8.756, 22: 8.966, 23: 9.184, 24: 9.409, 25: 9.640, 26: 9.878, 27: 10.121, 28: 10.370, 29: 10.623, 30: 10.882},
            30: {5: 6.864, 6: 6.957, 7: 7.054, 8: 7.153, 9: 7.259, 10: 7.371, 11: 7.498, 12: 7.620, 13: 7.754, 14: 7.896, 15: 8.047, 16: 8.207, 17: 8.375, 18: 8.551, 19: 8.734, 20: 8.926, 21: 9.145, 22: 9.372, 23: 9.605, 24: 9.846, 25: 10.092, 26: 10.345, 27: 10.668, 28: 10.856, 29: 11.133, 30: 11.496},
            31: {5: 7.062, 6: 7.160, 7: 7.262, 8: 7.371, 9: 7.487, 10: 7.613, 11: 7.745, 12: 7.884, 13: 8.032, 14: 8.189, 15: 8.355, 16: 8.530, 17: 8.712, 18: 8.903, 19: 9.102, 20: 9.330, 21: 9.566, 22: 9.809, 23: 10.059, 24: 10.315, 25: 10.577, 26: 10.845, 27: 11.117, 28: 11.395, 29: 11.678, 30: 11.966},
            32: {5: 7.265, 6: 7.370, 7: 7.482, 8: 7.603, 9: 7.734, 10: 7.871, 11: 8.016, 12: 8.170, 13: 8.334, 14: 8.507, 15: 8.688, 16: 8.878, 17: 9.076, 18: 9.283, 19: 9.521, 20: 9.767, 21: 10.029, 22: 10.279, 23: 10.544, 24: 10.818, 25: 11.096, 26: 11.378, 27: 11.666, 28: 11.959, 29: 12.258, 30: 12.563},
            33: {5: 7.479, 6: 7.595, 7: 7.721, 8: 7.858, 9: 8.001, 10: 8.152, 11: 8.313, 12: 8.483, 13: 8.663, 14: 8.853, 15: 9.051, 16: 9.257, 17: 9.472, 18: 9.720, 19: 9.976, 20: 10.239, 21: 10.509, 22: 10.786, 23: 11.068, 24: 11.357, 25: 11.650, 26: 11.949, 27: 12.253, 28: 12.563, 29: 12.879, 30: 13.199},
            34: {5: 7.711, 6: 7.842, 7: 7.985, 8: 8.135, 9: 8.293, 10: 8.461, 11: 8.639, 12: 8.827, 13: 9.024, 14: 9.230, 15: 9.445, 16: 9.669, 17: 9.928, 18: 10.195, 19: 10.469, 20: 10.750, 21: 11.037, 22: 11.331, 23: 11.630, 24: 11.935, 25: 12.245, 26: 12.560, 27: 12.881, 28: 13.209, 29: 13.541, 30: 13.879},
            35: {5: 7.969, 6: 8.119, 7: 8.276, 8: 8.442, 9: 8.617, 10: 8.803, 11: 8.999, 12: 9.205, 13: 9.420, 14: 9.643, 15: 9.876, 16: 10.147, 17: 10.425, 18: 10.710, 19: 11.002, 20: 11.301, 21: 11.607, 22: 11.918, 23: 12.234, 24: 12.555, 25: 12.882, 26: 13.215, 27: 13.554, 28: 13.899, 29: 14.249, 30: 14.604},
            36: {5: 8.262, 6: 8.425, 7: 8.599, 8: 8.783, 9: 8.977, 10: 9.182, 11: 9.396, 12: 9.620, 13: 9.853, 14: 10.095, 15: 10.378, 16: 10.668, 17: 10.965, 18: 11.270, 19: 11.580, 20: 11.897, 21: 12.220, 22: 12.548, 23: 12.882, 24: 13.221, 25: 13.566, 26: 13.917, 27: 14.274, 28: 14.637, 29: 15.006, 30: 15.380},
            37: {5: 8.586, 6: 8.767, 7: 8.958, 8: 9.161, 9: 9.375, 10: 9.599, 11: 9.832, 12: 10.074, 13: 10.327, 14: 10.622, 15: 10.925, 16: 11.235, 17: 11.551, 18: 11.874, 19: 12.204, 20: 12.539, 21: 12.879, 22: 13.225, 23: 13.576, 24: 13.934, 25: 14.298, 26: 14.668, 27: 15.044, 28: 15.426, 29: 15.814, 30: 16.208},
            38: {5: 8.947, 6: 9.147, 7: 9.358, 8: 9.582, 9: 9.815, 10: 10.058, 11: 10.310, 12: 10.572, 13: 10.881, 14: 11.197, 15: 11.520, 16: 11.849, 17: 12.185, 18: 12.527, 19: 12.875, 20: 13.228, 21: 13.586, 22: 13.950, 23: 14.321, 24: 14.699, 25: 15.082, 26: 15.471, 27: 15.867, 28: 16.269, 29: 16.677, 30: 17.091},
            39: {5: 9.348, 6: 9.568, 7: 9.801, 8: 10.044, 9: 10.296, 10: 10.558, 11: 10.831, 12: 11.154, 13: 11.484, 14: 11.820, 15: 12.163, 16: 12.512, 17: 12.867, 18: 13.228, 19: 13.594, 20: 13.966, 21: 14.343, 22: 14.728, 23: 15.118, 24: 15.515, 25: 15.919, 26: 16.328, 27: 16.675, 28: 17.168, 29: 17.596, 30: 18.030},
            40: {5: 9.789, 6: 10.032, 7: 10.285, 8: 10.547, 9: 10.819, 10: 11.103, 11: 11.442, 12: 11.786, 13: 12.137, 14: 12.493, 15: 12.856, 16: 13.225, 17: 13.599, 18: 13.979, 19: 14.364, 20: 14.755, 21: 15.153, 22: 15.557, 23: 15.969, 24: 16.386, 25: 16.811, 26: 17.242, 27: 17.681, 28: 18.125, 29: 18.574, 30: 19.028},
            41: {5: 10.271, 6: 10.535, 7: 10.808, 8: 11.091, 9: 11.386, 10: 11.741, 11: 12.102, 12: 12.467, 13: 12.838, 14: 13.215, 15: 13.599, 16: 13.987, 17: 14.380, 18: 14.779, 19: 15.184, 20: 15.596, 21: 16.015, 22: 16.441, 23: 16.874, 24: 17.313, 25: 17.761, 26: 18.215, 27: 18.675, 28: 19.140, 29: 19.611},
            42: {5: 10.801, 6: 11.085, 7: 11.379, 8: 11.684, 9: 12.059, 10: 12.438, 11: 12.817, 12: 13.203, 13: 13.595, 14: 13.992, 15: 14.395, 16: 14.803, 17: 15.215, 18: 15.635, 19: 16.061, 20: 16.495, 21: 16.936, 22: 17.384, 23: 17.839, 24: 18.302, 25: 18.773, 26: 19.249, 27: 19.732, 28: 20.220, 29: 20.715},
            43: {5: 11.377, 6: 11.681, 7: 11.998, 8: 12.393, 9: 12.787, 10: 13.185, 11: 13.587, 12: 13.994, 13: 14.406, 14: 14.823, 15: 15.245, 16: 15.673, 17: 16.106, 18: 16.548, 19: 16.997, 20: 17.453, 21: 17.917, 22: 18.388, 23: 18.868, 24: 19.355, 25: 19.849, 26: 20.349, 27: 20.855},
            44: {5: 11.998, 6: 12.337, 7: 12.744, 8: 13.158, 9: 13.573, 10: 13.991, 11: 14.413, 12: 14.840, 13: 15.272, 14: 15.709, 15: 16.151, 16: 16.600, 17: 17.057, 18: 17.521, 19: 17.993, 20: 18.473, 21: 18.961, 22: 19.457, 23: 19.962, 24: 20.473, 25: 20.991, 26: 21.516},
            45: {5: 12.668, 6: 13.111, 7: 13.547, 8: 13.980, 9: 14.415, 10: 14.853, 11: 15.295, 12: 15.743, 13: 16.194, 14: 16.651, 15: 17.115, 16: 17.587, 17: 18.067, 18: 18.555, 19: 19.051, 20: 19.556, 21: 20.070, 22: 20.593, 23: 21.123, 24: 21.660, 25: 22.204},
            46: {5: 13.397, 6: 13.956, 7: 14.509, 8: 14.860, 9: 15.314, 10: 15.772, 11: 16.234, 12: 16.701, 13: 17.173, 14: 17.652, 15: 18.140, 16: 18.636, 17: 19.140, 18: 19.653, 19: 20.176, 20: 20.708, 21: 21.249, 22: 21.798, 23: 22.354, 24: 22.918},
            47: {5: 14.391, 6: 14.863, 7: 15.332, 8: 15.801, 9: 16.274, 10: 16.751, 11: 17.232, 12: 17.719, 13: 18.213, 14: 18.716, 15: 19.229, 16: 19.750, 17: 20.280, 18: 20.821, 19: 21.371, 20: 21.931, 21: 22.500, 22: 23.076, 23: 23.661},
            48: {5: 15.353, 6: 15.836, 7: 16.319, 8: 16.806, 9: 17.296, 10: 17.791, 11: 18.292, 12: 18.801, 13: 19.320, 14: 19.848, 15: 20.385, 16: 20.934, 17: 21.492, 18: 22.062, 19: 22.642, 20: 23.230, 21: 23.827, 22: 24.433},
            49: {5: 16.385, 6: 16.877, 7: 17.374, 8: 17.876, 9: 18.383, 10: 18.896, 11: 19.418, 12: 19.952, 13: 20.497, 14: 21.051, 15: 21.616, 16: 22.193, 17: 22.781, 18: 23.381, 19: 23.990, 20: 24.609, 21: 25.237},
            50: {5: 17.486, 6: 17.986, 7: 18.493, 8: 19.009, 9: 19.532, 10: 20.067, 11: 20.614, 12: 21.174, 13: 21.745, 14: 22.327, 15: 22.922, 16: 23.530, 17: 24.150, 18: 24.780, 19: 25.421, 20: 26.071},
            51: {5: 18.753, 6: 19.047, 7: 19.579, 8: 20.119, 9: 20.671, 10: 21.236, 11: 21.815, 12: 22.406, 13: 23.009, 14: 23.625, 15: 24.255, 16: 24.898, 17: 25.552, 18: 26.216, 19: 26.892, 20: 0.000},
            52: {5: 19.614, 6: 20.162, 7: 20.719, 8: 21.289, 9: 21.874, 10: 22.473, 11: 23.084, 12: 23.708, 13: 24.347, 14: 25.000, 15: 25.667, 16: 26.346, 17: 27.035, 18: 27.737, 19: 0.000, 20: 0.000},
            53: {5: 20.759, 6: 21.334, 7: 21.922, 8: 22.527, 9: 23.146, 10: 23.779, 11: 24.426, 12: 25.088, 13: 25.765, 14: 26.457, 15: 27.162, 16: 27.878, 17: 28.607, 18: 0.000, 19: 0.000, 20: 0.000},
            54: {5: 21.962, 6: 22.570, 7: 23.196, 8: 23.837, 9: 24.492, 10: 25.162, 11: 25.848, 12: 26.551, 13: 27.270, 14: 28.001, 15: 28.745, 16: 29.503, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            55: {5: 23.231, 6: 23.879, 7: 24.543, 8: 25.222, 9: 25.917, 10: 26.629, 11: 27.358, 12: 28.105, 13: 28.865, 14: 29.638, 15: 30.426, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            56: {5: 24.576, 6: 25.265, 7: 25.969, 8: 26.690, 9: 27.429, 10: 28.187, 11: 28.962, 12: 29.752, 13: 30.556, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            57: {5: 26.005, 6: 26.736, 7: 27.484, 8: 28.252, 9: 29.040, 10: 29.846, 11: 30.667, 12: 31.505, 13: 32.356, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            58: {5: 27.527, 6: 28.303, 7: 29.101, 8: 29.920, 9: 30.758, 10: 31.612, 11: 32.487, 12: 33.370, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            59: {5: 29.151, 6: 29.979, 7: 30.830, 8: 31.702, 9: 32.590, 10: 33.495, 11: 34.419, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            60: {5: 30.885, 6: 31.769, 7: 32.676, 8: 33.600, 9: 34.541, 10: 35.503, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            61: {5: 32.734, 6: 33.677, 7: 34.638, 8: 35.618, 9: 36.620, 10: 0.000, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            62: {5: 34.709, 6: 35.709, 7: 36.728, 8: 37.772, 9: 0.000, 10: 0.000, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            63: {5: 36.814, 6: 37.875, 7: 38.962, 8: 0.000, 9: 0.000, 10: 0.000, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            64: {5: 39.061, 6: 40.192, 7: 0.000, 8: 0.000, 9: 0.000, 10: 0.000, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            65: {5: 41.466, 6: 0.000, 7: 0.000, 8: 0.000, 9: 0.000, 10: 0.000, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            66: {5: 0.000, 6: 0.000, 7: 0.000, 8: 0.000, 9: 0.000, 10: 0.000, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            67: {5: 0.000, 6: 0.000, 7: 0.000, 8: 0.000, 9: 0.000, 10: 0.000, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            68: {5: 0.000, 6: 0.000, 7: 0.000, 8: 0.000, 9: 0.000, 10: 0.000, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            69: {5: 0.000, 6: 0.000, 7: 0.000, 8: 0.000, 9: 0.000, 10: 0.000, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000},
            70: {5: 0.000, 6: 0.000, 7: 0.000, 8: 0.000, 9: 0.000, 10: 0.000, 11: 0.000, 12: 0.000, 13: 0.000, 14: 0.000, 15: 0.000, 16: 0.000, 17: 0.000, 18: 0.000, 19: 0.000, 20: 0.000}
        }
    def _fill_missing_ages(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∂–µ–Ω—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã)"""
        # –ú—É–∂—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –ø–æ–ª–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä—è _generate_complete_male_table()
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∂–µ–Ω—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É
        
        female_ages = sorted(self.LIFE_TARIFFS_FEMALE.keys())
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è –∂–µ–Ω—â–∏–Ω
        for age in range(self.MIN_AGE, self.MAX_AGE + 1):
            if age not in self.LIFE_TARIFFS_FEMALE:
                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
                lower_age = max([a for a in female_ages if a < age], default=female_ages[0])
                upper_age = min([a for a in female_ages if a > age], default=female_ages[-1])
                
                if lower_age == upper_age:
                    self.LIFE_TARIFFS_FEMALE[age] = self.LIFE_TARIFFS_FEMALE[lower_age].copy()
                else:
                    # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º
                    self.LIFE_TARIFFS_FEMALE[age] = {}
                    for term in range(1, 31):
                        if term in self.LIFE_TARIFFS_FEMALE[lower_age] and term in self.LIFE_TARIFFS_FEMALE[upper_age]:
                            lower_val = self.LIFE_TARIFFS_FEMALE[lower_age][term]
                            upper_val = self.LIFE_TARIFFS_FEMALE[upper_age][term]
                            interpolated = lower_val + (upper_val - lower_val) * (age - lower_age) / (upper_age - lower_age)
                            self.LIFE_TARIFFS_FEMALE[age][term] = round(interpolated, 6)
    
    def get_calculator_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ"""
        return {
            'name': 'JustInCase Calculator –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô',
            'version': 'v2.2 FIXED COEFFICIENTS + FEMALE TARIFFS',
            'description': '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∏ –∂–µ–Ω—Å–∫–∏–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏–∑ Excel',
            'features': {
                'actuarial_tables': True,
                'sbszh_actuarial_tables': True,
                'excel_formula': True,
                'correct_accident_tariffs': True,
                'fixed_critical_illness': True,
                'corrected_frequency_coefficients': True,
                'corrected_female_tariffs': True
            },
            'frequency_coefficients': self.FREQUENCY_COEFFICIENTS,
            'excel_analysis': {
                'tbl_freq_k_location': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏!$I$10:$J$13',
                'logic': 'Based on Excel formula: kk * VLOOKUP(kk,tbl_freq_k,2,0)',
                'coefficients_source': 'Calculated from tbl_freq_k values',
                'female_tariffs_source': 'Exact values from Excel screenshot (women table)'
            }
        }
    
    def calculate_age(self, birth_date_str: str) -> int:
        """–†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        try:
            birth_date = datetime.strptime(birth_date_str, '%Y-%m-%d').date()
            today = date.today()
            age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
            return age
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
            return 30
    
    def validate_input_data(self, data: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        errors = []
        
        try:
            # –í–æ–∑—Ä–∞—Å—Ç
            age = self.calculate_age(data['birthDate'])
            if age < self.MIN_AGE or age > self.MAX_AGE:
                errors.append(f"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {self.MIN_AGE} –¥–æ {self.MAX_AGE} –ª–µ—Ç")
            
            # –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞
            if data.get('insuranceInfo') == 'yes':
                sum_str = str(data.get('insuranceSum', '')).replace(' ', '').replace(',', '')
                try:
                    insurance_sum = int(sum_str)
                    if insurance_sum < self.MIN_INSURANCE_SUM:
                        errors.append(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {self.MIN_INSURANCE_SUM:,} —Ä—É–±")
                    elif insurance_sum > self.MAX_INSURANCE_SUM:
                        errors.append(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {self.MAX_INSURANCE_SUM:,} —Ä—É–±")
                except ValueError:
                    errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞")
                
                # –°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
                try:
                    term = int(data.get('insuranceTerm', 1))
                    if term < self.MIN_INSURANCE_TERM or term > self.MAX_INSURANCE_TERM:
                        errors.append(f"–°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {self.MIN_INSURANCE_TERM} –¥–æ {self.MAX_INSURANCE_TERM} –ª–µ—Ç")
                except ValueError:
                    errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è")
            
            return len(errors) == 0, errors
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False, ["–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"]
    
    def get_life_tariff(self, age: int, gender: str, term: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞—Ä–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∂–∏–∑–Ω–∏"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –ø–æ–ª—É
            tariffs_table = self.LIFE_TARIFFS_MALE if gender == 'male' else self.LIFE_TARIFFS_FEMALE
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            age = max(min(age, self.MAX_AGE), self.MIN_AGE)
            term = max(min(term, self.MAX_INSURANCE_TERM), self.MIN_INSURANCE_TERM)
            
            # –ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            if age in tariffs_table and term in tariffs_table[age]:
                tariff = tariffs_table[age][term]
                logger.debug(f"–¢–∞—Ä–∏—Ñ –°–ë–°–ñ: –≤–æ–∑—Ä–∞—Å—Ç {age}, —Å—Ä–æ–∫ {term}, –ø–æ–ª {gender} = {tariff:.4f}")
                return tariff
            else:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {age}, —Å—Ä–æ–∫–∞ {term}, –ø–æ–ª–∞ {gender}")
                return 10.0 if gender == 'male' else 8.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞—Ä–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞: {e}")
            return 10.0 if gender == 'male' else 8.0
    
    def get_frequency_coefficient(self, frequency: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π"""
        return self.FREQUENCY_COEFFICIENTS.get(frequency, 1.0)
    
    def calculate_base_premium(self, insurance_sum: int, age: int, gender: str, term: int, frequency: str) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π –ø—Ä–µ–º–∏–∏ (—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏ + –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ –°–ë–°–ñ
            base_tariff_per_1000 = self.get_life_tariff(age, gender, term)
            base_tariff = base_tariff_per_1000 / 1000
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É: —Ç–∞—Ä–∏—Ñ / (1 - –∫–æ–º–∏—Å—Å–∏—è - –Ω–∞–≥—Ä—É–∑–∫–∞)
            load_factor = 1 - self.COMMISSION_RATE - self.LOAD_RATE  # = 0.65
            life_tariff = base_tariff / load_factor
            
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è –∑–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏
            life_premium = life_tariff * insurance_sum
            
            # –ü—Ä–µ–º–∏—è –∑–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å (20% –æ—Ç –ø—Ä–µ–º–∏–∏ –∂–∏–∑–Ω–∏)
            disability_premium = life_premium * 0.2
            
            # –û–±—â–∞—è –±–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã
            base_premium_annual = life_premium + disability_premium
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
            freq_coeff = self.get_frequency_coefficient(frequency)
            total_base_premium = base_premium_annual * freq_coeff
            
            logger.info(f"üí∞ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –±–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è:")
            logger.info(f"   –ñ–∏–∑–Ω—å: {life_premium:.2f} —Ä—É–±")
            logger.info(f"   –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {disability_premium:.2f} —Ä—É–±")
            logger.info(f"   –ì–æ–¥–æ–≤–∞—è –±–µ–∑ —á–∞—Å—Ç–æ—Ç—ã: {base_premium_annual:.2f} —Ä—É–±")
            logger.info(f"   –ö–æ—ç—Ñ—Ñ. —á–∞—Å—Ç–æ—Ç—ã ({frequency}): {freq_coeff}")
            logger.info(f"   –ò–¢–û–ì–û –±–∞–∑–æ–≤–∞—è: {total_base_premium:.2f} —Ä—É–±")
            
            return {
                'life_premium': round(life_premium, 2),
                'disability_premium': round(disability_premium, 2),
                'base_premium': round(total_base_premium, 2),
                'frequency_coefficient': freq_coeff,
                'life_tariff': life_tariff,
                'annual_before_frequency': round(base_premium_annual, 2)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–π –ø—Ä–µ–º–∏–∏: {e}")
            raise
    
    def calculate_accident_premium(self, insurance_sum: int, frequency: str, sport_included: bool = False) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –ù–°"""
        try:
            freq_coeff = self.get_frequency_coefficient(frequency)
            
            # –†–∞—Å—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∏–¥—É –ù–°
            accident_death = freq_coeff * self.ACCIDENT_TARIFFS['death_accident'] * insurance_sum
            accident_transport = freq_coeff * self.ACCIDENT_TARIFFS['death_transport'] * insurance_sum
            accident_trauma = freq_coeff * self.ACCIDENT_TARIFFS['trauma_accident'] * insurance_sum
            
            total_accident_premium = accident_death + accident_transport + accident_trauma
            
            # –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            if sport_included:
                sport_coeff = 1.1
                total_accident_premium *= sport_coeff
            
            logger.info(f"üí• –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–µ–º–∏—è –ù–°:")
            logger.info(f"   –°–º–µ—Ä—Ç—å –æ—Ç –ù–°: {accident_death:.2f} —Ä—É–±")
            logger.info(f"   –°–º–µ—Ä—Ç—å –æ—Ç –î–¢–ü: {accident_transport:.2f} —Ä—É–±") 
            logger.info(f"   –¢—Ä–∞–≤–º–∞: {accident_trauma:.2f} —Ä—É–±")
            logger.info(f"   –ö–æ—ç—Ñ—Ñ. —á–∞—Å—Ç–æ—Ç—ã: {freq_coeff}")
            logger.info(f"   –ò–¢–û–ì–û –ù–°: {total_accident_premium:.2f} —Ä—É–±")
            
            return {
                'accident_death': round(accident_death, 2),
                'accident_transport': round(accident_transport, 2),
                'accident_trauma': round(accident_trauma, 2),
                'total_accident_premium': round(total_accident_premium, 2),
                'sport_coefficient': 1.1 if sport_included else 1.0,
                'frequency_coefficient': freq_coeff
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏ –ù–°: {e}")
            raise
    
    def calculate_critical_illness_premium(self, treatment_region: str, frequency: str) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –ö–ó"""
        try:
            freq_coeff = self.get_frequency_coefficient(frequency)
            
            # –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            base_tariff = self.CRITICAL_ILLNESS_TARIFFS.get(treatment_region, 0)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã
            critical_premium = base_tariff * freq_coeff
            
            logger.info(f"üè• –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–µ–º–∏—è –ö–ó:")
            logger.info(f"   –†–µ–≥–∏–æ–Ω: {treatment_region}")
            logger.info(f"   –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: {base_tariff:.2f} —Ä—É–±")
            logger.info(f"   –ö–æ—ç—Ñ—Ñ. —á–∞—Å—Ç–æ—Ç—ã: {freq_coeff}")
            logger.info(f"   –ò–¢–û–ì–û –ö–ó: {critical_premium:.2f} —Ä—É–±")
            
            return {
                'critical_premium': round(critical_premium, 2),
                'base_tariff': base_tariff,
                'treatment_region': treatment_region,
                'frequency_coefficient': freq_coeff
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏ –ö–ó: {e}")
            raise
    
    def calculate_full_program(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Å –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
        try:
            logger.info("üöÄ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –∏ –∂–µ–Ω—Å–∫–∏–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏–∑ Excel")
            
            # 1. –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            age = self.calculate_age(data['birthDate'])
            gender = data['gender']
            frequency = data.get('insuranceFrequency', '–ï–∂–µ–≥–æ–¥–Ω–æ')
            
            # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã –∏ —Å—Ä–æ–∫–∞
            if data.get('insuranceInfo') == 'yes':
                insurance_sum_str = str(data.get('insuranceSum', '')).replace(' ', '').replace(',', '')
                try:
                    insurance_sum = int(insurance_sum_str)
                except ValueError:
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞")
                
                term_str = str(data.get('insuranceTerm', ''))
                try:
                    insurance_term = int(term_str)
                except ValueError:
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è")
            else:
                # –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—É–º–º—ã
                insurance_sum = self.calculate_recommended_sum(data)
                insurance_term = 10
            
            # 3. –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π –ø—Ä–µ–º–∏–∏
            base_calc = self.calculate_base_premium(insurance_sum, age, gender, insurance_term, frequency)
            base_premium = base_calc['base_premium']
            
            # 4. –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –ù–°
            accident_included = data.get('accidentPackage', False)
            sport_included = data.get('sportPackage', False)
            
            if accident_included:
                accident_calc = self.calculate_accident_premium(insurance_sum, frequency, sport_included)
                accident_premium = accident_calc['total_accident_premium']
            else:
                accident_premium = 0
            
            # 5. –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –ö–ó
            critical_included = data.get('criticalPackage', False)
            treatment_region = data.get('treatmentRegion', 'russia')
            
            if critical_included:
                critical_calc = self.calculate_critical_illness_premium(treatment_region, frequency)
                critical_premium = critical_calc['critical_premium']
            else:
                critical_premium = 0
            
            # 6. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–µ–º–∏—è
            total_premium = base_premium + accident_premium + critical_premium
            
            freq_coeff = self.get_frequency_coefficient(frequency)
            
            logger.info(f"üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (–ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô):")
            logger.info(f"   –í–æ–∑—Ä–∞—Å—Ç: {age}, –ü–æ–ª: {gender}, –°—Ä–æ–∫: {insurance_term}")
            logger.info(f"   –°—É–º–º–∞: {insurance_sum:,} —Ä—É–±")
            logger.info(f"   –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {frequency} (–∫–æ—ç—Ñ—Ñ: {freq_coeff})")
            logger.info(f"   –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {base_premium:,.2f} —Ä—É–±")
            logger.info(f"   –ù–° –ø—Ä–µ–º–∏—è: {accident_premium:,.2f} —Ä—É–±")
            logger.info(f"   –ö–ó –ø—Ä–µ–º–∏—è: {critical_premium:,.2f} —Ä—É–±")
            logger.info(f"   –û–ë–©–ê–Ø –ü–†–ï–ú–ò–Ø: {total_premium:,.2f} —Ä—É–±")
            
            return {
                'age': age,
                'gender': gender,
                'insuranceSum': insurance_sum,
                'insuranceTerm': insurance_term,
                'insuranceFrequency': frequency,
                'frequencyCoefficient': freq_coeff,
                'basePremium': round(base_premium, 2),
                'accidentPremium': round(accident_premium, 2),
                'criticalPremium': round(critical_premium, 2),
                'annualPremium': round(total_premium, 2),
                'calculatorVersion': 'v2.2 FIXED COEFFICIENTS + FEMALE TARIFFS',
                'coefficientsSource': 'Excel tbl_freq_k analysis + corrected female tariffs'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            raise
    
    def calculate_recommended_sum(self, data: Dict[str, Any]) -> int:
        """–†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã"""
        try:
            incomes = []
            for year in ['2021', '2022', '2023']:
                income_key = f'income{year}'
                income_value = data.get(income_key, 0)
                if income_value:
                    income_clean = str(income_value).replace(' ', '').replace(',', '')
                    try:
                        incomes.append(int(income_clean))
                    except:
                        incomes.append(0)
                else:
                    incomes.append(0)
            
            avg_income = sum(incomes) / len(incomes) if incomes else 2000000
            
            multiplier = 5
            if data.get('breadwinnerStatus') == 'yes':
                multiplier += 2
            
            children_count = 0
            try:
                children_str = str(data.get('childrenCount', '0'))
                children_count = int(children_str.replace('–±–æ–ª–µ–µ', '3').replace('+', ''))
            except:
                children_count = 0
            
            multiplier += children_count * 1.5
            
            if data.get('specialCareRelatives') == 'yes':
                multiplier += 1
            
            recommended_sum = int(avg_income * multiplier)
            return max(recommended_sum, self.MIN_INSURANCE_SUM)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—É–º–º—ã: {e}")
            return self.MIN_INSURANCE_SUM