# test_calculator.py
# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

import requests
import json

# URL —Å–µ—Ä–≤–µ—Ä–∞
BASE_URL = "http://localhost:5000"

def test_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
    try:
        response = requests.get(f"{BASE_URL}/api/care-future/status")
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    print("\nüß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç...")
    try:
        response = requests.get(f"{BASE_URL}/api/care-future/test")
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print(f"Message: {data.get('message', 'N/A')}")
            if 'test_result' in data:
                result = data['test_result']
                print(f"–°—Ç—Ä–∞—Ö–æ–≤–æ–π –≤–∑–Ω–æ—Å: {result.get('premium_amount', 'N/A'):,} —Ä—É–±.")
                print(f"–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {result.get('insurance_sum', 'N/A'):,} —Ä—É–±.")
                print(f"–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {result.get('accumulated_capital', 'N/A'):,} —Ä—É–±.")
                print(f"–î–æ—Ö–æ–¥: {result.get('program_income', 'N/A'):,} —Ä—É–±.")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_calculation():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    print("\nüí∞ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞...")
    
    test_data = {
        "birthDate": "1990-01-01",
        "gender": "male",
        "contractTerm": 5,
        "calculationType": "from_premium",
        "inputAmount": 960000,
        "email": "test@example.com"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/care-future/calculate",
            json=test_data,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"ID —Ä–∞—Å—á–µ—Ç–∞: {data.get('calculationId', 'N/A')}")
                
                results = data.get('results', {})
                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                print(f"–°—Ç—Ä–∞—Ö–æ–≤–æ–π –≤–∑–Ω–æ—Å: {results.get('premiumAmount', 'N/A'):,} —Ä—É–±.")
                print(f"–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {results.get('insuranceSum', 'N/A'):,} —Ä—É–±.")
                print(f"–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {results.get('accumulatedCapital', 'N/A'):,} —Ä—É–±.")
                print(f"–î–æ—Ö–æ–¥: {results.get('programIncome', 'N/A'):,} —Ä—É–±.")
                print(f"–ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç: {results.get('taxDeduction', 'N/A'):,} —Ä—É–±.")
                
                params = data.get('inputParameters', {})
                print(f"\nüë§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                print(f"–í–æ–∑—Ä–∞—Å—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ: {params.get('ageAtStart', 'N/A')}")
                print(f"–í–æ–∑—Ä–∞—Å—Ç –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: {params.get('ageAtEnd', 'N/A')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.text}")
            
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_proxy():
    """–¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏—Ä—É—é—â–µ–≥–æ endpoint"""
    print("\nüîÑ –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ endpoint...")
    
    test_data = {
        "birthDate": "1985-05-15",
        "gender": "female",
        "contractTerm": 10,
        "calculationType": "from_sum",
        "inputAmount": 5000000
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/care-future/calculate",
            json=test_data,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                results = data.get('results', {})
                print(f"–†–∞—Å—á–µ—Ç –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã: {results.get('premiumAmount', 'N/A'):,} —Ä—É–±./–≥–æ–¥")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.text}")
            
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("–°—Ç–∞—Ç—É—Å", test_status),
        ("–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç", test_simple), 
        ("–ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç", test_calculation),
        ("–ü—Ä–æ–∫—Å–∏ endpoint", test_proxy)
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        print(f"\n{'='*20} {name} {'='*20}")
        if test_func():
            passed += 1
            print(f"‚úÖ {name}: –ü–†–û–®–ï–õ")
        else:
            print(f"‚ùå {name}: –ù–ï –ü–†–û–®–ï–õ")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")