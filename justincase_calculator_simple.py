# justincase_calculator_simple.py - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SQLite

import logging
from datetime import datetime, date
from typing import Dict, Any, Optional
from dataclasses import dataclass
from database_adapter import get_database_adapter

logger = logging.getLogger("justincase_calculator")

@dataclass
class JustincaseCalculationInput:
    """–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ù–°–ñ"""
    age: int
    gender: str  # 'm' or 'f'
    term_years: int
    sum_insured: float
    include_accident: bool = False
    include_critical_illness: bool = False
    critical_illness_type: str = 'rf'  # 'rf' or 'abroad'
    payment_frequency: str = 'annual'  # 'annual', 'semi_annual', 'quarterly', 'monthly'

@dataclass
class JustincaseCalculationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –ù–°–ñ"""
    success: bool
    calculation_id: str
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    client_age: int
    client_gender: str
    insurance_term: int
    base_insurance_sum: float
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–º–∏–∏
    base_premium: float
    death_premium: float
    disability_premium: float
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–º–∏–∏
    accident_premium: float = 0
    accident_death_premium: float = 0
    traffic_death_premium: float = 0
    injury_premium: float = 0
    
    critical_premium: float = 0
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
    total_premium: float = 0
    
    # –§–ª–∞–≥–∏ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤
    accident_package_included: bool = False
    critical_package_included: bool = False
    treatment_region: str = 'rf'
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    calculator: str = 'JustincaseCalculatorSimple'
    version: str = '1.0.0'
    calculation_date: str = None
    
    def __post_init__(self):
        if not self.calculation_date:
            self.calculation_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

class JustincaseCalculator:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SQLite"""
    
    def __init__(self):
        self.db_adapter = get_database_adapter()
        
    def calculate(self, input_data: JustincaseCalculationInput) -> JustincaseCalculationResult:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞"""
        
        try:
            logger.info(f"üßÆ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –ù–°–ñ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {input_data.age}, –ø–æ–ª {input_data.gender}, —Å—Ä–æ–∫ {input_data.term_years}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ä–∞—Å—á–µ—Ç–∞
            calc_id = f"NSJ_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{input_data.age}_{input_data.gender}"
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã
            base_tariff = self.db_adapter.get_tariff(
                age=input_data.age,
                gender=input_data.gender,
                term_years=input_data.term_years
            )
            
            if not base_tariff:
                logger.error(f"‚ùå –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {input_data.age}, –ø–æ–ª–∞ {input_data.gender}, —Å—Ä–æ–∫–∞ {input_data.term_years}")
                return JustincaseCalculationResult(
                    success=False,
                    calculation_id=calc_id,
                    client_age=input_data.age,
                    client_gender=input_data.gender,
                    insurance_term=input_data.term_years,
                    base_insurance_sum=input_data.sum_insured,
                    base_premium=0,
                    death_premium=0,
                    disability_premium=0
                )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–º–∏–∏
            death_premium = self._calculate_premium(
                input_data.sum_insured, 
                base_tariff['death_rate'],
                input_data.payment_frequency
            )
            
            disability_premium = self._calculate_premium(
                input_data.sum_insured, 
                base_tariff['disability_rate'],
                input_data.payment_frequency
            )
            
            base_premium = death_premium + disability_premium
            
            logger.info(f"üí∞ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–º–∏–∏: —Å–º–µ—Ä—Ç—å={death_premium:.2f}, –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å={disability_premium:.2f}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = JustincaseCalculationResult(
                success=True,
                calculation_id=calc_id,
                client_age=input_data.age,
                client_gender="–ú—É–∂—Å–∫–æ–π" if input_data.gender == 'm' else "–ñ–µ–Ω—Å–∫–∏–π",
                insurance_term=input_data.term_years,
                base_insurance_sum=input_data.sum_insured,
                base_premium=base_premium,
                death_premium=death_premium,
                disability_premium=disability_premium,
                total_premium=base_premium
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –ù–° –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if input_data.include_accident:
                accident_result = self._calculate_accident_package(input_data)
                if accident_result:
                    result.accident_package_included = True
                    result.accident_premium = accident_result['total_premium']
                    result.accident_death_premium = accident_result['death_premium']
                    result.traffic_death_premium = accident_result['traffic_premium']
                    result.injury_premium = accident_result['injury_premium']
                    result.total_premium += accident_result['total_premium']
                    
                    logger.info(f"üö® –ü—Ä–µ–º–∏—è –ù–°: {accident_result['total_premium']:.2f}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –ö–ó –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if input_data.include_critical_illness:
                critical_result = self._calculate_critical_package(input_data)
                if critical_result:
                    result.critical_package_included = True
                    result.critical_premium = critical_result['premium']
                    result.treatment_region = input_data.critical_illness_type
                    result.total_premium += critical_result['premium']
                    
                    logger.info(f"üè• –ü—Ä–µ–º–∏—è –ö–ó: {critical_result['premium']:.2f}")
            
            logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {result.total_premium:.2f}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ù–°–ñ: {e}")
            return JustincaseCalculationResult(
                success=False,
                calculation_id=f"ERROR_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                client_age=input_data.age,
                client_gender=input_data.gender,
                insurance_term=input_data.term_years,
                base_insurance_sum=input_data.sum_insured,
                base_premium=0,
                death_premium=0,
                disability_premium=0
            )
    
    def _calculate_premium(self, sum_insured: float, rate: float, frequency: str = 'annual') -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –ø–æ —Ç–∞—Ä–∏—Ñ—É"""
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è (—Ç–∞—Ä–∏—Ñ –≤ –ø—Ä–æ–º–∏–ª–ª–µ –Ω–∞ 1000 —Ä—É–±)
        base_premium = (sum_insured / 1000) * rate
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –ø–ª–∞—Ç–µ–∂–µ–π
        frequency_multipliers = {
            'annual': 1.0,
            'semi_annual': 1.02,  # +2% –∑–∞ –ø–æ–ª—É–≥–æ–¥–æ–≤—É—é –æ–ø–ª–∞—Ç—É
            'quarterly': 1.03,    # +3% –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É
            'monthly': 1.05       # +5% –∑–∞ –º–µ—Å—è—á–Ω—É—é –æ–ø–ª–∞—Ç—É
        }
        
        multiplier = frequency_multipliers.get(frequency, 1.0)
        return base_premium * multiplier
    
    def _calculate_accident_package(self, input_data: JustincaseCalculationInput) -> Optional[Dict[str, float]]:
        """–†–∞—Å—á–µ—Ç –ø–∞–∫–µ—Ç–∞ –ù–°"""
        
        try:
            accident_tariff = self.db_adapter.get_accident_tariff(
                age=input_data.age,
                gender=input_data.gender,
                term_years=input_data.term_years
            )
            
            if not accident_tariff:
                logger.warning(f"‚ö†Ô∏è –¢–∞—Ä–∏—Ñ –ù–° –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {input_data.age}")
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–º–∏–∏ –ø–æ –≤–∏–¥–∞–º —Ä–∏—Å–∫–∞ –ù–°
            death_premium = self._calculate_premium(
                input_data.sum_insured,
                accident_tariff['death_rate'],
                input_data.payment_frequency
            )
            
            traffic_premium = self._calculate_premium(
                input_data.sum_insured,
                accident_tariff['traffic_death_rate'],
                input_data.payment_frequency
            )
            
            injury_premium = self._calculate_premium(
                input_data.sum_insured,
                accident_tariff['injury_rate'],
                input_data.payment_frequency
            )
            
            total_premium = death_premium + traffic_premium + injury_premium
            
            return {
                'death_premium': death_premium,
                'traffic_premium': traffic_premium,
                'injury_premium': injury_premium,
                'total_premium': total_premium
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∞–∫–µ—Ç–∞ –ù–°: {e}")
            return None
    
    def _calculate_critical_package(self, input_data: JustincaseCalculationInput) -> Optional[Dict[str, float]]:
        """–†–∞—Å—á–µ—Ç –ø–∞–∫–µ—Ç–∞ –ö–ó"""
        
        try:
            # –î–ª—è –ö–ó –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É 60 –º–ª–Ω —Ä—É–±
            critical_sum = 60_000_000
            
            region = 'russia' if input_data.critical_illness_type == 'rf' else 'abroad'
            
            critical_tariff = self.db_adapter.get_critical_tariff(
                age=input_data.age,
                gender=input_data.gender,
                term_years=input_data.term_years,
                region=region
            )
            
            if not critical_tariff:
                logger.warning(f"‚ö†Ô∏è –¢–∞—Ä–∏—Ñ –ö–ó –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {input_data.age}, —Ä–µ–≥–∏–æ–Ω {region}")
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–º–∏—é –ö–ó
            premium = self._calculate_premium(
                critical_sum,
                critical_tariff['rate'],
                input_data.payment_frequency
            )
            
            return {
                'premium': premium,
                'insurance_sum': critical_sum,
                'region': region
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∞–∫–µ—Ç–∞ –ö–ó: {e}")
            return None

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ")
    print("=" * 60)
    
    try:
        calculator = JustincaseCalculator()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_input = JustincaseCalculationInput(
            age=35,
            gender='m',
            term_years=15,
            sum_insured=5_000_000,
            include_accident=True,
            include_critical_illness=True,
            critical_illness_type='rf',
            payment_frequency='annual'
        )
        
        print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –í–æ–∑—Ä–∞—Å—Ç: {test_input.age}")
        print(f"   –ü–æ–ª: {test_input.gender}")
        print(f"   –°—Ä–æ–∫: {test_input.term_years}")
        print(f"   –°—É–º–º–∞: {test_input.sum_insured:,.0f}")
        print(f"   –ù–°: {test_input.include_accident}")
        print(f"   –ö–ó: {test_input.include_critical_illness}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        result = calculator.calculate(test_input)
        
        if result.success:
            print(f"\n‚úÖ –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"   ID —Ä–∞—Å—á–µ—Ç–∞: {result.calculation_id}")
            print(f"   –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {result.base_premium:,.2f} —Ä—É–±.")
            print(f"   –ü—Ä–µ–º–∏—è –ù–°: {result.accident_premium:,.2f} —Ä—É–±.")
            print(f"   –ü—Ä–µ–º–∏—è –ö–ó: {result.critical_premium:,.2f} —Ä—É–±.")
            print(f"   –ò–¢–û–ì–û: {result.total_premium:,.2f} —Ä—É–±.")
        else:
            print(f"\n‚ùå –†–∞—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è")
        
        return result.success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    quick_test()
