#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ VM —á–µ—Ä–µ–∑ HTTP API
"""

import requests
import time
import json
from urllib3 import disable_warnings
from urllib3.exceptions import InsecureRequestWarning

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
disable_warnings(InsecureRequestWarning)

def try_update_via_webhook():
    """–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-—Ö—É–∫ –∏–ª–∏ HTTP API"""
    
    vm_ip = "176.108.243.189"
    
    print("üöÄ === –ü–û–ü–´–¢–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø VM ===")
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_endpoints = [
        f"https://{vm_ip}:9000/api/webhooks/update",  # Portainer webhook
        f"https://{vm_ip}/api/update",                # –ö–∞—Å—Ç–æ–º–Ω—ã–π webhook
        f"https://{vm_ip}/webhook/deploy",            # Deploy webhook
        f"http://{vm_ip}:8080/update",               # HTTP webhook
    ]
    
    update_payload = {
        "action": "update",
        "services": ["server", "client"],
        "images": {
            "server": "zerotlt/rgszh-miniapp-server:latest",
            "client": "zerotlt/rgszh-miniapp-client:latest"
        }
    }
    
    # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    for endpoint in update_endpoints:
        try:
            print(f"üîç –ü—Ä–æ–±—É–µ–º: {endpoint}")
            response = requests.post(
                endpoint,
                json=update_payload,
                timeout=10,
                verify=False
            )
            
            if response.status_code in [200, 201, 202]:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
                return True
            else:
                print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å {response.status_code}: {response.text[:100]}")
                
        except requests.exceptions.ConnectionError:
            print(f"‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {endpoint}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {endpoint}: {e}")
    
    return False

def try_docker_api_update():
    """–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Docker API"""
    
    vm_ip = "176.108.243.189"
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã Docker API
    docker_ports = [2375, 2376, 4243]
    
    for port in docker_ports:
        try:
            print(f"üê≥ –ü—Ä–æ–±—É–µ–º Docker API –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            api_url = f"http://{vm_ip}:{port}"
            response = requests.get(f"{api_url}/version", timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ Docker API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {port}")
                
                # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                containers_response = requests.get(f"{api_url}/containers/json")
                if containers_response.status_code == 200:
                    containers = containers_response.json()
                    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(containers)}")
                    
                    # –ò—â–µ–º –Ω–∞—à–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                    for container in containers:
                        name = container.get('Names', [''])[0].lstrip('/')
                        image = container.get('Image', '')
                        
                        if 'rgszh-miniapp' in image:
                            print(f"üîÑ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {name} ({image})")
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                            
                return True
                
        except Exception as e:
            print(f"‚ùå Docker API {port}: {e}")
    
    return False

def create_remote_update_script():
    """–°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    vm_ip = "176.108.243.189"
    
    print("üìù –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    # –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_script = """#!/bin/bash
echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd /opt/miniapp || { echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /opt/miniapp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; exit 1; }

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose down --remove-orphans

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
docker rmi -f zerotlt/rgszh-miniapp-server:latest || true
docker rmi -f zerotlt/rgszh-miniapp-client:latest || true

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
echo "‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã..."
docker pull zerotlt/rgszh-miniapp-server:latest
docker pull zerotlt/rgszh-miniapp-client:latest

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose up -d

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å:"
docker-compose ps

echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
"""
    
    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    methods = [
        ("HTTP POST", f"https://{vm_ip}/api/execute"),
        ("Webhook", f"https://{vm_ip}/webhook/script"),
        ("SSH fallback", "ssh_script"),
    ]
    
    for method_name, endpoint in methods:
        try:
            if endpoint == "ssh_script":
                print(f"üìã {method_name}: –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç...")
                with open("remote_update.sh", "w") as f:
                    f.write(update_script)
                print("‚úÖ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: remote_update.sh")
                continue
                
            print(f"üì§ {method_name}: {endpoint}")
            response = requests.post(
                endpoint,
                json={"script": update_script, "shell": "/bin/bash"},
                timeout=30,
                verify=False
            )
            
            if response.status_code in [200, 201, 202]:
                print(f"‚úÖ {method_name} —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ö†Ô∏è {method_name}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {method_name}: {e}")
    
    return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    print("üéØ –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VM...\n")
    
    # –ú–µ—Ç–æ–¥ 1: Webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if try_update_via_webhook():
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook —É—Å–ø–µ—à–Ω–æ!")
        return
    
    print("\n" + "="*50)
    
    # –ú–µ—Ç–æ–¥ 2: Docker API
    if try_docker_api_update():
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Docker API —É—Å–ø–µ—à–Ω–æ!")
        return
    
    print("\n" + "="*50)
    
    # –ú–µ—Ç–æ–¥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    if create_remote_update_script():
        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return
    
    print("\n" + "="*50)
    print("‚ùå –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
    print("\nüîß –†–£–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–†–ï–ë–£–ï–¢–°–Ø:")
    print("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VM –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("cd /opt/miniapp")
    print("docker-compose down --remove-orphans")
    print("docker pull zerotlt/rgszh-miniapp-server:latest")
    print("docker pull zerotlt/rgszh-miniapp-client:latest")
    print("docker-compose up -d")
    
    # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)...")
    time.sleep(30)
    
    print("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    try:
        response = requests.post(
            "https://176.108.243.189/api/justincase/recommend-sum",
            json={"test": "data"},
            timeout=10,
            verify=False
        )
        
        if response.status_code == 400:
            print("‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û! –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        elif response.status_code == 405:
            print("‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤—Å–µ –µ—â–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 405 - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å")
        else:
            print(f"ü§î –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

if __name__ == "__main__":
    main()
