// PollsPage.js - –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–û–ô –ö–ù–û–ü–û–ö –ò–ó MainMenu.js
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã touch –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ 
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π

import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import logoImage from './components/logo.png';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º CSS —Ñ–∞–π–ª—ã
import './Styles/containers.css';    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
import './Styles/buttons.css';       // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
import './Styles/logo.css';          // –õ–æ–≥–æ—Ç–∏–ø
import './Styles/QRStyles.css';      // QR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
import './Styles/ModalWindow.css';   // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
import './Styles/HomeButton.css';    // –ö–Ω–æ–ø–∫–∞ –¥–æ–º–æ–π

export default function PollsPage() {
  const navigate = useNavigate();
  const logoRef = useRef(null);
  const homeRef = useRef(null);

  // ===== –°–û–°–¢–û–Ø–ù–ò–Ø =====
  const [logoAnimated, setLogoAnimated] = useState(false);
  const [buttonsAnimated, setButtonsAnimated] = useState(false);
  const [homeAnimated, setHomeAnimated] = useState(false);
  const [isExiting, setIsExiting] = useState(false); // ‚Üê –í–ê–ñ–ù–û: false –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [qrData, setQrData] = useState({ open: false, path: '', label: '' });

  // ===== –î–ê–ù–ù–´–ï –û–ü–†–û–°–û–í =====
  const polls = [
    { path: '/assessment', label: '–û—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞' },
    { path: '/feedback', label: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' },
    { path: '/marza-poll', label: '–ú–∞—Ä–∂–∞ –ø—Ä–æ–¥–∞–∂' },
  ];

  // ===== –°–ë–†–û–° –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–ò –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ò (–ö–ê–ö –í MainMenu.js) =====
  useEffect(() => {
    console.log('üîÑ PollsPage: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º isExiting');
    setIsExiting(false);
  }, []);

  // ===== –ê–ù–ò–ú–ê–¶–ò–Ø –í–•–û–î–ê =====
  useEffect(() => {
    const timer1 = setTimeout(() => {
      setLogoAnimated(true);
      setHomeAnimated(true);
      if (logoRef.current) {
        logoRef.current.classList.add('animate-logo');
      }
    }, 100);
    
    const timer2 = setTimeout(() => {
      setButtonsAnimated(true);
    }, 600);
    
    return () => {
      clearTimeout(timer1);
      clearTimeout(timer2);
    };
  }, []);

  // ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–ê –ü–û –û–ü–†–û–°–£ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê) =====
  const handleClick = (path) => {
    console.log('üîò PollsPage: handleClick –≤—ã–∑–≤–∞–Ω, path:', path);
    console.log('üîò PollsPage: isExiting —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', isExiting);
    
    if (isExiting) {
      console.log('‚ùå PollsPage: –ö–ª–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - isExiting=true');
      return;
    }
    
    console.log('‚úÖ PollsPage: –ö–ª–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
    setIsExiting(true);
    
    if (logoRef.current) {
      logoRef.current.classList.add('animate-logo-exit');
    }
    
    setTimeout(() => {
      console.log('üîÑ PollsPage: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫:', path);
      navigate(path);
    }, 800);
  };

  // ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–ê –ü–û –ö–ù–û–ü–ö–ï –î–û–ú–û–ô (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê) =====
  const handleHomeClick = () => {
    console.log('üîò PollsPage: handleHomeClick –≤—ã–∑–≤–∞–Ω');
    console.log('üîò PollsPage: isExiting —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', isExiting);
    
    if (isExiting) {
      console.log('‚ùå PollsPage: –ö–ª–∏–∫ –¥–æ–º–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - isExiting=true');
      return;
    }
    
    console.log('‚úÖ PollsPage: –ö–ª–∏–∫ –¥–æ–º–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
    setIsExiting(true);
    
    if (logoRef.current) {
      logoRef.current.classList.add('animate-logo-exit');
    }
    
    setTimeout(() => {
      console.log('üîÑ PollsPage: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é');
      navigate('/main-menu');
    }, 800);
  };

  // ===== TOUCH –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–ö–ê–ö –í MainMenu.js) =====
  const handleTouchStart = (e) => {
    console.log('üëÜ PollsPage: TouchStart');
  };

  const handleTouchEnd = (e, path) => {
    console.log('üëÜ PollsPage: TouchEnd, path:', path);
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤
    handleClick(path);
  };

  const handleHomeTouchEnd = (e) => {
    console.log('üëÜ PollsPage: Home TouchEnd');
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤
    handleHomeClick();
  };

  // ===== QR –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
  const handleQrClick = (e, poll) => {
    console.log('üîò PollsPage: QR –∫–ª–∏–∫ –¥–ª—è:', poll.label);
    e.stopPropagation();
    setQrData({ open: true, path: poll.path, label: poll.label });
  };

  const closeQr = () => {
    console.log('üîò PollsPage: –ó–∞–∫—Ä—ã—Ç–∏–µ QR –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
    setQrData({ open: false, path: '', label: '' });
  };

  // ===== RIPPLE –≠–§–§–ï–ö–¢ =====
  const createRipple = (event) => {
    const button = event.currentTarget;
    const circle = document.createElement('span');
    const diameter = Math.max(button.clientWidth, button.clientHeight);
    const radius = diameter / 2;
    
    circle.style.width = circle.style.height = `${diameter}px`;
    circle.style.left = `${event.clientX - button.offsetLeft - radius}px`;
    circle.style.top = `${event.clientY - button.offsetTop - radius}px`;
    circle.classList.add('ripple');
    
    const ripple = button.getElementsByClassName('ripple')[0];
    if (ripple) {
      ripple.remove();
    }
    
    button.appendChild(circle);
  };

  // ===== –ö–õ–ê–°–°–´ –î–õ–Ø –≠–õ–ï–ú–ï–ù–¢–û–í =====
  const getContainerClasses = () => [
    'main-container',
    isExiting ? 'exiting' : ''
  ].filter(Boolean).join(' ');

  const getLogoClasses = () => [
    'logo-wrapper',
    logoAnimated ? 'animated' : '',
    isExiting ? 'exiting' : ''
  ].filter(Boolean).join(' ');

  const getButtonContainerClasses = () => [
    'button-container',
    'with-logo',
    buttonsAnimated ? 'animated' : '',
    isExiting ? 'exiting' : ''
  ].filter(Boolean).join(' ');

  const getHomeButtonClasses = () => [
    'home-button',
    'with-top-logo',  // –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø –Ω–∞–≤–µ—Ä—Ö—É
    homeAnimated ? 'animate-in' : '',
    isExiting ? 'animate-out' : ''
  ].filter(Boolean).join(' ');

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ö–õ–ê–°–°–û–í –î–õ–Ø –ö–ù–û–ü–û–ö –û–ü–†–û–°–û–í (–ö–ê–ö –í MainMenu.js)
  const getPollButtonClasses = (index) => [
    'btn-universal',
    'btn-primary',
    'btn-large',
    'btn-shadow',
    'btn-fullwidth',
    buttonsAnimated ? 'button-animated' : 'button-hidden',
    // –¢–û–õ–¨–ö–û –¥–æ–±–∞–≤–ª—è–µ–º button-exiting –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ —É–∂–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω—ã –ò –∏–¥–µ—Ç –≤—ã—Ö–æ–¥
    (buttonsAnimated && isExiting) ? 'button-exiting' : ''
  ].filter(Boolean).join(' ');

  const getQrButtonClasses = () => [
    'qr-button'  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å –∏–∑ QRStyles.css
  ].filter(Boolean).join(' ');

  // QR URL
  const qrUrl = qrData.path ? `${window.location.origin}${qrData.path}` : '';

  // ===== –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (–ö–ê–ö –í MainMenu.js) =====
  useEffect(() => {
    console.log('üîç PollsPage: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', {
      logoAnimated,
      buttonsAnimated,
      homeAnimated,
      isExiting
    });
  }, [logoAnimated, buttonsAnimated, homeAnimated, isExiting]);

  return (
    <div className={getContainerClasses()}>
      {/* ===== –õ–û–ì–û–¢–ò–ü ===== */}
      <div 
        ref={logoRef} 
        className={getLogoClasses()}
      >
        <img
          src={logoImage}
          alt="–õ–æ–≥–æ—Ç–∏–ø –†–ì–° –ñ–∏–∑–Ω—å"
          className="logo-image"
        />
      </div>

      {/* ===== –ö–ù–û–ü–ö–ê –î–û–ú–û–ô –° –ü–û–õ–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–û–ô –°–û–ë–´–¢–ò–ô ===== */}
      <button
        ref={homeRef}
        onClick={(e) => {
          console.log('üñ±Ô∏è PollsPage: Home onClick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω');
          handleHomeClick();
        }}
        onTouchStart={handleTouchStart}
        onTouchEnd={handleHomeTouchEnd}
        onPointerDown={() => console.log('üëâ PollsPage: Home PointerDown')}
        className={getHomeButtonClasses()}
        title="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        style={{
          // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –°–¢–ò–õ–ò –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ (–ö–ê–ö –í MainMenu.js)
          userSelect: 'auto',
          WebkitUserSelect: 'auto',
          pointerEvents: 'auto',
          cursor: 'pointer',
          touchAction: 'manipulation'
        }}
      >
        <svg viewBox="0 0 24 24">
          <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
        </svg>
      </button>

      {/* ===== –ö–ù–û–ü–ö–ò –û–ü–†–û–°–û–í –° –ü–û–õ–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–û–ô –°–û–ë–´–¢–ò–ô ===== */}
      <div className={getButtonContainerClasses()}>
        {polls.map((poll, index) => (
          <div key={poll.path} className={`poll-row ${buttonsAnimated ? 'animated' : ''}`}>
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ–ø—Ä–æ—Å–∞ */}
            <button
              className={getPollButtonClasses(index)}
              data-index={index}
              onClick={(e) => {
                console.log('üñ±Ô∏è PollsPage: onClick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω', poll.label);
                createRipple(e);
                handleClick(poll.path);
              }}
              onTouchStart={handleTouchStart}
              onTouchEnd={(e) => {
                e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤
                handleTouchEnd(e, poll.path);
              }}
              onPointerDown={() => console.log('üëâ PollsPage: PointerDown', poll.label)}
              style={{
                // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –°–¢–ò–õ–ò –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ (–ö–ê–ö –í MainMenu.js)
                userSelect: 'auto',
                WebkitUserSelect: 'auto',
                pointerEvents: 'auto',
                cursor: 'pointer',
                touchAction: 'manipulation'
              }}
            >
              {poll.label}
            </button>

            {/* QR –∫–Ω–æ–ø–∫–∞ */}
            <button
              onClick={(e) => handleQrClick(e, poll)}
              className={getQrButtonClasses()}
              title={`QR-–∫–æ–¥ –¥–ª—è ${poll.label}`}
              style={{
                // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –°–¢–ò–õ–ò –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                userSelect: 'auto',
                WebkitUserSelect: 'auto',
                pointerEvents: 'auto',
                cursor: 'pointer',
                touchAction: 'manipulation'
              }}
            >
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                viewBox="0 0 24 24" 
                className="qr-icon"
                fill="currentColor"
              >
                <rect x="3" y="3" width="7" height="7" />
                <rect x="14" y="3" width="7" height="7" />
                <rect x="3" y="14" width="7" height="7" />
                <rect x="5" y="5" width="3" height="3" fill="white" />
                <rect x="16" y="5" width="3" height="3" fill="white" />
                <rect x="5" y="16" width="3" height="3" fill="white" />
                <rect x="14" y="14" width="2" height="2" />
                <rect x="17" y="14" width="2" height="2" />
                <rect x="19" y="16" width="2" height="2" />
                <rect x="14" y="17" width="2" height="2" />
                <rect x="16" y="19" width="2" height="2" />
              </svg>
            </button>
          </div>
        ))}
      </div>

      {/* ===== QR –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ===== */}
      {qrData.open && (
        <div className="modal-overlay" onClick={closeQr}>
          <div className="modal-content card-container" onClick={e => e.stopPropagation()}>
            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
            <button
              onClick={closeQr}
              className="modal-close"
              aria-label="–ó–∞–∫—Ä—ã—Ç—å"
              style={{
                userSelect: 'auto',
                WebkitUserSelect: 'auto',
                pointerEvents: 'auto',
                cursor: 'pointer',
                touchAction: 'manipulation'
              }}
            >
              √ó
            </button>
            
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="modal-header">
              <h3 className="modal-title">QR-–∫–æ–¥ –¥–ª—è –æ–ø—Ä–æ—Å–∞</h3>
              <p className="modal-subtitle">¬´{qrData.label}¬ª</p>
            </div>
            
            {/* QR –∫–æ–¥ */}
            <div className="modal-qr-container">
              <img
                src={`https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrUrl)}`}
                alt="QR Code"
                className="modal-qr-image"
                loading="lazy"
              />
            </div>
            
            {/* URL */}
            <div className="modal-url">
              {qrUrl}
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <button
              onClick={(e) => {
                navigator.clipboard.writeText(qrUrl).then(() => {
                  const btn = e.target;
                  const originalText = btn.textContent;
                  const originalClass = btn.className;
                  btn.textContent = '‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                  btn.className = originalClass + ' btn-success';
                  setTimeout(() => {
                    btn.textContent = originalText;
                    btn.className = originalClass;
                  }, 2000);
                });
              }}
              className="btn-universal btn-primary btn-medium"
              style={{
                userSelect: 'auto',
                WebkitUserSelect: 'auto',
                pointerEvents: 'auto',
                cursor: 'pointer',
                touchAction: 'manipulation'
              }}
            >
              –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
            </button>
          </div>
        </div>
      )}

      {/* –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (–ö–ê–ö –í MainMenu.js) */}
      <div style={{
        position: 'fixed',
        bottom: '20px',
        left: '20px',
        background: 'black',
        color: 'yellow',
        padding: '10px',
        fontSize: '12px',
        zIndex: 9999,
        borderRadius: '4px'
      }}>
        <div>isExiting: {String(isExiting)}</div>
        <div>buttonsAnimated: {String(buttonsAnimated)}</div>
        <div>homeAnimated: {String(homeAnimated)}</div>
        <div>logoAnimated: {String(logoAnimated)}</div>
      </div>
    </div>
  );
}