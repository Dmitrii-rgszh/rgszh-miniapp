// MainApp.js - –° –¢–ï–°–¢–û–í–û–ô –ö–ù–û–ü–ö–û–ô –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
import React, { useState, useEffect } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';

// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import WelcomePage     from './WelcomePage';
import MainMenu        from './MainMenu';
import PollsPage       from './PollsPage';
import SNPPage         from './SNPPage';
import EmployeePage    from './EmployeePage';
import AssessmentPage  from './AssessmentPage';
import FeedbackPage    from './FeedbackPage';
import JustincasePage  from './JustincasePage';
import CareFuturePage  from './CareFuturePage';
import MarzaPollPage   from './MarzaPollPage';

// ===== –ò–ú–ü–û–†–¢ –¢–ï–°–¢–û–í–û–ì–û –ö–û–ú–ü–û–ù–ï–ù–¢–ê ===== 
import TestButton from './TestButton'; // ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£

// ===== –ò–ú–ü–û–†–¢ –§–û–ù–û–í–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô - –¢–û–õ–¨–ö–û WEBP =====
let backgroundImage1, backgroundImage2, backgroundImage3, backgroundImage4;

// Background 1
try {
  backgroundImage1 = require('./components/background/background1.webp');
} catch (error) {
  console.log('‚ÑπÔ∏è Background 1 not found');
  backgroundImage1 = null;
}

// Background 2
try {
  backgroundImage2 = require('./components/background/background2.webp');
} catch (error) {
  console.log('‚ÑπÔ∏è Background 2 not found');
  backgroundImage2 = null;
}

// Background 3
try {
  backgroundImage3 = require('./components/background/background3.webp');
} catch (error) {
  console.log('‚ÑπÔ∏è Background 3 not found');
  backgroundImage3 = null;
}

// Background 4
try {
  backgroundImage4 = require('./components/background/background4.webp');
} catch (error) {
  console.log('‚ÑπÔ∏è Background 4 not found');
  backgroundImage4 = null;
}

// –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–Ω–æ–≤ - —É–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
const availableBackgrounds = [
  backgroundImage1,
  backgroundImage2,
  backgroundImage3,
  backgroundImage4
].filter(Boolean);

// –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
if (availableBackgrounds.length === 0) {
  console.log('üì± No background images found, using gradient only');
  availableBackgrounds.push(null);
}

console.log(`üì∑ Loaded ${availableBackgrounds.length} background(s):`, availableBackgrounds.map((bg, i) => bg ? `Background ${i+1}: found` : `Background ${i+1}: gradient`));

// ===== ERROR BOUNDARY =====
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
  }
  
  static getDerivedStateFromError(error) {
    return { error };
  }
  
  componentDidCatch(error, errorInfo) {
    console.error('React Error Boundary:', error, errorInfo);
  }
  
  render() {
    if (this.state.error) {
      return (
        <div className="error-boundary" style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'linear-gradient(135deg, rgb(180, 0, 55) 0%, rgb(153, 0, 55) 25%, rgb(152, 164, 174) 50%, rgb(118, 143, 146) 75%, rgb(0, 40, 130) 100%)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          flexDirection: 'column',
          color: 'white',
          fontFamily: '"Segoe UI", sans-serif',
          padding: '20px',
          textAlign: 'center'
        }}>
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h2>
          <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
          <button 
            onClick={() => window.location.reload()}
            style={{
              marginTop: '20px',
              padding: '10px 20px',
              background: 'rgba(255, 255, 255, 0.2)',
              border: '1px solid rgba(255, 255, 255, 0.3)',
              borderRadius: '8px',
              color: 'white',
              cursor: 'pointer'
            }}
          >
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
        </div>
      );
    }
    return this.props.children;
  }
}

// ===== –ê–í–¢–û–ù–ê–í–ò–ì–ê–¶–ò–Ø =====
function AutoNavigator({ children }) {
  const navigate = useNavigate();
  
  useEffect(() => {
    const timer = setTimeout(() => {
      if (window.location.pathname === '/') {
        navigate('/main-menu');
      }
    }, 3000);
    
    return () => clearTimeout(timer);
  }, [navigate]);
  
  return children;
}

// ===== –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====
function MainApp() {
  // ===== –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –§–û–ù–û–í =====
  const [activeBackgroundIndex, setActiveBackgroundIndex] = useState(0);
  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);
  const [backgroundOpacities, setBackgroundOpacities] = useState(
    availableBackgrounds.map((_, index) => index === 0 ? 1 : 0)
  );
  const [imagesLoaded, setImagesLoaded] = useState(false);
  const [isTransitioning, setIsTransitioning] = useState(false);

  // ===== –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====
  useEffect(() => {
    if (availableBackgrounds.length === 0) {
      setImagesLoaded(true);
      return;
    }

    let loadedCount = 0;
    const totalImages = availableBackgrounds.length;

    const preloadImage = (imageSrc, index) => {
      if (!imageSrc) {
        // –î–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ - —Å—á–∏—Ç–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏
        loadedCount++;
        console.log(`üì∑ Background ${index + 1}: using gradient`);
        if (loadedCount === totalImages) {
          setImagesLoaded(true);
          console.log('‚úÖ All backgrounds ready');
        }
        return;
      }

      const img = new Image();
      img.onload = () => {
        loadedCount++;
        console.log(`‚úÖ Background ${index + 1}: loaded successfully`);
        if (loadedCount === totalImages) {
          setImagesLoaded(true);
          console.log('‚úÖ All backgrounds loaded');
        }
      };
      img.onerror = () => {
        loadedCount++;
        console.warn(`‚ö†Ô∏è Background ${index + 1}: failed to load, will use gradient`);
        if (loadedCount === totalImages) {
          setImagesLoaded(true);
          console.log('‚úÖ All backgrounds processed (some with errors)');
        }
      };
      img.src = imageSrc;
    };

    availableBackgrounds.forEach((imageSrc, index) => {
      preloadImage(imageSrc, index);
    });
  }, []);

  // ===== –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ê–ó–ú–ï–†–ê –û–ö–ù–ê =====
  useEffect(() => {
    const handleResize = () => {
      setViewportHeight(window.innerHeight);
    };

    const handleOrientationChange = () => {
      setTimeout(() => {
        setViewportHeight(window.innerHeight);
      }, 100);
    };

    window.addEventListener('resize', handleResize);
    window.addEventListener('orientationchange', handleOrientationChange);

    return () => {
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('orientationchange', handleOrientationChange);
    };
  }, []);

// ===== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–û–°–¢–ò –ö–ù–û–ü–û–ö =====
useEffect(() => {
  const fixAllButtons = () => {
    console.log('üîß MainApp: –ó–∞–ø—É—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫...');
    
    // –ù–∞—Ö–æ–¥–∏–º –í–°–ï –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const allButtons = document.querySelectorAll('button, [role="button"], .btn, .btn-universal, input[type="button"], input[type="submit"]');
    
    console.log(`üîß MainApp: –ù–∞–π–¥–µ–Ω–æ ${allButtons.length} –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);
    
    allButtons.forEach((button, index) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞
      if (button.dataset.globalFixed) return;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
      Object.assign(button.style, {
        userSelect: 'auto',
        WebkitUserSelect: 'auto',
        pointerEvents: 'auto',
        cursor: 'pointer',
        touchAction: 'manipulation',
        WebkitTouchCallout: 'auto',
        WebkitTapHighlightColor: 'rgba(255, 255, 255, 0.2)'
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const originalOnClick = button.onclick;
      const originalOnTouchEnd = button.ontouchend;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      const universalClickHandler = (e) => {
        console.log('üîß MainApp: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ:', button.textContent?.trim().substring(0, 20));
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (originalOnClick && typeof originalOnClick === 'function') {
          originalOnClick.call(button, e);
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å React –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö –Ω–∞–π—Ç–∏
        const reactProps = Object.keys(button).find(key => key.startsWith('__reactProps') || key.startsWith('__reactInternalInstance'));
        if (reactProps && button[reactProps]?.onClick) {
          console.log('üîß MainApp: –í—ã–∑—ã–≤–∞–µ–º React onClick');
          button[reactProps].onClick(e);
        }
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      const touchHandler = (e) => {
        console.log('üîß MainApp: Touch —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–µ:', button.textContent?.trim().substring(0, 20));
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π touch –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (originalOnTouchEnd && typeof originalOnTouchEnd === 'function') {
          originalOnTouchEnd.call(button, e);
          return; // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
        }
        
        // –ò–Ω–∞—á–µ —ç–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫
        setTimeout(() => {
          button.click();
        }, 50);
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      button.addEventListener('click', universalClickHandler, { passive: false });
      button.addEventListener('touchend', touchHandler, { passive: false });
      button.addEventListener('pointerup', universalClickHandler, { passive: false });
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
      button.dataset.globalFixed = 'true';
      
      console.log(`üîß MainApp: –ö–Ω–æ–ø–∫–∞ ${index + 1} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞: "${button.textContent?.trim().substring(0, 30)}"`);
    });
  };
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const initialTimer = setTimeout(fixAllButtons, 500);
  
  // –°–æ–∑–¥–∞–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
  const observer = new MutationObserver((mutations) => {
    let hasNewButtons = false;
    
    mutations.forEach((mutation) => {
      mutation.addedNodes.forEach((node) => {
        if (node.nodeType === 1) { // Element node
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏
          if (node.matches?.('button, [role="button"], .btn, .btn-universal, input[type="button"], input[type="submit"]')) {
            hasNewButtons = true;
          } else if (node.querySelectorAll) {
            const newButtons = node.querySelectorAll('button, [role="button"], .btn, .btn-universal, input[type="button"], input[type="submit"]');
            if (newButtons.length > 0) {
              hasNewButtons = true;
            }
          }
        }
      });
    });
    
    if (hasNewButtons) {
      console.log('üîß MainApp: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
      setTimeout(fixAllButtons, 100);
    }
  });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
  const periodicTimer = setInterval(() => {
    fixAllButtons();
  }, 5000); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  
  // Cleanup
  return () => {
    clearTimeout(initialTimer);
    clearInterval(periodicTimer);
    observer.disconnect();
  };
}, []);
  useEffect(() => {
    if (!imagesLoaded || availableBackgrounds.length <= 1) return;

    const changeTimer = setTimeout(() => {
      setIsTransitioning(true);
      
      const nextIndex = (activeBackgroundIndex + 1) % availableBackgrounds.length;
      console.log(`üîÑ Switching from background ${activeBackgroundIndex + 1} to ${nextIndex + 1}`);
      
      setBackgroundOpacities(prev => 
        prev.map((opacity, index) => 
          index === nextIndex ? 1 : index === activeBackgroundIndex ? 0 : 0
        )
      );
      
      setTimeout(() => {
        setActiveBackgroundIndex(nextIndex);
        setIsTransitioning(false);
      }, 2000);
      
    }, 15000); // 15 —Å–µ–∫—É–Ω–¥

    return () => clearTimeout(changeTimer);
  }, [imagesLoaded, activeBackgroundIndex]);

  // ===== –¢–û–õ–¨–ö–û –°–¢–ò–õ–ò –î–õ–Ø –§–û–ù–û–í (–Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö!) =====
  
  // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
  const mainContainerStyle = {
    position: 'relative',
    width: '100%',
    height: `${viewportHeight}px`,
    minHeight: '100vh',
    overflow: 'hidden',
    fontFamily: '"Segoe UI", sans-serif'
  };

  // –°—Ç–∏–ª–∏ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–ª–æ–µ–≤ - –ë–ï–ó –ê–ù–ò–ú–ê–¶–ò–ô –î–í–ò–ñ–ï–ù–ò–Ø
  const createBackgroundStyle = (backgroundSrc, index) => {
    const opacity = backgroundOpacities[index] || 0;
    
    return {
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      width: '100vw',
      height: '100vh',
      zIndex: -1, // ‚Üê –£–ü–†–û–©–ï–ù–û: –≤—Å–µ —Ñ–æ–Ω—ã –∏–º–µ—é—Ç zIndex -1
      
      // –§–æ–Ω: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
      backgroundImage: backgroundSrc 
        ? `url(${backgroundSrc})` 
        : 'linear-gradient(135deg, rgb(180, 0, 55) 0%, rgb(153, 0, 55) 25%, rgb(152, 164, 174) 50%, rgb(118, 143, 146) 75%, rgb(0, 40, 130) 100%)',
      
      backgroundSize: 'cover',
      backgroundPosition: 'center',
      backgroundRepeat: 'no-repeat',
      backgroundAttachment: 'fixed',
      
      // –¢–û–õ–¨–ö–û –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ opacity - –ë–ï–ó –î–†–£–ì–ò–• –ê–ù–ò–ú–ê–¶–ò–ô
      opacity: opacity,
      transition: isTransitioning ? 'opacity 2.0s ease-in-out' : 'none',
      
      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
      willChange: isTransitioning ? 'opacity' : 'auto',
      transform: 'translateZ(0)',
      pointerEvents: 'none' // ‚Üê –í–ê–ñ–ù–û: —Ñ–æ–Ω—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–∫–∏
    };
  };

  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
  const contentContainerStyle = {
    position: 'relative',
    zIndex: 1, // ‚Üê –£–ü–†–û–©–ï–ù–û: –ø—Ä–æ—Å—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π z-index
    width: '100%',
    height: '100%'
  };

  return (
    <ErrorBoundary>
      <div className="main-app-container" style={mainContainerStyle}>
        {/* ===== –§–û–ù–û–í–´–ï –°–õ–û–ò –ë–ï–ó –ê–ù–ò–ú–ê–¶–ò–ô –î–í–ò–ñ–ï–ù–ò–Ø ===== */}
        {availableBackgrounds.map((backgroundSrc, index) => {
          const opacity = backgroundOpacities[index] || 0;
          
          return (
            <div
              key={`background-${index}`}
              className={`background-layer ${isTransitioning ? 'transitioning' : ''} ${opacity > 0 ? 'active' : ''}`}
              style={createBackgroundStyle(backgroundSrc, index)}
            />
          );
        })}
        
        {/* ===== –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ –ë–ï–ó Router ===== */}
        <AutoNavigator>
          <div style={contentContainerStyle}>
            <Routes>
              <Route path="/" element={<WelcomePage />} />
              <Route path="/main-menu" element={<MainMenu />} />
              <Route path="/polls" element={<PollsPage />} />
              <Route path="/employee" element={<EmployeePage />} />
              <Route path="/snp" element={<SNPPage />} />
              <Route path="/assessment" element={<AssessmentPage />} />
              <Route path="/feedback" element={<FeedbackPage />} />
              <Route path="/justincase" element={<JustincasePage />} />
              <Route path="/care-future" element={<CareFuturePage />} />
              <Route path="/marza-poll" element={<MarzaPollPage />} />
              {/* Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ */}
              <Route path="*" element={<WelcomePage />} />
            </Routes>
          </div>
        </AutoNavigator>
        
        {/* ===== –¢–ï–°–¢–û–í–ê–Ø –ö–ù–û–ü–ö–ê –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===== */}
        <TestButton />
      </div>
    </ErrorBoundary>
  );
}

export default MainApp;














