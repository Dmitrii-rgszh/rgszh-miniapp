// MainApp.js - –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–û–ù–ê–ú–ò
// ‚úÖ –í—Å—è –ª–æ–≥–∏–∫–∞ —Ñ–æ–Ω–æ–≤ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
// ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞: R:180 G:0 B:55, R:152 G:164 B:174, R:0 G:40 B:130
// ‚úÖ –°–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤: Segoe UI Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, Segoe UI Regular –¥–ª—è —Ç–µ–∫—Å—Ç–∞
// ‚úÖ –ò–Ω–ª–∞–π–Ω —Å—Ç–∏–ª–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–¥—Ö–æ–¥
// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —Ñ–æ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã Safari –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –£–ª—å—Ç—Ä–∞-–ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –±–µ–∑ –±–µ–ª—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ (2.5s)
// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –≠—Ñ—Ñ–µ–∫—Ç –±–ª—é—Ä–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–æ–Ω–æ–≤ (1s) - –£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê
// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ Safe Area –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import WelcomePage     from './WelcomePage';
import MainMenu        from './MainMenu';
import PollsPage       from './PollsPage';
import SNPPage         from './SNPPage';
import EmployeePage    from './EmployeePage';
import AssessmentPage  from './AssessmentPage';
import FeedbackPage    from './FeedbackPage';
import JustincasePage  from './JustincasePage';
import CareFuturePage  from './CareFuturePage';
import MarzaPollPage   from './MarzaPollPage';

// ===== –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ –§–û–ù–û–í =====

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ background/
let backgroundImage1, backgroundImage2, backgroundImage3, defaultBackground;

// –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ–Ω–∞ (fallback)
try {
  defaultBackground = require('./components/background.png');
} catch (error) {
  console.warn('Default background not found');
  defaultBackground = null;
}

// –ò–º–ø–æ—Ä—Ç —Ñ–æ–Ω–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ background/ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
try {
  backgroundImage1 = require('./components/background/background1.png');
} catch (error) {
  try {
    backgroundImage1 = require('./components/background/background (1).png');
  } catch (error2) {
    console.warn('Background 1 not found with either name');
    backgroundImage1 = null;
  }
}

try {
  backgroundImage2 = require('./components/background/background2.png');
} catch (error) {
  try {
    backgroundImage2 = require('./components/background/background (2).png');
  } catch (error2) {
    console.warn('Background 2 not found with either name');
    backgroundImage2 = null;
  }
}

try {
  backgroundImage3 = require('./components/background/background3.png');
} catch (error) {
  try {
    backgroundImage3 = require('./components/background/background (3).png');
  } catch (error2) {
    console.warn('Background 3 not found with either name');
    backgroundImage3 = null;
  }
}

// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–Ω–æ–≤
const availableBackgrounds = [
  backgroundImage1, 
  backgroundImage2, 
  backgroundImage3, 
  defaultBackground
].filter(Boolean);

console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${availableBackgrounds.length}`);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
  }
  
  static getDerivedStateFromError(error) {
    return { error };
  }
  
  componentDidCatch(error, info) {
    console.error("ErrorBoundary caught:", error, info);
  }
  
  render() {
    if (this.state.error) {
      return (
        <div style={{
          padding: '20px',
          fontFamily: '"Segoe UI", sans-serif',
          color: 'rgb(180, 0, 55)',
          backgroundColor: 'white',
          border: '2px solid rgb(180, 0, 55)',
          borderRadius: '8px',
          margin: '20px',
          textAlign: 'center'
        }}>
          <h2 style={{ 
            fontFamily: '"Segoe UI", sans-serif',
            fontWeight: 'bold',
            color: 'rgb(180, 0, 55)' 
          }}>
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
          </h2>
          <pre style={{ 
            fontSize: '14px',
            color: 'rgb(0, 40, 130)',
            fontFamily: '"Segoe UI", sans-serif'
          }}>
            {this.state.error.toString()}
          </pre>
        </div>
      );
    }
    return this.props.children;
  }
}

function MainApp() {
  // ===== –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–ù–ê–ú–ò =====
  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);
  const [nextBackgroundIndex, setNextBackgroundIndex] = useState(1);
  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);
  const [auroraOffset, setAuroraOffset] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  
  // ===== –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ë–õ–Æ–†–ê =====
  const [currentBlur, setCurrentBlur] = useState(0);  // –ë–ª—é—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ–Ω–∞ (0px = —á–µ—Ç–∫–∏–π)
  const [nextBlur, setNextBlur] = useState(15);       // –ë–ª—é—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ–Ω–∞ (15px = —Ä–∞–∑–º—ã—Ç—ã–π)
  
  // ===== –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ò =====
  const [imagesLoaded, setImagesLoaded] = useState(false);
  const [loadedImages, setLoadedImages] = useState(new Set());
  const [loadingProgress, setLoadingProgress] = useState(0);

  // ===== –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====
  const preloadImages = () => {
    if (availableBackgrounds.length === 0) {
      setImagesLoaded(true);
      return;
    }

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    let loadedCount = 0;
    const totalImages = availableBackgrounds.length;

    availableBackgrounds.forEach((imageSrc, index) => {
      const img = new Image();
      
      img.onload = () => {
        loadedCount++;
        setLoadedImages(prev => new Set([...prev, index]));
        const progress = Math.round((loadedCount / totalImages) * 100);
        setLoadingProgress(progress);
        
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${loadedCount}/${totalImages} (${progress}%)`);
        
        if (loadedCount === totalImages) {
          console.log('–í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
          setTimeout(() => {
            setImagesLoaded(true);
          }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        }
      };
      
      img.onerror = () => {
        console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index}`);
        loadedCount++;
        const progress = Math.round((loadedCount / totalImages) * 100);
        setLoadingProgress(progress);
        
        if (loadedCount === totalImages) {
          setImagesLoaded(true);
        }
      };
      
      img.src = imageSrc;
    });
  };

  // ===== –ù–ê–ß–ê–õ–û –†–ê–ó–ú–´–¢–ò–Ø –¢–ï–ö–£–©–ï–ì–û –§–û–ù–ê (–∑–∞ 1 —Å–µ–∫—É–Ω–¥—É –¥–æ —Å–º–µ–Ω—ã) =====
  const startBlurring = () => {
    if (!imagesLoaded || availableBackgrounds.length <= 1) return;
    
    console.log(`üå´Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ–Ω–∞ –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É –¥–æ —Å–º–µ–Ω—ã`);
    
    // –ü–ª–∞–≤–Ω–æ —Ä–∞–∑–º—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–æ–Ω –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É (–£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê)
    const blurStep = 15 / 10; // 15px —Ä–∞–∑–º—ã—Ç–∏—è –∑–∞ 10 —à–∞–≥–æ–≤ (–ø–æ 100ms) = 1 —Å–µ–∫—É–Ω–¥–∞
    let currentStep = 0;
    
    const blurInterval = setInterval(() => {
      currentStep++;
      const newBlur = blurStep * currentStep;
      
      if (newBlur >= 15) {
        setCurrentBlur(15);
        clearInterval(blurInterval);
        console.log(`üå´Ô∏è –†–∞–∑–º—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${15}px`);
      } else {
        setCurrentBlur(newBlur);
      }
    }, 100); // –ö–∞–∂–¥—ã–µ 100ms
  };

  // ===== –°–ú–ï–ù–ê –§–û–ù–û–í (–∫–æ–≥–¥–∞ —Å—Ç–∞—Ä—ã–π —É–∂–µ —Ä–∞–∑–º—ã—Ç) =====
  const changeBackground = () => {
    if (!imagesLoaded || availableBackgrounds.length <= 1) return;
    
    setIsTransitioning(true);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ–Ω
    const nextIndex = (currentBackgroundIndex + 1) % availableBackgrounds.length;
    setNextBackgroundIndex(nextIndex);
    
    console.log(`üé® –ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É —Ñ–æ–Ω–∞: ${currentBackgroundIndex + 1} ‚Üí ${nextIndex + 1}`);
    
    // –ù–æ–≤—ã–π —Ñ–æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–º—ã—Ç—ã–º –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ç–∫–∏–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É (–£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê)
    setNextBlur(15); // –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º—ã—Ç–∏—è
    
    // –ü–ª–∞–≤–Ω–æ —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ —Å –Ω–æ–≤–æ–≥–æ —Ñ–æ–Ω–∞ –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
    const unblurStep = 15 / 10; // 15px —Ä–∞–∑–º—ã—Ç–∏—è –∑–∞ 10 —à–∞–≥–æ–≤ = 1 —Å–µ–∫—É–Ω–¥–∞
    let currentStep = 0;
    
    const unblurInterval = setInterval(() => {
      currentStep++;
      const newBlur = 15 - (unblurStep * currentStep);
      
      if (newBlur <= 0) {
        setNextBlur(0);
        clearInterval(unblurInterval);
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        setTimeout(() => {
          setCurrentBackgroundIndex(nextIndex);
          setIsTransitioning(false);
          setCurrentBlur(0);    // –ù–æ–≤—ã–π —Ñ–æ–Ω —á–µ—Ç–∫–∏–π
          setNextBlur(15);      // –ì–æ—Ç–æ–≤–∏–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
          console.log(`‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: —Ñ–æ–Ω ${nextIndex + 1}/${availableBackgrounds.length}`);
        }, 100);
      } else {
        setNextBlur(newBlur);
      }
    }, 100); // –ö–∞–∂–¥—ã–µ 100ms
  };

  // ===== –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–´–°–û–¢–´ =====
  const updateViewportHeight = () => {
    setViewportHeight(window.innerHeight);
  };

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ê–ó–ú–ï–†–ê –û–ö–ù–ê =====
  useEffect(() => {
    window.addEventListener('resize', updateViewportHeight);
    window.addEventListener('orientationchange', updateViewportHeight);
    
    const handleOrientationChange = () => {
      setTimeout(updateViewportHeight, 100);
    };
    
    window.addEventListener('orientationchange', handleOrientationChange);
    
    return () => {
      window.removeEventListener('resize', updateViewportHeight);
      window.removeEventListener('orientationchange', updateViewportHeight);
      window.removeEventListener('orientationchange', handleOrientationChange);
    };
  }, []);

  // ===== –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ü–†–ò –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ò =====
  useEffect(() => {
    preloadImages();
  }, []);

  // ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ú–ï–ù–ê –§–û–ù–û–í =====
  useEffect(() => {
    if (!imagesLoaded || availableBackgrounds.length <= 1) return;
    
    console.log('–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ñ–æ–Ω–æ–≤: —Ä–∞–∑–º—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 14 —Å–µ–∫, —Å–º–µ–Ω–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫');
    
    // –†–∞–∑–º—ã—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 14 —Å–µ–∫—É–Ω–¥ (–∑–∞ 1 —Å–µ–∫—É–Ω–¥—É –¥–æ —Å–º–µ–Ω—ã) - –û–ë–ù–û–í–õ–ï–ù–û
    const blurTimer = setInterval(() => {
      startBlurring();
    }, 14000); // –ò–ó–ú–ï–ù–ï–ù–û: 14 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 13
    
    // –°–º–µ–Ω–∞ —Ñ–æ–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ (–∫–æ–≥–¥–∞ —Ñ–æ–Ω —É–∂–µ —Ä–∞–∑–º—ã—Ç)
    const changeTimer = setInterval(() => {
      changeBackground();
    }, 15000);

    return () => {
      clearInterval(blurTimer);
      clearInterval(changeTimer);
    };
  }, [imagesLoaded, currentBackgroundIndex]);

  // ===== AURORA –ê–ù–ò–ú–ê–¶–ò–Ø (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å —Ñ–æ–Ω–∞–º–∏) =====
  useEffect(() => {
    if (!imagesLoaded) return;
    
    // Aurora —Ü–∏–∫–ª = 15 —Å–µ–∫—É–Ω–¥ (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ–Ω–∞)
    // 150 —à–∞–≥–æ–≤ –ø–æ 100ms = 15 —Å–µ–∫—É–Ω–¥
    const auroraInterval = setInterval(() => {
      setAuroraOffset(prev => (prev + 1) % 150); // 150 —à–∞–≥–æ–≤ –≤–º–µ—Å—Ç–æ 100
    }, 100);

    return () => clearInterval(auroraInterval);
  }, [imagesLoaded]);

  // ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–¢–ò–õ–ò –ö–û–ù–¢–ï–ô–ù–ï–†–ê + SAFE AREA =====
  const globalContainerStyle = {
    position: 'relative',
    width: '100%',
    height: `${viewportHeight}px`,
    minHeight: `${viewportHeight}px`,
    overflow: 'hidden',
    fontFamily: '"Segoe UI", sans-serif',
    
    // ‚ú® SAFE AREA: –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã
    paddingTop: 'env(safe-area-inset-top, 50px)',
    boxSizing: 'border-box',
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    '@supports (-webkit-touch-callout: none)': {
      height: '-webkit-fill-available',
      minHeight: '-webkit-fill-available'
    }
  };

  // ===== –°–¢–ò–õ–¨ –û–°–ù–û–í–ù–û–ì–û –§–û–ù–ê (—Å –±–ª—é—Ä–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ–Ω–∞) =====
  const mainBackgroundStyle = {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    zIndex: -1, // –ü–æ–¥ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    
    // –§–û–ù–û–í–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –∏–ª–∏ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô –ì–†–ê–î–ò–ï–ù–¢
    ...(availableBackgrounds.length > 0 && imagesLoaded ? {
      backgroundImage: `url(${availableBackgrounds[currentBackgroundIndex]})`,
      backgroundSize: 'cover',
      backgroundPosition: 'center',
      backgroundRepeat: 'no-repeat',
      filter: `blur(${currentBlur}px)`,  // ‚ú® –ë–ª—é—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ–Ω–∞
      transition: 'filter 1s cubic-bezier(0.4, 0.0, 0.2, 1)' // ‚ú® –£–°–ö–û–†–ï–ù–û: 1 —Å–µ–∫—É–Ω–¥–∞ –∞–Ω–∏–º–∞—Ü–∏—è –±–ª—é—Ä–∞
    } : {
      // Fallback: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
      background: `
        linear-gradient(135deg, 
          rgba(180, 0, 55, 0.95) 0%,     /* –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∞—Å–Ω—ã–π */
          rgba(153, 0, 55, 0.9) 25%,     /* –¢–µ–º–Ω–µ–µ –∫—Ä–∞—Å–Ω—ã–π */
          rgba(152, 164, 174, 0.8) 50%,  /* –°–µ—Ä—ã–π */
          rgba(118, 143, 146, 0.85) 75%, /* –¢–µ–º–Ω–µ–µ —Å–µ—Ä—ã–π */
          rgba(0, 40, 130, 0.95) 100%    /* –°–∏–Ω–∏–π */
        )
      `,
      backgroundSize: '400% 400%',
      animation: 'globalBackgroundShift 25s ease-in-out infinite'
    })
  };

  // ===== –°–¢–ò–õ–¨ –°–õ–ï–î–£–Æ–©–ï–ì–û –§–û–ù–ê (–¥–ª—è —É–ª—å—Ç—Ä–∞-–ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å –±–ª—é—Ä–æ–º) =====
  const nextBackgroundStyle = {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    backgroundImage: availableBackgrounds.length > 0 && imagesLoaded ? 
      `url(${availableBackgrounds[nextBackgroundIndex]})` : 'none',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    backgroundRepeat: 'no-repeat',
    opacity: isTransitioning ? 1 : 0,
    filter: `blur(${nextBlur}px)`,  // ‚ú® –ë–ª—é—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ–Ω–∞
    transition: 'opacity 1s cubic-bezier(0.4, 0.0, 0.2, 1), filter 1s cubic-bezier(0.4, 0.0, 0.2, 1)', // ‚ú® –£–°–ö–û–†–ï–ù–û: 1 —Å–µ–∫—É–Ω–¥–∞ –∞–Ω–∏–º–∞—Ü–∏—è
    zIndex: -1, // –ü–æ–¥ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    pointerEvents: 'none'
  };

  // ===== –ü–õ–ê–í–ù–ê–Ø AURORA –ê–ù–ò–ú–ê–¶–ò–Ø (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å —Ñ–æ–Ω–∞–º–∏) =====
  const auroraOverlayStyle = {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    background: `
      radial-gradient(circle at ${15 + (auroraOffset * 0.4)}% ${25 + (auroraOffset * 0.3)}%, 
        rgba(180, 0, 55, 0.08) 0%,     /* –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π */
        rgba(152, 164, 174, 0.05) 30%,  /* –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —Å–µ—Ä—ã–π */
        rgba(0, 40, 130, 0.08) 60%,    /* –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —Å–∏–Ω–∏–π */
        transparent 85%),
      radial-gradient(circle at ${85 - (auroraOffset * 0.3)}% ${75 - (auroraOffset * 0.2)}%, 
        rgba(153, 0, 55, 0.06) 0%,      /* –ï—â–µ –º—è–≥—á–µ –∫—Ä–∞—Å–Ω—ã–π */
        rgba(118, 143, 146, 0.04) 40%, /* –ï—â–µ –º—è–≥—á–µ —Å–µ—Ä—ã–π */
        rgba(0, 32, 104, 0.06) 70%,    /* –ï—â–µ –º—è–≥—á–µ —Å–∏–Ω–∏–π */
        transparent 90%)
    `,
    zIndex: 0, // –ù–∞–¥ —Ñ–æ–Ω–æ–º, –Ω–æ –ø–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    pointerEvents: 'none'
  };

  // ===== LOADER –°–¢–ò–õ–ò =====
  const loaderOverlayStyle = {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    background: `
      linear-gradient(135deg, 
        rgba(180, 0, 55, 0.95) 0%,
        rgba(0, 40, 130, 0.95) 100%
      )
    `,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 100, // –ù–∞–¥ –≤—Å–µ–º –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
    opacity: imagesLoaded ? 0 : 1,
    visibility: imagesLoaded ? 'hidden' : 'visible',
    transition: 'opacity 0.5s ease-out, visibility 0.5s ease-out'
  };

  const loaderTextStyle = {
    color: 'white',
    fontSize: '18px',
    fontFamily: '"Segoe UI", sans-serif',
    fontWeight: 'bold',
    marginBottom: '20px',
    textAlign: 'center'
  };

  const progressBarStyle = {
    width: '200px',
    height: '4px',
    backgroundColor: 'rgba(255, 255, 255, 0.3)',
    borderRadius: '2px',
    overflow: 'hidden',
    marginBottom: '10px'
  };

  const progressFillStyle = {
    width: `${loadingProgress}%`,
    height: '100%',
    background: `linear-gradient(90deg, 
      rgba(255, 255, 255, 0.8) 0%, 
      rgba(255, 255, 255, 1) 100%
    )`,
    transition: 'width 0.3s ease-out'
  };

  const progressTextStyle = {
    color: 'rgba(255, 255, 255, 0.8)',
    fontSize: '14px',
    fontFamily: '"Segoe UI", sans-serif'
  };

  // ===== CSS-–í-JS –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ò + SAFE AREA =====
  const keyframesStyle = `
    @keyframes globalBackgroundShift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }
    
    /* ‚ú® –ì–õ–û–ë–ê–õ–¨–ù–´–ï CSS –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø SAFE AREA */
    :root {
      --safe-area-top: env(safe-area-inset-top, 50px);
      --safe-area-bottom: env(safe-area-inset-bottom, 0px);
      --safe-area-left: env(safe-area-inset-left, 0px);
      --safe-area-right: env(safe-area-inset-right, 0px);
    }
    
    /* ‚ú® –ì–õ–û–ë–ê–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ö–õ–ê–°–°–´ –î–õ–Ø SAFE AREA */
    .safe-top { margin-top: var(--safe-area-top) !important; }
    .safe-top-padding { padding-top: var(--safe-area-top) !important; }
    .safe-bottom { margin-bottom: var(--safe-area-bottom) !important; }
    .safe-bottom-padding { padding-bottom: var(--safe-area-bottom) !important; }
    
    /* ‚ú® –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô SAFE AREA –î–õ–Ø –û–°–ù–û–í–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í */
    .logo-safe { top: 110px !important; }
    .buttons-safe { top: 300px !important; }
    .title-safe { top: 260px !important; }
    
    /* ‚ú® –ê–ù–ò–ú–ê–¶–ò–ò –° SAFE AREA */
    @keyframes piFloatAroundSafe {
      0% { transform: translate(20px, 20px); }
      25% { transform: translate(calc(100vw - 60px), 30px); }
      50% { transform: translate(calc(100vw - 50px), calc(100vh - 70px - var(--safe-area-bottom))); }
      75% { transform: translate(30px, calc(100vh - 60px - var(--safe-area-bottom))); }
      100% { transform: translate(20px, 20px); }
    }
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ head, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
  useEffect(() => {
    const styleId = 'global-background-animation';
    if (!document.getElementById(styleId)) {
      const style = document.createElement('style');
      style.id = styleId;
      style.textContent = keyframesStyle;
      document.head.appendChild(style);
    }
  }, []);

  return (
    <ErrorBoundary>
      <div style={globalContainerStyle}>
        {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω (—Å –±–ª—é—Ä–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ–Ω–∞) */}
        <div style={mainBackgroundStyle} />
        
        {/* –°–ª–µ–¥—É—é—â–∏–π —Ñ–æ–Ω –¥–ª—è —É–ª—å—Ç—Ä–∞-–ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å –±–ª—é—Ä–æ–º */}
        {availableBackgrounds.length > 1 && imagesLoaded && (
          <div style={nextBackgroundStyle} />
        )}
        
        {/* –ü–ª–∞–≤–Ω–∞—è Aurora –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞ */}
        <div style={auroraOverlayStyle} />
        
        {/* Loader –≤–æ –≤—Ä–µ–º—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ */}
        <div style={loaderOverlayStyle}>
          <div style={loaderTextStyle}>
            –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...
          </div>
          <div style={progressBarStyle}>
            <div style={progressFillStyle} />
          </div>
          <div style={progressTextStyle}>
            {loadingProgress}%
          </div>
        </div>
        
        {/* –†–æ—É—Ç–µ—Ä —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ */}
        <Router>
          <Routes>
            <Route path="/"           element={<WelcomePage />} />
            <Route path="/main-menu"  element={<MainMenu />} />
            <Route path="/polls"      element={<PollsPage />} />
            <Route path="/snp"        element={<SNPPage />} />
            <Route path="/employee"   element={<EmployeePage />} />
            <Route path="/assessment" element={<AssessmentPage />} />
            <Route path="/feedback"   element={<FeedbackPage />} />
            <Route path="/justincase" element={<JustincasePage />} />
            <Route path="/carefuture" element={<CareFuturePage />} />
            <Route path="/marzapoll"  element={<MarzaPollPage />} />
          </Routes>
        </Router>
      </div>
    </ErrorBoundary>
  );
}

export default MainApp;














