// MainApp.js - –°–ò–°–¢–ï–ú–ê –§–û–ù–û–í –° –î–í–ò–ñ–ï–ù–ò–ï–ú
// ‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª: background1 ‚Üí background2 ‚Üí background3 ‚Üí background1...
// ‚úÖ –ü–ª–∞–≤–Ω–æ–µ —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏–µ (crossfade) + –¥–≤–∏–∂–µ–Ω–∏–µ —Ñ–æ–Ω–∞
// ‚úÖ –ö–∞–∂–¥—ã–π —Ñ–æ–Ω –∏–º–µ–µ—Ç —Å–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π div —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
// ‚úÖ –ü–ª–∞–≤–Ω–æ–µ –∫—Ä—É–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤
// ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –Ω–∞ 130% –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—É—Å—Ç–æ—Ç
// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —Ñ–æ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import WelcomePage     from './WelcomePage';
import MainMenu        from './MainMenu';
import PollsPage       from './PollsPage';
import SNPPage         from './SNPPage';
import EmployeePage    from './EmployeePage';
import AssessmentPage  from './AssessmentPage';
import FeedbackPage    from './FeedbackPage';
import JustincasePage  from './JustincasePage';
import CareFuturePage  from './CareFuturePage';
import MarzaPollPage   from './MarzaPollPage';

// ===== –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ –§–û–ù–û–í =====

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ background/
let backgroundImage1, backgroundImage2, backgroundImage3, defaultBackground;

// –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ–Ω–∞ (fallback)
try {
  defaultBackground = require('./components/background.png');
} catch (error) {
  console.warn('Default background not found');
  defaultBackground = null;
}

// –ò–º–ø–æ—Ä—Ç —Ñ–æ–Ω–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ background/ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
try {
  backgroundImage1 = require('./components/background/background1.png');
} catch (error) {
  try {
    backgroundImage1 = require('./components/background/background (1).png');
  } catch (error2) {
    console.warn('Background 1 not found with either name');
    backgroundImage1 = null;
  }
}

try {
  backgroundImage2 = require('./components/background/background2.png');
} catch (error) {
  try {
    backgroundImage2 = require('./components/background/background (2).png');
  } catch (error2) {
    console.warn('Background 2 not found with either name');
    backgroundImage2 = null;
  }
}

try {
  backgroundImage3 = require('./components/background/background3.png');
} catch (error) {
  try {
    backgroundImage3 = require('./components/background/background (3).png');
  } catch (error2) {
    console.warn('Background 3 not found with either name');
    backgroundImage3 = null;
  }
}

// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–Ω–æ–≤
const availableBackgrounds = [
  backgroundImage1, 
  backgroundImage2, 
  backgroundImage3, 
  defaultBackground
].filter(Boolean);

console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${availableBackgrounds.length}`);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
  }
  
  static getDerivedStateFromError(error) {
    return { error };
  }
  
  componentDidCatch(error, info) {
    console.error("ErrorBoundary caught:", error, info);
  }
  
  render() {
    if (this.state.error) {
      return (
        <div style={{
          padding: '20px',
          fontFamily: '"Segoe UI", sans-serif',
          color: 'rgb(180, 0, 55)',
          backgroundColor: 'white',
          border: '2px solid rgb(180, 0, 55)',
          borderRadius: '8px',
          margin: '20px',
          textAlign: 'center'
        }}>
          <h2 style={{ 
            fontFamily: '"Segoe UI", sans-serif',
            fontWeight: 'bold',
            color: 'rgb(180, 0, 55)' 
          }}>
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
          </h2>
          <pre style={{ 
            fontSize: '14px',
            color: 'rgb(0, 40, 130)',
            fontFamily: '"Segoe UI", sans-serif'
          }}>
            {this.state.error.toString()}
          </pre>
        </div>
      );
    }
    return this.props.children;
  }
}

function MainApp() {
  // ===== –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–ù–ê–ú–ò =====
  const [activeBackgroundIndex, setActiveBackgroundIndex] = useState(0);
  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);
  const [isTransitioning, setIsTransitioning] = useState(false);
  
  // ===== –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ü–õ–ê–í–ù–´–• –ü–ï–†–ï–•–û–î–û–í =====
  // –ú–∞—Å—Å–∏–≤ opacity –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ–Ω–∞
  const [backgroundOpacities, setBackgroundOpacities] = useState(
    availableBackgrounds.map((_, index) => index === 0 ? 1 : 0)
  );
  
  // ===== –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ò =====
  const [imagesLoaded, setImagesLoaded] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState(0);

  // ===== –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====
  const preloadImages = () => {
    if (availableBackgrounds.length === 0) {
      setImagesLoaded(true);
      return;
    }

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    let loadedCount = 0;
    const totalImages = availableBackgrounds.length;

    availableBackgrounds.forEach((imageSrc, index) => {
      const img = new Image();
      
      img.onload = () => {
        loadedCount++;
        const progress = Math.round((loadedCount / totalImages) * 100);
        setLoadingProgress(progress);
        
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}/${totalImages} (${progress}%)`);
        
        if (loadedCount === totalImages) {
          console.log('–í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
          setTimeout(() => {
            setImagesLoaded(true);
          }, 500);
        }
      };
      
      img.onerror = () => {
        console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index}`);
        loadedCount++;
        const progress = Math.round((loadedCount / totalImages) * 100);
        setLoadingProgress(progress);
        
        if (loadedCount === totalImages) {
          setImagesLoaded(true);
        }
      };
      
      img.src = imageSrc;
    });
  };

  // ===== –ü–†–û–°–¢–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–õ–ï–î–£–Æ–©–ï–ì–û –ò–ù–î–ï–ö–°–ê =====
  const getNextBackgroundIndex = (currentIndex) => {
    if (availableBackgrounds.length === 0) return 0;
    return (currentIndex + 1) % availableBackgrounds.length;
  };

  // ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–•–û–î–ê =====
  const startTransition = () => {
    if (!imagesLoaded || isTransitioning || availableBackgrounds.length < 2) {
      return;
    }
    
    const nextIndex = getNextBackgroundIndex(activeBackgroundIndex);
    console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥: —Ñ–æ–Ω ${activeBackgroundIndex + 1} ‚Üí ${nextIndex + 1}`);
    
    setIsTransitioning(true);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
    executeCrossfade(activeBackgroundIndex, nextIndex);
  };

  // ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø CROSSFADE =====
  const executeCrossfade = (fromIndex, toIndex) => {
    const duration = 5000; // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥
    const steps = 200; // 200 —à–∞–≥–æ–≤ = 25ms –Ω–∞ —à–∞–≥
    
    let step = 0;
    const fadeInterval = setInterval(() => {
      step++;
      const progress = step / steps;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ease-in-out —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      const easeProgress = 0.5 * (1 + Math.sin(Math.PI * (progress - 0.5)));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ opacity
      setBackgroundOpacities(opacities => {
        const newOpacities = [...opacities];
        newOpacities[fromIndex] = Math.max(0, Math.min(1, 1 - (easeProgress * 0.8))); // –û—Å—Ç–∞–≤–ª—è–µ–º 20% –≤–∏–¥–∏–º–æ—Å—Ç–∏
        newOpacities[toIndex] = Math.max(0, Math.min(1, easeProgress));
        return newOpacities;
      });
      
      if (step >= steps) {
        clearInterval(fadeInterval);
        finalizeTransition(toIndex);
      }
    }, 25);
  };

  // ===== –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–•–û–î–ê =====
  const finalizeTransition = (newActiveIndex) => {
    console.log(`‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: –∞–∫—Ç–∏–≤–µ–Ω —Ñ–æ–Ω ${newActiveIndex + 1}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    setActiveBackgroundIndex(newActiveIndex);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è opacity
    setBackgroundOpacities(opacities => {
      const newOpacities = opacities.map((_, index) => index === newActiveIndex ? 1 : 0);
      return newOpacities;
    });
    
    setIsTransitioning(false);
  };

  // ===== –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–´–°–û–¢–´ =====
  const updateViewportHeight = () => {
    setViewportHeight(window.innerHeight);
  };

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ê–ó–ú–ï–†–ê –û–ö–ù–ê =====
  useEffect(() => {
    window.addEventListener('resize', updateViewportHeight);
    window.addEventListener('orientationchange', updateViewportHeight);
    
    const handleOrientationChange = () => {
      setTimeout(updateViewportHeight, 100);
    };
    
    window.addEventListener('orientationchange', handleOrientationChange);
    
    return () => {
      window.removeEventListener('resize', updateViewportHeight);
      window.removeEventListener('orientationchange', updateViewportHeight);
      window.removeEventListener('orientationchange', handleOrientationChange);
    };
  }, []);

  // ===== –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ü–†–ò –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ò =====
  useEffect(() => {
    preloadImages();
  }, []);

  // ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ú–ï–ù–ê –§–û–ù–û–í –ö–ê–ñ–î–´–ï 15 –°–ï–ö–£–ù–î =====
  useEffect(() => {
    if (!imagesLoaded || availableBackgrounds.length <= 1) return;
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω—ã —Ñ–æ–Ω–æ–≤: –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥');
    
    const repeatTimer = setInterval(() => {
      startTransition();
    }, 15000);

    return () => {
      clearInterval(repeatTimer);
    };
  }, [imagesLoaded, activeBackgroundIndex]);

  // ===== CSS KEYFRAMES –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ô =====
  const animationStyles = `
    @keyframes moveBackground0 {
      0% { transform: translate(-5%, 5%); }
      25% { transform: translate(5%, 5%); }
      50% { transform: translate(5%, -5%); }
      75% { transform: translate(-5%, -5%); }
      100% { transform: translate(-5%, 5%); }
    }
    
    @keyframes moveBackground1 {
      0% { transform: translate(5%, -5%); }
      25% { transform: translate(5%, 5%); }
      50% { transform: translate(-5%, 5%); }
      75% { transform: translate(-5%, -5%); }
      100% { transform: translate(5%, -5%); }
    }
    
    @keyframes moveBackground2 {
      0% { transform: translate(-5%, -5%); }
      25% { transform: translate(-5%, 5%); }
      50% { transform: translate(5%, 5%); }
      75% { transform: translate(5%, -5%); }
      100% { transform: translate(-5%, -5%); }
    }
    
    @keyframes moveBackground3 {
      0% { transform: translate(5%, 5%); }
      25% { transform: translate(-5%, 5%); }
      50% { transform: translate(-5%, -5%); }
      75% { transform: translate(5%, -5%); }
      100% { transform: translate(5%, 5%); }
    }
    
    /* ‚ú® –ì–õ–û–ë–ê–õ–¨–ù–´–ï CSS –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø SAFE AREA */
    :root {
      --safe-area-top: env(safe-area-inset-top, 50px);
      --safe-area-bottom: env(safe-area-inset-bottom, 0px);
      --safe-area-left: env(safe-area-inset-left, 0px);
      --safe-area-right: env(safe-area-inset-right, 0px);
    }
    
    /* ‚ú® –ì–õ–û–ë–ê–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ö–õ–ê–°–°–´ –î–õ–Ø SAFE AREA */
    .safe-top { margin-top: var(--safe-area-top) !important; }
    .safe-top-padding { padding-top: var(--safe-area-top) !important; }
    .safe-bottom { margin-bottom: var(--safe-area-bottom) !important; }
    .safe-bottom-padding { padding-bottom: var(--safe-area-bottom) !important; }
    
    /* ‚ú® –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô SAFE AREA –î–õ–Ø –û–°–ù–û–í–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í */
    .logo-safe { top: 110px !important; }
    .buttons-safe { top: 300px !important; }
    .title-safe { top: 260px !important; }
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head
  useEffect(() => {
    const styleId = 'animation-styles';
    if (!document.getElementById(styleId)) {
      const style = document.createElement('style');
      style.id = styleId;
      style.textContent = animationStyles;
      document.head.appendChild(style);
    }
  }, []);

  // ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–¢–ò–õ–ò –ö–û–ù–¢–ï–ô–ù–ï–†–ê =====
  const globalContainerStyle = {
    position: 'relative',
    width: '100%',
    height: `${viewportHeight}px`,
    minHeight: `${viewportHeight}px`,
    overflow: 'hidden',
    fontFamily: '"Segoe UI", sans-serif',
    
    // ‚ú® –ü–û–°–¢–û–Ø–ù–ù–´–ô –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô –§–û–ù
    background: `
      linear-gradient(135deg, 
        rgba(180, 0, 55, 0.95) 0%,
        rgba(153, 0, 55, 0.9) 25%,
        rgba(152, 164, 174, 0.8) 50%,
        rgba(118, 143, 146, 0.85) 75%,
        rgba(0, 40, 130, 0.95) 100%
      )
    `,
    
    // ‚ú® SAFE AREA: –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã
    paddingTop: 'env(safe-area-inset-top, 50px)',
    boxSizing: 'border-box',
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    '@supports (-webkit-touch-callout: none)': {
      height: '-webkit-fill-available',
      minHeight: '-webkit-fill-available'
    }
  };

  // ===== –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –°–¢–ò–õ–Ø –î–õ–Ø –ö–ê–ñ–î–û–ì–û –§–û–ù–ê =====
  const createBackgroundStyle = (backgroundImage, index) => ({
    position: 'absolute',
    top: '-15%',
    left: '-15%',
    width: '130%',
    height: '130%',
    backgroundImage: `url(${backgroundImage})`,
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    backgroundRepeat: 'no-repeat',
    opacity: backgroundOpacities[index] || 0,
    filter: `brightness(${0.7 + (backgroundOpacities[index] || 0) * 0.3})`,
    animation: `moveBackground${index} ${40 + index * 5}s ease-in-out infinite`,
    transition: 'opacity 0.025s linear',
    pointerEvents: 'none',
    zIndex: backgroundOpacities[index] > 0 ? 2 : 1
  });

  // ===== LOADER –°–¢–ò–õ–ò =====
  const loaderOverlayStyle = {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    background: `
      linear-gradient(135deg, 
        rgba(180, 0, 55, 0.95) 0%,
        rgba(0, 40, 130, 0.95) 100%
      )
    `,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
    opacity: imagesLoaded ? 0 : 1,
    visibility: imagesLoaded ? 'hidden' : 'visible',
    transition: 'opacity 1s ease-out, visibility 1s ease-out'
  };

  const loaderTextStyle = {
    color: 'white',
    fontSize: '18px',
    fontFamily: '"Segoe UI", sans-serif',
    fontWeight: 'bold',
    marginBottom: '20px',
    textAlign: 'center'
  };

  const progressBarStyle = {
    width: '200px',
    height: '4px',
    backgroundColor: 'rgba(255, 255, 255, 0.3)',
    borderRadius: '2px',
    overflow: 'hidden',
    marginBottom: '10px'
  };

  const progressFillStyle = {
    width: `${loadingProgress}%`,
    height: '100%',
    background: `linear-gradient(90deg, 
      rgba(255, 255, 255, 0.8) 0%, 
      rgba(255, 255, 255, 1) 100%
    )`,
    transition: 'width 0.5s ease-out'
  };

  const progressTextStyle = {
    color: 'rgba(255, 255, 255, 0.8)',
    fontSize: '14px',
    fontFamily: '"Segoe UI", sans-serif'
  };

  return (
    <ErrorBoundary>
      <div style={globalContainerStyle}>
        {/* –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π div –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ–Ω–∞ */}
        {imagesLoaded && availableBackgrounds.map((background, index) => (
          <div
            key={index}
            style={createBackgroundStyle(background, index)}
          />
        ))}
        
        {/* Loader –≤–æ –≤—Ä–µ–º—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ */}
        <div style={loaderOverlayStyle}>
          <div style={loaderTextStyle}>
            –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...
          </div>
          <div style={progressBarStyle}>
            <div style={progressFillStyle} />
          </div>
          <div style={progressTextStyle}>
            {loadingProgress}%
          </div>
        </div>
        
        {/* –†–æ—É—Ç–µ—Ä —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ */}
        <Router>
          <Routes>
            <Route path="/"           element={<WelcomePage />} />
            <Route path="/main-menu"  element={<MainMenu />} />
            <Route path="/polls"      element={<PollsPage />} />
            <Route path="/snp"        element={<SNPPage />} />
            <Route path="/employee"   element={<EmployeePage />} />
            <Route path="/assessment" element={<AssessmentPage />} />
            <Route path="/feedback"   element={<FeedbackPage />} />
            <Route path="/justincase" element={<JustincasePage />} />
            <Route path="/carefuture" element={<CareFuturePage />} />
            <Route path="/marzapoll"  element={<MarzaPollPage />} />
          </Routes>
        </Router>
      </div>
    </ErrorBoundary>
  );
}

export default MainApp;














