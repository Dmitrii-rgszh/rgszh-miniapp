// MainApp.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// ‚úÖ –§–æ–Ω—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–±–µ–∑ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ MainMenu —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã warnings –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ —Å—Ç–∏–ª–µ–π

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';

// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import WelcomePage     from './WelcomePage';
import MainMenu        from './MainMenu';
import PollsPage       from './PollsPage';
import SNPPage         from './SNPPage';
import EmployeePage    from './EmployeePage';
import AssessmentPage  from './AssessmentPage';
import FeedbackPage    from './FeedbackPage';
import JustincasePage  from './JustincasePage';
import CareFuturePage  from './CareFuturePage';
import MarzaPollPage   from './MarzaPollPage';

// ===== –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ –§–û–ù–û–í =====

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ background/
let backgroundImage1, backgroundImage2, backgroundImage3, backgroundImage4, defaultBackground;

// –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ–Ω–∞ (fallback)
try {
  defaultBackground = require('./components/background.png');
} catch (error) {
  console.warn('Default background not found');
  defaultBackground = null;
}

// –ò–º–ø–æ—Ä—Ç —Ñ–æ–Ω–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ background/ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
try {
  backgroundImage1 = require('./components/background/background1.png');
} catch (error) {
  try {
    backgroundImage1 = require('./components/background/background (1).png');
  } catch (error2) {
    console.warn('Background 1 not found with either name');
    backgroundImage1 = null;
  }
}

try {
  backgroundImage2 = require('./components/background/background2.png');
} catch (error) {
  try {
    backgroundImage2 = require('./components/background/background (2).png');
  } catch (error2) {
    console.warn('Background 2 not found with either name');
    backgroundImage2 = null;
  }
}

try {
  backgroundImage3 = require('./components/background/background3.png');
} catch (error) {
  try {
    backgroundImage3 = require('./components/background/background (3).png');
  } catch (error2) {
    console.warn('Background 3 not found with either name');
    backgroundImage3 = null;
  }
}

try {
  backgroundImage4 = require('./components/background/background4.png');
} catch (error) {
  try {
    backgroundImage4 = require('./components/background/background (4).png');
  } catch (error2) {
    console.warn('Background 4 not found with either name');
    backgroundImage4 = null;
  }
}

// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–Ω–æ–≤
const availableBackgrounds = [
  backgroundImage1, 
  backgroundImage2, 
  backgroundImage3,
  backgroundImage4
].filter(Boolean);

// –î–æ–±–∞–≤–ª—è–µ–º defaultBackground —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ–Ω–æ–≤ –Ω–µ—Ç
if (availableBackgrounds.length === 0 && defaultBackground) {
  availableBackgrounds.push(defaultBackground);
}

// ‚úÖ –ù–û–í–û–ï: –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º null –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
if (availableBackgrounds.length === 0) {
  availableBackgrounds.push(null); // null –ø–æ–∫–∞–∂–µ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –∏–∑ createBackgroundStyle
  console.log('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω');
}

console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${availableBackgrounds.length}`);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
  }
  
  static getDerivedStateFromError(error) {
    return { error };
  }
  
  componentDidCatch(error, info) {
    console.error("ErrorBoundary caught:", error, info);
  }
  
  render() {
    if (this.state.error) {
      return (
        <div style={{
          padding: '20px',
          fontFamily: '"Segoe UI", sans-serif',
          color: 'rgb(180, 0, 55)',
          backgroundColor: 'white',
          border: '2px solid rgb(180, 0, 55)',
          borderRadius: '8px',
          margin: '20px',
          textAlign: 'center'
        }}>
          <h2 style={{ 
            fontFamily: '"Segoe UI", sans-serif',
            fontWeight: 'bold',
            color: 'rgb(180, 0, 55)' 
          }}>
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
          </h2>
          <pre style={{ 
            fontSize: '14px',
            color: 'rgb(0, 40, 130)',
            fontFamily: '"Segoe UI", sans-serif'
          }}>
            {this.state.error.toString()}
          </pre>
        </div>
      );
    }
    return this.props.children;
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
function AutoNavigator({ children }) {
  const navigate = useNavigate();
  
  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ MainMenu —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    const timer = setTimeout(() => {
      if (window.location.pathname === '/') {
        navigate('/main-menu');
      }
    }, 3000);
    
    return () => clearTimeout(timer);
  }, [navigate]);
  
  return children;
}

function MainApp() {
  // ===== –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–ù–ê–ú–ò =====
  const [activeBackgroundIndex, setActiveBackgroundIndex] = useState(0);
  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);
  const [isTransitioning, setIsTransitioning] = useState(false);
  
  // ===== –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ü–õ–ê–í–ù–´–• –ü–ï–†–ï–•–û–î–û–í =====
  // –ú–∞—Å—Å–∏–≤ opacity –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ–Ω–∞
  const [backgroundOpacities, setBackgroundOpacities] = useState(
    availableBackgrounds.map((_, index) => index === 0 ? 1 : 0)
  );
  
  // ===== –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ò =====
  const [imagesLoaded, setImagesLoaded] = useState(false);

  // ===== –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–±–µ–∑ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞) =====
  useEffect(() => {
    if (availableBackgrounds.length === 0) {
      setImagesLoaded(true);
      return;
    }

    console.log('–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    let loadedCount = 0;
    const totalImages = availableBackgrounds.length;

    availableBackgrounds.forEach((imageSrc, index) => {
      const img = new Image();
      
      img.onload = () => {
        loadedCount++;
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}/${totalImages}`);
        
        if (loadedCount === totalImages) {
          console.log('–í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
          setImagesLoaded(true);
        }
      };
      
      img.onerror = () => {
        console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index}`);
        loadedCount++;
        
        if (loadedCount === totalImages) {
          setImagesLoaded(true);
        }
      };
      
      img.src = imageSrc;
    });
  }, []);

  // ===== –ü–†–û–°–¢–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–õ–ï–î–£–Æ–©–ï–ì–û –ò–ù–î–ï–ö–°–ê =====
  const getNextBackgroundIndex = (currentIndex) => {
    if (availableBackgrounds.length === 0) return 0;
    return (currentIndex + 1) % availableBackgrounds.length;
  };

  // ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–•–û–î–ê =====
  const startTransition = () => {
    if (!imagesLoaded || isTransitioning || availableBackgrounds.length < 2) {
      return;
    }
    
    const nextIndex = getNextBackgroundIndex(activeBackgroundIndex);
    console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥: —Ñ–æ–Ω ${activeBackgroundIndex + 1} ‚Üí ${nextIndex + 1}`);
    
    setIsTransitioning(true);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º Aurora —ç—Ñ—Ñ–µ–∫—Ç–æ–º
    executeCrossfadeWithAurora(activeBackgroundIndex, nextIndex);
  };

  // ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø CROSSFADE –° AURORA –≠–§–§–ï–ö–¢–û–ú =====
  const executeCrossfadeWithAurora = (fromIndex, toIndex) => {
    const duration = 10000; // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–ª–∞–≤–Ω–æ–≥–æ Aurora —ç—Ñ—Ñ–µ–∫—Ç–∞
    const steps = 400; // –ï—â–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    
    let step = 0;
    const fadeInterval = setInterval(() => {
      step++;
      const progress = step / steps;
      
      // –°–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Aurora —ç—Ñ—Ñ–µ–∫—Ç–∞
      const easeProgress = progress < 0.5
        ? 2 * progress * progress
        : 1 - Math.pow(-2 * progress + 2, 2) / 2;
      
      // –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ –≤–æ–ª–Ω—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–µ–≤–µ—Ä–Ω–æ–≥–æ —Å–∏—è–Ω–∏—è
      const auroraWave1 = Math.sin(progress * Math.PI * 3) * 0.15 + 0.85;
      const auroraWave2 = Math.cos(progress * Math.PI * 2) * 0.1 + 0.9;
      const auroraWave3 = Math.sin(progress * Math.PI * 4) * 0.05 + 0.95;
      
      // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Aurora –≤–æ–ª–Ω–∞
      const combinedAurora = (auroraWave1 + auroraWave2 + auroraWave3) / 3;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ opacity —Å Aurora —ç—Ñ—Ñ–µ–∫—Ç–æ–º
      setBackgroundOpacities(opacities => {
        const newOpacities = [...opacities];
        
        // –£—Ö–æ–¥—è—â–∏–π —Ñ–æ–Ω —Å –≤–æ–ª–Ω–æ–≤—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
        newOpacities[fromIndex] = Math.max(0, Math.min(1, 
          (1 - easeProgress) * combinedAurora * 0.95
        ));
        
        // –ü–æ—è–≤–ª—è—é—â–∏–π—Å—è —Ñ–æ–Ω —Å Aurora —Å–≤–µ—á–µ–Ω–∏–µ–º
        newOpacities[toIndex] = Math.max(0, Math.min(1, 
          easeProgress * (0.7 + combinedAurora * 0.3)
        ));
        
        return newOpacities;
      });
      
      if (step >= steps) {
        clearInterval(fadeInterval);
        finalizeTransition(toIndex);
      }
    }, 25);
  };

  // ===== –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–•–û–î–ê =====
  const finalizeTransition = (newActiveIndex) => {
    console.log(`‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: –∞–∫—Ç–∏–≤–µ–Ω —Ñ–æ–Ω ${newActiveIndex + 1}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    setActiveBackgroundIndex(newActiveIndex);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è opacity
    setBackgroundOpacities(opacities => {
      const newOpacities = opacities.map((_, index) => index === newActiveIndex ? 1 : 0);
      return newOpacities;
    });
    
    setIsTransitioning(false);
  };

  // ===== –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–´–°–û–¢–´ =====
  const updateViewportHeight = () => {
    setViewportHeight(window.innerHeight);
  };

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ê–ó–ú–ï–†–ê –û–ö–ù–ê =====
  useEffect(() => {
    window.addEventListener('resize', updateViewportHeight);
    window.addEventListener('orientationchange', updateViewportHeight);
    
    const handleOrientationChange = () => {
      setTimeout(updateViewportHeight, 100);
    };
    
    window.addEventListener('orientationchange', handleOrientationChange);
    
    return () => {
      window.removeEventListener('resize', updateViewportHeight);
      window.removeEventListener('orientationchange', updateViewportHeight);
      window.removeEventListener('orientationchange', handleOrientationChange);
    };
  }, []);

  // ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ú–ï–ù–ê –§–û–ù–û–í –ö–ê–ñ–î–´–ï 15 –°–ï–ö–£–ù–î =====
  useEffect(() => {
    if (!imagesLoaded || availableBackgrounds.length <= 1) return;
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω—ã —Ñ–æ–Ω–æ–≤: –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥');
    
    const repeatTimer = setInterval(() => {
      startTransition();
    }, 15000);

    return () => {
      clearInterval(repeatTimer);
    };
  }, [imagesLoaded, activeBackgroundIndex]);

  // ===== CSS –°–¢–ò–õ–ò –ë–ï–ó –ê–ù–ò–ú–ê–¶–ò–ò –î–í–ò–ñ–ï–ù–ò–Ø =====
  const staticStyles = `
    /* ‚ú® –ì–õ–û–ë–ê–õ–¨–ù–´–ï CSS –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø SAFE AREA */
    :root {
      --safe-area-top: env(safe-area-inset-top, 50px);
      --safe-area-bottom: env(safe-area-inset-bottom, 0px);
      --safe-area-left: env(safe-area-inset-left, 0px);
      --safe-area-right: env(safe-area-inset-right, 0px);
    }
    
    /* ‚ú® –ì–õ–û–ë–ê–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ö–õ–ê–°–°–´ –î–õ–Ø SAFE AREA */
    .safe-top { margin-top: var(--safe-area-top) !important; }
    .safe-top-padding { padding-top: var(--safe-area-top) !important; }
    .safe-bottom { margin-bottom: var(--safe-area-bottom) !important; }
    .safe-bottom-padding { padding-bottom: var(--safe-area-bottom) !important; }
    
    /* ‚ú® –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô SAFE AREA –î–õ–Ø –û–°–ù–û–í–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í */
    .logo-safe { top: 110px !important; }
    .buttons-safe { top: 300px !important; }
    .title-safe { top: 260px !important; }
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head
  useEffect(() => {
    const styleId = 'static-styles';
    if (!document.getElementById(styleId)) {
      const style = document.createElement('style');
      style.id = styleId;
      style.textContent = staticStyles;
      document.head.appendChild(style);
    }
  }, []);

  // ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–¢–ò–õ–ò –ö–û–ù–¢–ï–ô–ù–ï–†–ê =====
  // ===== –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–® globalContainerStyle –ù–ê –≠–¢–û: =====

  const globalContainerStyle = {
    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: fixed –≤–º–µ—Å—Ç–æ relative –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞
    position: 'fixed',
    top: 0,
    left: 0,
  
    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º viewport units –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    width: '100vw',
    height: '100vh',
    minHeight: '100vh',
  
    overflow: 'hidden',
    fontFamily: '"Segoe UI", sans-serif',
  
    // ‚ùå –£–ë–†–ê–ù–û: —Ñ–æ–Ω –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ createBackgroundStyle
    // backgroundColor: 'rgba(180, 0, 55, 0.95)', // ‚Üê –£–î–ê–õ–ò–¢–¨
    // backgroundImage: `...`, // ‚Üê –£–î–ê–õ–ò–¢–¨
  
    // ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: Safe Area –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ö–û–ù–¢–ï–ù–¢–ê (–ù–ï –¥–ª—è —Ñ–æ–Ω–∞)
    paddingTop: 'env(safe-area-inset-top, 50px)',
    paddingBottom: 'env(safe-area-inset-bottom, 0px)',
    paddingLeft: 'env(safe-area-inset-left, 0px)',
    paddingRight: 'env(safe-area-inset-right, 0px)',
  
    boxSizing: 'border-box',
  
    // ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –º–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
    '@supports (-webkit-touch-callout: none)': {
      height: '100vh', // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º vh –≤–º–µ—Å—Ç–æ -webkit-fill-available
      minHeight: '100vh'
    }
  };

  // ===== –°–¢–ò–õ–¨ –î–õ–Ø –°–¢–ê–¢–ò–ß–ù–´–• –§–û–ù–û–í –° –ü–†–û–°–¢–´–ú –≠–§–§–ï–ö–¢–û–ú =====
  const createBackgroundStyle = (backgroundSrc, index) => {
    const opacity = backgroundOpacities[index] || 0;
  
    return {
      position: 'absolute',
    
      // ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: —Ñ–æ–Ω —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ó–ê Safe Area
      top: `calc(-1 * env(safe-area-inset-top, 0px))`,      // –ü–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –í —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
      left: `calc(-1 * env(safe-area-inset-left, 0px))`,    // –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≤–ª–µ–≤–æ –ó–ê –≤—ã—Ä–µ–∑
      right: `calc(-1 * env(safe-area-inset-right, 0px))`,  // –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ –ó–ê –≤—ã—Ä–µ–∑  
      bottom: `calc(-1 * env(safe-area-inset-bottom, 0px))`, // –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≤–Ω–∏–∑ –ó–ê bottom area
    
      // ‚úÖ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô –§–û–ù: –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
      backgroundImage: backgroundSrc 
        ? `url(${backgroundSrc})` 
        : `linear-gradient(135deg, 
            rgba(180, 0, 55, 0.95) 0%,
            rgba(153, 0, 55, 0.9) 25%,
            rgba(152, 164, 174, 0.8) 50%,
            rgba(118, 143, 146, 0.85) 75%,
            rgba(0, 40, 130, 0.95) 100%
          )`,
    
      // ‚úÖ FALLBACK: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–≤–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      backgroundColor: 'rgba(180, 0, 55, 0.95)',
    
      backgroundSize: 'cover',
      backgroundPosition: 'center',
      backgroundRepeat: 'no-repeat',
    
      opacity: opacity,
      filter: `brightness(${0.7 + opacity * 0.1})`,
      transition: 'opacity 3s ease-in-out',
    
      pointerEvents: 'none',
      zIndex: 1,
      willChange: 'opacity'
    };
  };

  return (
    <ErrorBoundary>
      <div style={globalContainerStyle}>
        {/* –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π div –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ–Ω–∞ —Å–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º */}
        {imagesLoaded && availableBackgrounds.map((background, index) => (
          <div
            key={index}
            style={createBackgroundStyle(background, index)}
          />
        ))}
        
        {/* –†–æ—É—Ç–µ—Ä —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ */}
        <Router>
          <AutoNavigator>
            <div style={{ position: 'relative', zIndex: 10, width: '100%', height: '100%' }}>
              <Routes>
                <Route path="/"           element={<WelcomePage />} />
                <Route path="/main-menu"  element={<MainMenu />} />
                <Route path="/polls"      element={<PollsPage />} />
                <Route path="/snp"        element={<SNPPage />} />
                <Route path="/employee"   element={<EmployeePage />} />
                <Route path="/assessment" element={<AssessmentPage />} />
                <Route path="/feedback"   element={<FeedbackPage />} />
                <Route path="/justincase" element={<JustincasePage />} />
                <Route path="/carefuture" element={<CareFuturePage />} />
                <Route path="/marzapoll"  element={<MarzaPollPage />} />
              </Routes>
            </div>
          </AutoNavigator>
        </Router>
      </div>
    </ErrorBoundary>
  );
}

export default MainApp;














