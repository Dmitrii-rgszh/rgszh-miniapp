// MainMenu.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° TOUCH –ü–û–î–î–ï–†–ñ–ö–û–ô
// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ isExiting
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã touch —Å–æ–±—ã—Ç–∏—è
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import logoImage from './components/logo.png';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º CSS —Ñ–∞–π–ª—ã
import './Styles/containers.css'; // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
import './Styles/buttons.css';    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–≤–∫–ª—é—á–∞—è –∞–Ω–∏–º–∞—Ü–∏–∏)
import './Styles/logo.css';       // –õ–æ–≥–æ—Ç–∏–ø

export default function MainMenu() {
  const navigate = useNavigate();
  
  // ===== –°–û–°–¢–û–Ø–ù–ò–Ø =====
  const [logoAnimated, setLogoAnimated] = useState(false);
  const [buttonsAnimated, setButtonsAnimated] = useState(false);
  const [isExiting, setIsExiting] = useState(false); // ‚Üê –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ false –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const logoRef = useRef(null);

  // ===== –î–ê–ù–ù–´–ï –ö–ù–û–ü–û–ö =====
  const buttons = [
    { label: '–û–ø—Ä–æ—Å—ã', to: '/polls', type: 'primary' },
    { label: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', to: '/employee', type: 'primary' },
  ];

  // ===== –°–ë–†–û–° –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–ò –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ò =====
  useEffect(() => {
    console.log('üîÑ MainMenu: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º isExiting');
    setIsExiting(false);
  }, []);

  // ===== –ê–ù–ò–ú–ê–¶–ò–Ø –í–•–û–î–ê =====
  useEffect(() => {
    const timer1 = setTimeout(() => {
      setLogoAnimated(true);
      if (logoRef.current) {
        logoRef.current.classList.add('animate-logo');
      }
    }, 100);
    
    const timer2 = setTimeout(() => {
      setButtonsAnimated(true);
    }, 600);
    
    return () => {
      clearTimeout(timer1);
      clearTimeout(timer2);
    };
  }, []);

  // ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–ê –ü–û –ö–ù–û–ü–ö–ï =====
  const handleClick = (path) => {
    console.log('üîò MainMenu: handleClick –≤—ã–∑–≤–∞–Ω, path:', path);
    console.log('üîò MainMenu: isExiting —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', isExiting);
    
    if (isExiting) {
      console.log('‚ùå MainMenu: –ö–ª–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - isExiting=true');
      return;
    }
    
    console.log('‚úÖ MainMenu: –ö–ª–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
    setIsExiting(true);
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å—ã –¥–ª—è exit –∞–Ω–∏–º–∞—Ü–∏–∏
    if (logoRef.current) {
      logoRef.current.classList.add('animate-logo-exit');
    }
    
    setTimeout(() => {
      console.log('üîÑ MainMenu: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫:', path);
      navigate(path);
    }, 800);
  };

  // ===== TOUCH –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
  const handleTouchStart = (e) => {
    console.log('üëÜ MainMenu: TouchStart');
  };

  const handleTouchEnd = (e, path) => {
    console.log('üëÜ MainMenu: TouchEnd, path:', path);
    handleClick(path);
  };

  // ===== RIPPLE –≠–§–§–ï–ö–¢ =====
  const createRipple = (event) => {
    const button = event.currentTarget;
    const circle = document.createElement('span');
    const diameter = Math.max(button.clientWidth, button.clientHeight);
    const radius = diameter / 2;
    
    circle.style.width = circle.style.height = `${diameter}px`;
    circle.style.left = `${event.clientX - button.offsetLeft - radius}px`;
    circle.style.top = `${event.clientY - button.offsetTop - radius}px`;
    circle.classList.add('ripple');
    
    const ripple = button.getElementsByClassName('ripple')[0];
    if (ripple) {
      ripple.remove();
    }
    
    button.appendChild(circle);
  };

  // ===== –ö–õ–ê–°–°–´ –î–õ–Ø –≠–õ–ï–ú–ï–ù–¢–û–í =====
  const getContainerClasses = () => [
    'main-container',
    isExiting ? 'exiting' : ''
  ].filter(Boolean).join(' ');

  const getLogoClasses = () => [
    'logo-wrapper',
    logoAnimated ? 'animated' : '',
    isExiting ? 'exiting' : ''
  ].filter(Boolean).join(' ');

  const getButtonContainerClasses = () => [
    'button-container',
    'with-logo',                  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ª–æ–≥–æ—Ç–∏–ø–∞
    buttonsAnimated ? 'animated' : '',
    isExiting ? 'exiting' : ''
  ].filter(Boolean).join(' ');

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∫–Ω–æ–ø–æ–∫ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º exiting –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –µ—â–µ –Ω–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω—ã
  const getButtonClasses = (btn, index) => [
    'btn-universal',              // –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
    `btn-${btn.type}`,           // –¢–∏–ø –∫–Ω–æ–ø–∫–∏ (primary, secondary, etc.)
    'btn-large',                 // –†–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
    'btn-shadow',                // –° —Ç–µ–Ω—å—é
    buttonsAnimated ? 'button-animated' : 'button-hidden',
    // –¢–û–õ–¨–ö–û –¥–æ–±–∞–≤–ª—è–µ–º button-exiting –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ —É–∂–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω—ã –ò –∏–¥–µ—Ç –≤—ã—Ö–æ–¥
    (buttonsAnimated && isExiting) ? 'button-exiting' : ''
  ].filter(Boolean).join(' ');

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  useEffect(() => {
    console.log('üîç MainMenu: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', {
      logoAnimated,
      buttonsAnimated,
      isExiting
    });
  }, [logoAnimated, buttonsAnimated, isExiting]);

  return (
    <div className={getContainerClasses()}>
      {/* ===== –õ–û–ì–û–¢–ò–ü ===== */}
      <div 
        ref={logoRef} 
        className={getLogoClasses()}
      >
        <img
          src={logoImage}
          alt="–õ–æ–≥–æ—Ç–∏–ø –†–ì–° –ñ–∏–∑–Ω—å"
          className="logo-image"
        />
      </div>

      {/* ===== –ö–ù–û–ü–ö–ò –° –ü–û–õ–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–û–ô –°–û–ë–´–¢–ò–ô ===== */}
      <div className={getButtonContainerClasses()}>
        {buttons.map((btn, index) => (
          <button
            key={btn.to}
            className={getButtonClasses(btn, index)}
            data-index={index}
            onClick={(e) => {
              console.log('üñ±Ô∏è MainMenu: onClick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω', btn.label);
              createRipple(e);
              handleClick(btn.to);
            }}
            onTouchStart={handleTouchStart}
            onTouchEnd={(e) => {
              e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤
              handleTouchEnd(e, btn.to);
            }}
            onPointerDown={() => console.log('üëâ MainMenu: PointerDown', btn.label)}
            style={{
              // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –°–¢–ò–õ–ò –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
              userSelect: 'auto',
              WebkitUserSelect: 'auto',
              pointerEvents: 'auto',
              cursor: 'pointer',
              touchAction: 'manipulation'
            }}
          >
            {btn.label}
          </button>
        ))}
      </div>

      {/* –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø */}
      <div style={{
        position: 'fixed',
        bottom: '20px',
        left: '20px',
        background: 'black',
        color: 'yellow',
        padding: '10px',
        fontSize: '12px',
        zIndex: 9999,
        borderRadius: '4px'
      }}>
        <div>isExiting: {String(isExiting)}</div>
        <div>buttonsAnimated: {String(buttonsAnimated)}</div>
        <div>logoAnimated: {String(logoAnimated)}</div>
      </div>
    </div>
  );
}















































