// src/SNPPage.js
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import logoImage       from './components/logo.png';
import DateWheelPicker from './DateWheelPicker';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º CSS —Ñ–∞–π–ª—ã –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —Å—Ç–∏–ª—è
import './Styles/logo.css';
import './Styles/cards.css';
import './Styles/text.css';
import './Styles/buttons.css';
import './Styles/BackButton.css';
import './Styles/HomeButton.css';
import './Styles/containers.css';
import './Styles/ProgressIndicator.css';
import './Styles/NextButton.css';
import './Styles/ios-safari-fixes.css';

export default function SNPPage() {
  const navigate = useNavigate();

  // ===== –°–æ—Å—Ç–æ—è–Ω–∏—è =====
  const [step, setStep]                   = useState(1);
  const [email, setEmail]                 = useState('');
  const [emailError, setEmailError]       = useState('');
  const [birthParts, setBirthParts]       = useState({
    day: '01',
    month: '01',
    year: new Date().getFullYear().toString()
  });
  const [birthDate, setBirthDate]         = useState(new Date());
  const [ageError, setAgeError]           = useState('');
  const [gender, setGender]               = useState(null);    // '–º—É–∂—Å–∫–æ–π' | '–∂–µ–Ω—Å–∫–∏–π' | null
  const [calcType, setCalcType]           = useState(null);    // 'premium' | 'sum' | null
  const [amountRaw, setAmountRaw]         = useState('');      // —á–∏—Å—Ç—ã–µ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "60000")
  const [amountDisplay, setAmountDisplay] = useState('');      // —Å —Ç–æ—á–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "60.000")
  const [amountError, setAmountError]     = useState('');
  const [resultData, setResultData]       = useState(null);
  
  // –ê–Ω–∏–º–∞—Ü–∏–∏
  const [contentAnimated, setContentAnimated] = useState(false);
  const [logoAnimated, setLogoAnimated] = useState(false);

  const [contactMode, setContactMode]     = useState(false);   // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Ñ–æ—Ä–º—É ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª
  const [contactSending, setContactSending] = useState(false);
  const [contactSent, setContactSent]     = useState(false);

  // –ü–æ–ª—è —Ñ–æ—Ä–º—ã ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª
  const [lastName, setLastName]           = useState('');
  const [firstName, setFirstName]         = useState('');
  const [middleName, setMiddleName]       = useState('');
  const [workCity, setWorkCity]           = useState('');

  // Email –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –¥–æ–º–µ–Ω @vtb.ru
  const isValidEmailFormat = email.includes('@') && email.includes('.') && email.length > 5;
  const emailValid = email.toLowerCase().endsWith('@vtb.ru') && isValidEmailFormat;

  // ===== useEffect –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ =====
  useEffect(() => {
    // –ê–Ω–∏–º–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
    setTimeout(() => setLogoAnimated(true), 300);
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    setTimeout(() => setContentAnimated(true), 600);
  }, []);

  // ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
  function getAge(d) {
    if (!(d instanceof Date)) return 0;
    const today = new Date();
    let age = today.getFullYear() - d.getFullYear();
    if (
      today.getMonth() < d.getMonth() ||
      (today.getMonth() === d.getMonth() && today.getDate() < d.getDate())
    ) {
      age--;
    }
    return age;
  }

  function isAmountValid() {
    const n = parseInt(amountRaw, 10) || 0;
    return (calcType === 'premium' && n >= 60000) ||
           (calcType === 'sum'     && n >= 450000);
  }

  function canGoNext() {
    if (step === 1) {
      return emailValid;
    }
    if (step === 2) {
      return (
        getAge(birthDate) >= 18 &&
        !ageError &&
        gender &&
        calcType &&
        amountRaw &&
        isAmountValid()
      );
    }
    return false;
  }

  // ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –®–∞–≥ 1 ‚Üí –®–∞–≥ 2 =====
  function handleEmailNext() {
    if (!emailValid) {
      setEmailError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É –í–¢–ë (@vtb.ru)');
      return;
    }
    setEmailError('');
    // –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —à–∞–≥—É 2
    setBirthDate(new Date());
    setGender(null);
    setCalcType(null);
    setAmountRaw('');
    setAmountDisplay('');
    setAmountError('');
    setAgeError('');
    setStep(2);
  }

  // ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ç–æ—á–∫–∞–º–∏ =====
  function onAmountChange(e) {
    const raw = e.target.value.replace(/\D/g, ''); // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    setAmountRaw(raw);
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º display —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç—ã—Å—è—á —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
    let d = raw, o = '';
    while (d.length > 3) {
      o = '.' + d.slice(-3) + o;
      d = d.slice(0, -3);
    }
    setAmountDisplay(d + o);

    const n = parseInt(raw, 10) || 0;
    if (calcType === 'premium' && n < 60000) {
      setAmountError('–ú–∏–Ω. 60 000 ‚ÇΩ');
    } else if (calcType === 'sum' && n < 450000) {
      setAmountError('–ú–∏–Ω. 450 000 ‚ÇΩ');
    } else {
      setAmountError('');
    }
  }

  // ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫: ¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç¬ª =====
  async function handleNext() {
    if (!canGoNext()) {
      if (getAge(birthDate) < 18) {
        setAgeError('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç');
      }
      return;
    }

    const payload = {
      email:      email,
      birthdate:  birthDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' }),
      age:        getAge(birthDate),
      gender:     gender,
      payment:    calcType === 'premium' ? '–°—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞' : '–°—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã',
      sum:        parseInt(amountRaw, 10)
    };

    console.log('üöÄ SNP CALCULATION DEBUG:');
    console.log('üìç Current URL:', window.location.href);
    console.log('üì° Request URL:', 'http://localhost:4000/api/proxy/snp/calculate');
    console.log('üìã Payload:', payload);

    try {
      console.log('üì§ Sending POST request...');
      const res = await fetch('http://localhost:4000/api/proxy/snp/calculate', {
        method:  'POST',
        headers: { 'Content-Type': 'application/json' },
        body:    JSON.stringify(payload)
      });

      console.log('üì• Response received:');
      console.log('   - Status:', res.status);
      console.log('   - Status Text:', res.statusText);

      if (!res.ok) {
        const errorText = await res.text();
        console.error('‚ùå Server error:', res.status, errorText);
        alert(`–û—à–∏–±–∫–∞ ${res.status}: —Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å`);
      } else {
        const data = await res.json();
        console.log('‚úÖ Response:', data);
        /*
          –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:
          {
            calculationDate: "...",
            gender: "...",
            age: ...,
            payment: "...",
            contribution: rv("C13"),            // C13
            totalContribution: rv("C16"),       // C16
            accrualPercent: rv("H12"),          // H12 (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.44)
            accrualAmount: rv("H13"),           // H13
            totalAccrual: rv("H16"),            // H16
            finalAnnual: rv("M13"),             // M13
            finalTotal: rv("M16")               // M16
          }
        */
        setResultData(data);
        setStep(3); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
      }
    } catch (error) {
      console.error('üö® Network error:', error);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  }

  function goHome() {
    navigate(-1);
  }

  // ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫: ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É¬ª =====
  async function handleSendToManager() {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—è
    if (!lastName.trim() || !firstName.trim() || !workCity.trim()) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã.');
      return;
    }
    setContactSending(true);

    // –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–º—É –∏ —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞
    const fullName = `${lastName.trim()} ${firstName.trim()} ${middleName.trim()}`;
    const subject = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –ø—è—Ç—å. –ì–∞—Ä–∞–Ω—Ç" ‚Äì ${fullName}`;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ resultData
    const {
      contribution,
      totalContribution,
      accrualPercent,
      accrualAmount,
      totalAccrual,
      finalAnnual,
      finalTotal
    } = resultData;
    
    const fmt = num => Number(num || 0).toLocaleString('ru-RU');
    const accrualPercentDisplay = Math.round(Number(accrualPercent) * 100);
    const todayStr = new Date().toLocaleDateString('ru-RU', {
      day: '2-digit', month: '2-digit', year: 'numeric'
    });

    const bodyLines = [
      '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!',
      '',
      '–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –ø—è—Ç—å. –ì–∞—Ä–∞–Ω—Ç":',
      '',
      '=== –í–ê–®–ò –î–ê–ù–ù–´–ï ===',
      `–§–ò–û: ${fullName}`,
      `–ü–æ–ª: ${gender}`,
      `–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDate.toLocaleDateString('ru-RU', { day:'2-digit', month:'2-digit', year:'numeric' })}`,
      `–í–æ–∑—Ä–∞—Å—Ç: ${getAge(birthDate)} –ª–µ—Ç`,
      `–ì–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç—ã: ${workCity.trim()}`,
      `–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞: ${todayStr}`,
      '',
      '=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê ===',
      `–ï–∂–µ–≥–æ–¥–Ω—ã–π –≤–∑–Ω–æ—Å: ${fmt(contribution)} ‚ÇΩ`,
      `–û–±—â–∞—è —Å—É–º–º–∞ –≤–∑–Ω–æ—Å–æ–≤ (5 –ª–µ—Ç): ${fmt(totalContribution)} ‚ÇΩ`,
      `–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${accrualPercentDisplay}% –≥–æ–¥–æ–≤—ã—Ö`,
      `–ì–æ–¥–æ–≤—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${fmt(accrualAmount)} ‚ÇΩ`,
      `–û–±—â–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (5 –ª–µ—Ç): ${fmt(totalAccrual)} ‚ÇΩ`,
      `–ò—Ç–æ–≥–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –µ–∂–µ–≥–æ–¥–Ω–æ: ${fmt(finalAnnual)} ‚ÇΩ`,
      `–ò—Ç–æ–≥–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∑–∞ 5 –ª–µ—Ç: ${fmt(finalTotal)} ‚ÇΩ`,
      '',
      '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–ª–∏—Å–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.',
      '',
      '–° —É–≤–∞–∂–µ–Ω–∏–µ–º,',
      '–ö–æ–º–∞–Ω–¥–∞ –í–¢–ë –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ'
    ];
    
    const body = bodyLines.join('\r\n');

    const payload = {
      to_email: email, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—á—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      subject,
      body,
      user_data: {
        full_name: fullName,
        email: email,
        city: workCity.trim(),
        calculation_results: resultData
      }
    };

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const res = await fetch('http://localhost:4000/api/proxy/snp/send_results', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      if (!res.ok) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', res.status, await res.text());
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${res.status}`);
        setContactSending(false);
      } else {
        setContactSending(false);
        setContactSent(true);
        // –ß–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        setTimeout(() => navigate(-1), 4000);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞');
      setContactSending(false);
    }
  }

  // ===== –≠–∫—Ä–∞–Ω ¬´–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É‚Ä¶¬ª =====
  if (contactSending) {
    return (
      <div className="processing-screen">
        <div className="logo-wrapper animate-logo">
          <img className="poll-logo" src={logoImage} alt="–õ–æ–≥–æ—Ç–∏–ø" />
        </div>
        <p className="processing-title">
          –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É...
        </p>
        <div className="arrow-animation">‚Üí</div>
      </div>
    );
  }

  // ===== –≠–∫—Ä–∞–Ω ¬´–£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É¬ª =====
  if (contactSent) {
    const fullName = `${firstName} ${lastName}`.trim();
    return (
      <div className="processing-screen">
        <div className="logo-wrapper animate-logo">
          <img className="poll-logo" src={logoImage} alt="–õ–æ–≥–æ—Ç–∏–ø" />
        </div>
        <p className="processing-title">
          {fullName}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É {email}!<br/>–û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è, –∫–æ–ª–ª–µ–≥–∞!
        </p>
      </div>
    );
  }

  // ===== –ï—Å–ª–∏ resultData –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ + —Ñ–æ—Ä–º—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ =====
  if (resultData) {
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const { 
      contribution, 
      totalContribution,
      accrualPercent,
      accrualAmount,
      totalAccrual,
      finalAnnual,
      finalTotal
    } = resultData;

    const fmt = num => Number(num || 0).toLocaleString('ru-RU');
    const resGender = gender === '–º—É–∂—Å–∫–æ–π' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π';
    const resPayment = calcType === 'premium' ? '–°—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞' : '–°—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã';
    const accrualPercentDisplay = Math.round(Number(accrualPercent) * 100);
    const todayStr = new Date().toLocaleDateString('ru-RU', {
      day: '2-digit', month: '2-digit', year: 'numeric'
    });

    // ===== –ï—Å–ª–∏ contactMode=true, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É ¬´–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ¬ª =====
    if (contactMode) {
      return (
        <div className="main-container">
          {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
          <button className="back-btn animate-home" onClick={goHome}>
            <svg viewBox="0 0 24 24">
              <path d="M15 18l-6-6 6-6" stroke="white" strokeWidth="2.5" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>
          
          {/* –õ–æ–≥–æ—Ç–∏–ø */}
          <div className={`logo-wrapper ${logoAnimated ? 'animated' : ''}`}>
            <img src={logoImage} alt="Logo" className="logo-image" />
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º" */}
          <button className="next-btn animate-next" onClick={() => setContactMode(false)}>
            <svg viewBox="0 0 24 24">
              <path d="M15 18l-6-6 6-6" stroke="white" strokeWidth="2.5" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>

          <div className="form-container">
            <div className={`card-container card-positioned scrollable ${contentAnimated ? 'animated' : ''}`}>
              <div className="card-content">
                <h1 className="text-h1-dark text-center">–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</h1>
                
                <div className="form-group">
                  <label className="text-label" style={{ color: '#1f4e79' }}>–§–∞–º–∏–ª–∏—è:</label>
                  <input
                    type="text"
                    className="form-input"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                    value={lastName}
                    onChange={e => setLastName(e.target.value)}
                  />
                </div>

                <div className="form-group">
                  <label className="text-label" style={{ color: '#1f4e79' }}>–ò–º—è:</label>
                  <input
                    type="text"
                    className="form-input"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                    value={firstName}
                    onChange={e => setFirstName(e.target.value)}
                  />
                </div>

                <div className="form-group">
                  <label className="text-label" style={{ color: '#1f4e79' }}>–û—Ç—á–µ—Å—Ç–≤–æ:</label>
                  <input
                    type="text"
                    className="form-input"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ"
                    value={middleName}
                    onChange={e => setMiddleName(e.target.value)}
                  />
                </div>

                <div className="form-group">
                  <label className="text-label" style={{ color: '#1f4e79' }}>–ì–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç—ã:</label>
                  <input
                    type="text"
                    className="form-input"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
                    value={workCity}
                    onChange={e => setWorkCity(e.target.value)}
                  />
                </div>

                <button
                  className="btn-universal btn-primary btn-large btn-fullwidth"
                  onClick={handleSendToManager}
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –ø–æ—á—Ç—É
                </button>
              </div>
            </div>
          </div>
        </div>
      );
    }

    // ===== –ò–Ω–∞—á–µ (contactMode=false) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã =====
    return (
      <div className="main-container">
        {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
        <button className="back-btn animate-home" onClick={goHome}>
          <svg viewBox="0 0 24 24">
            <path d="M15 18l-6-6 6-6" stroke="white" strokeWidth="2.5" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </button>
        
        {/* –õ–æ–≥–æ—Ç–∏–ø */}
        <div className={`logo-wrapper ${logoAnimated ? 'animated' : ''}`}>
          <img src={logoImage} alt="Logo" className="logo-image" />
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç" */}
        <button
          className="next-btn repeat-btn"
          onClick={() => {
            // –°–±—Ä–æ—Å –∫ —à–∞–≥—É 2
            setResultData(null);
            setGender(null);
            setCalcType(null);
            setAmountRaw('');
            setAmountDisplay('');
            setAmountError('');
            setStep(2);
            setContactMode(false);
          }}
        >
          {/* SVG recycle icon */}
          <svg width="20" height="20" viewBox="0 0 28 28" fill="none">
            <path
              d="M4.93 19.07A10 10 0 1 1 21 12"
              stroke="white"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <path d="m21 12-4-4 4-4" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </button>

        <div className="form-container">
          <div className={`card-container card-positioned animated`}>
            <div className="card-content">
              <h2 className="text-h2 text-center">–†–∞—Å—á—ë—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –ø—è—Ç—å. –ì–∞—Ä–∞–Ω—Ç¬ª</h2>
              
              {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ */}
              <div className="result-items">
                <div className="result-item-split">
                  <span className="result-label-left">–î–∞—Ç–∞ —Ä–∞—Å—á—ë—Ç–∞:</span>
                  <span className="result-value-right">{todayStr}</span>
                </div>
                <div className="result-item-split">
                  <span className="result-label-left">–í–æ–∑—Ä–∞—Å—Ç:</span>
                  <span className="result-value-right">{getAge(birthDate)} –ª–µ—Ç</span>
                </div>
                <div className="result-item-split">
                  <span className="result-label-left">–ü–æ–ª:</span>
                  <span className="result-value-right">{resGender}</span>
                </div>
                <div className="result-item-split">
                  <span className="result-label-left">–†–∞—Å—á—ë—Ç –æ—Ç:</span>
                  <span className="result-value-right">{resPayment}</span>
                </div>
              </div>

              {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
              <div className="result-items" style={{ marginTop: '20px' }}>
                <div className="result-item-split highlight">
                  <span className="result-label-left">–ï–∂–µ–≥–æ–¥–Ω—ã–π –≤–∑–Ω–æ—Å:</span>
                  <span className="result-value-right">{fmt(contribution)} ‚ÇΩ</span>
                </div>
                <div className="result-item-split">
                  <span className="result-label-left">–û–±—â–∞—è —Å—É–º–º–∞ –≤–∑–Ω–æ—Å–æ–≤ (5 –ª–µ—Ç):</span>
                  <span className="result-value-right">{fmt(totalContribution)} ‚ÇΩ</span>
                </div>
                <div className="result-item-split highlight">
                  <span className="result-label-left">–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</span>
                  <span className="result-value-right">{accrualPercentDisplay}% –≥–æ–¥–æ–≤—ã—Ö</span>
                </div>
                <div className="result-item-split">
                  <span className="result-label-left">–ì–æ–¥–æ–≤—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</span>
                  <span className="result-value-right">{fmt(accrualAmount)} ‚ÇΩ</span>
                </div>
                <div className="result-item-split">
                  <span className="result-label-left">–û–±—â–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (5 –ª–µ—Ç):</span>
                  <span className="result-value-right">{fmt(totalAccrual)} ‚ÇΩ</span>
                </div>
                <div className="result-item-split highlight">
                  <span className="result-label-left">–ò—Ç–æ–≥–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –µ–∂–µ–≥–æ–¥–Ω–æ:</span>
                  <span className="result-value-right">{fmt(finalAnnual)} ‚ÇΩ</span>
                </div>
                <div className="result-item-split highlight">
                  <span className="result-label-left">–ò—Ç–æ–≥–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∑–∞ 5 –ª–µ—Ç:</span>
                  <span className="result-value-right">{fmt(finalTotal)} ‚ÇΩ</span>
                </div>
              </div>

              <div className="card-footer" style={{ marginTop: '20px' }}>
                <button
                  type="button"
                  className="btn-universal btn-primary btn-large btn-fullwidth"
                  onClick={() => setContactMode(true)}
                >
                  –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // ===== –û–°–ù–û–í–ù–û–ô UI (–®–∞–≥ 1 –∏ –®–∞–≥ 2) =====
  return (
    <div className={`main-container ${step === 3 || contactMode ? 'snp-page-wrapper' : ''}`}>
      {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
      <button className="back-btn animate-home" onClick={goHome}>
        <svg viewBox="0 0 24 24">
          <path d="M15 18l-6-6 6-6" stroke="white" strokeWidth="2.5" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
        </svg>
      </button>
      
      {/* –õ–æ–≥–æ—Ç–∏–ø */}
      <div className={`logo-wrapper ${logoAnimated ? 'animated' : ''}`}>
        <img src={logoImage} alt="Logo" className="logo-image" />
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" */}
      <button
        className={`next-btn ${contentAnimated && canGoNext() ? 'animate-next' : ''} ${!canGoNext() ? 'disabled' : ''}`}
        onClick={step === 1 ? handleEmailNext : handleNext}
        disabled={!canGoNext()}
      >
        <div className={`shaker ${contentAnimated && canGoNext() ? 'shake-btn' : ''}`}>
          <svg viewBox="0 0 24 24">
            <path d="M9 6l6 6-6 6" stroke="white" strokeWidth="3" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </div>
      </button>

      <div className="form-container">
        {/* ===== –®–∞–≥ 1: –í–≤–æ–¥ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã ===== */}
        {step === 1 && (
          <div className={`card-container card-positioned ${contentAnimated ? 'animated' : ''}`}>
            <div className="card-header">
              <h1 className="text-h1-dark text-center">–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –ø—è—Ç—å. –ì–∞—Ä–∞–Ω—Ç</h1>
              <p className="text-body-dark text-center">
                –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∂–∏–∑–Ω–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º
              </p>
            </div>
            
            <div className="form-group">
              <label className="form-label text-label-large" style={{ color: '#1f4e79' }}>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞</label>
              <input
                type="email"
                className={`form-input ${emailError ? 'error' : ''}`}
                inputMode="email"
                autoComplete="email"
                autoCapitalize="none"
                spellCheck="false"
                placeholder="example@vtb.ru"
                value={email}
                onChange={e => {
                  setEmail(e.target.value);
                  if (emailError) setEmailError('');
                }}
              />
              {emailError && <span className="form-error">{emailError}</span>}
            </div>
          </div>
        )}

        {/* ===== –®–∞–≥ 2: –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===== */}
        {step === 2 && (
          <div className={`card-container card-positioned scrollable ${contentAnimated ? 'animated' : ''}`}>
            <div className="card-content">
              <h1 className="text-h1-dark text-center">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞</h1>
              
              <div className="form-group">
                <label className="text-label" style={{ color: '#1f4e79' }}>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
                <DateWheelPicker
                  value={birthParts}
                  onChange={(newParts) => {
                    setBirthParts(newParts);
                    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º birthDate
                    const { day, month, year } = newParts;
                    if (day && month && year) {
                      const d = Number(day);
                      const m = Number(month);
                      const y = Number(year);
                      const dt = new Date(y, m - 1, d);
                      if (!isNaN(dt.getTime()) && 
                          dt.getDate() === d && 
                          dt.getMonth() + 1 === m && 
                          dt.getFullYear() === y) {
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç (–º–∏–Ω–∏–º—É–º 18 –ª–µ—Ç)
                        const today = new Date();
                        const age = today.getFullYear() - dt.getFullYear() - 
                          ((today.getMonth() < dt.getMonth() || 
                            (today.getMonth() === dt.getMonth() && today.getDate() < dt.getDate())) ? 1 : 0);
                        
                        if (age < 18) {
                          setAgeError('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç');
                          setBirthDate(new Date()); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –¥–∞—Ç—É
                        } else {
                          setAgeError('');
                          setBirthDate(dt);
                        }
                      }
                    }
                  }}
                />
                {ageError && <span className="form-error" style={{ color: '#B71C3A' }}>{ageError}</span>}
              </div>

              <div className="form-group">
                <label className="text-label" style={{ color: '#1f4e79' }}>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:</label>
                <div className="option-buttons horizontal-always">
                  <button
                    type="button"
                    className={`option-button ${gender === '–º—É–∂—Å–∫–æ–π' ? 'selected' : ''}`}
                    onClick={() => setGender('–º—É–∂—Å–∫–æ–π')}
                  >
                    –ú—É–∂—Å–∫–æ–π
                  </button>
                  <button
                    type="button"
                    className={`option-button ${gender === '–∂–µ–Ω—Å–∫–∏–π' ? 'selected' : ''}`}
                    onClick={() => setGender('–∂–µ–Ω—Å–∫–∏–π')}
                  >
                    –ñ–µ–Ω—Å–∫–∏–π
                  </button>
                </div>
              </div>

              <div className="form-group">
                <label className="text-label" style={{ color: '#1f4e79' }}>–†–∞—Å—á—ë—Ç –æ—Ç‚Ä¶</label>
                <div className="option-buttons horizontal-always">
                  <button
                    type="button"
                    className={`option-button ${calcType === 'premium' ? 'selected' : ''}`}
                    onClick={() => setCalcType('premium')}
                  >
                    –°—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞
                  </button>
                  <button
                    type="button"
                    className={`option-button ${calcType === 'sum' ? 'selected' : ''}`}
                    onClick={() => setCalcType('sum')}
                  >
                    –°—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã
                  </button>
                </div>
              </div>

              {calcType && (
                <div className="form-group">
                  <label className="text-label" style={{ color: '#1f4e79' }}>–°—É–º–º–∞ (‚ÇΩ):</label>
                  <input
                    type="text"
                    className={`form-input ${amountError ? 'error' : ''}`}
                    placeholder={calcType === 'premium' ? '–ú–∏–Ω. 60 000' : '–ú–∏–Ω. 450 000'}
                    value={amountDisplay}
                    onChange={onAmountChange}
                  />
                  {amountError && <span className="form-error">{amountError}</span>}
                </div>
              )}
            </div>
          </div>
        )}

        {/* ===== –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (step 3) ===== */}
        {step === 3 && resultData && (
          <div className="card-container card-positioned scrollable snp-results animated">
            <div className="card-content">
              <h1 className="text-h1-dark text-center">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞</h1>
              <p className="text-body-dark text-center">–ü—Ä–æ–≥—Ä–∞–º–º–∞ "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –ø—è—Ç—å. –ì–∞—Ä–∞–Ω—Ç"</p>
              
              {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
              <div className="result-items">
                <div className="result-item-split">
                  <span className="result-label-left">–ï–∂–µ–≥–æ–¥–Ω—ã–π –≤–∑–Ω–æ—Å:</span>
                  <span className="result-value-right">{Number(resultData.contribution || 0).toLocaleString('ru-RU')} ‚ÇΩ</span>
                </div>
                
                <div className="result-item-split">
                  <span className="result-label-left">–û–±—â–∞—è —Å—É–º–º–∞ –≤–∑–Ω–æ—Å–æ–≤:</span>
                  <span className="result-value-right">{Number(resultData.totalContribution || 0).toLocaleString('ru-RU')} ‚ÇΩ</span>
                </div>
                
                <div className="result-item-split">
                  <span className="result-label-left">–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:</span>
                  <span className="result-value-right">{Math.round(Number(resultData.accrualPercent) * 100)}%</span>
                </div>
                
                <div className="result-item-split">
                  <span className="result-label-left">–ï–∂–µ–≥–æ–¥–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</span>
                  <span className="result-value-right">{Number(resultData.accrualAmount || 0).toLocaleString('ru-RU')} ‚ÇΩ</span>
                </div>
                
                <div className="result-item-split">
                  <span className="result-label-left">–û–±—â–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</span>
                  <span className="result-value-right">{Number(resultData.totalAccrual || 0).toLocaleString('ru-RU')} ‚ÇΩ</span>
                </div>
                
                <div className="result-item-split highlight" style={{ marginTop: '20px', paddingTop: '20px', borderTop: '2px solid #e0e0e0' }}>
                  <span className="result-label-left">–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:</span>
                  <span className="result-value-right">
                    {Number(resultData.finalTotal || 0).toLocaleString('ru-RU')} ‚ÇΩ
                  </span>
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –ø–æ—á—Ç—É" */}
              <div className="form-group" style={{ marginTop: '30px' }}>
                <button 
                  className="btn-universal btn-primary btn-large btn-fullwidth"
                  onClick={() => setContactMode(true)}
                >
                  –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                </button>
              </div>
            </div>
          </div>
        )}

        {/* ===== –§–æ—Ä–º–∞ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" ===== */}
        {contactMode && resultData && (
          <div className="card-container card-positioned scrollable snp-results animated">
            <div className="card-content">
              <h1 className="text-h1-dark text-center">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</h1>
              <p className="text-body-dark text-center">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É</p>
              
              <div className="form-group">
                <label className="text-label">–§–∞–º–∏–ª–∏—è *</label>
                <input
                  type="text"
                  className="form-input"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                />
              </div>

              <div className="form-group">
                <label className="text-label">–ò–º—è *</label>
                <input
                  type="text"
                  className="form-input"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                />
              </div>

              <div className="form-group">
                <label className="text-label">–û—Ç—á–µ—Å—Ç–≤–æ</label>
                <input
                  type="text"
                  className="form-input"
                  value={middleName}
                  onChange={(e) => setMiddleName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                />
              </div>

              <div className="form-group">
                <label className="text-label">–ì–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç—ã *</label>
                <input
                  type="text"
                  className="form-input"
                  value={workCity}
                  onChange={(e) => setWorkCity(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
                />
              </div>

              <div className="form-group">
                <button 
                  className={`btn-universal btn-primary btn-large btn-fullwidth ${contactSending ? 'btn-loading' : ''}`}
                  onClick={handleSendToManager}
                  disabled={contactSending}
                >
                  {contactSending ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –ø–æ—á—Ç—É'}
                </button>
              </div>

              <div className="form-group">
                <button 
                  className="btn-universal btn-secondary btn-large btn-fullwidth"
                  onClick={() => setContactMode(false)}
                  disabled={contactSending}
                >
                  –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                </button>
              </div>
            </div>
          </div>
        )}

        {/* ===== –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ===== */}
        {contactSent && (
          <div className="card-container card-positioned animated">
            <div className="success-container">
              <div className="success-icon">‚úÖ</div>
              <h2 className="text-h2-dark">–°–ø–∞—Å–∏–±–æ!</h2>
              <p className="text-body-dark text-center">
                {lastName} {firstName}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É {email}!<br/>
                –û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è, –∫–æ–ª–ª–µ–≥–∞!
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
















































































































