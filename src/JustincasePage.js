import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom'; // üîπ –¥–æ–±–∞–≤–ª–µ–Ω–æ
import mainmenuIcon from './components/icons/mainmenu.png';
import logoImage from './components/logo.png';
import backgroundImage from './components/background.png';
import DateWheelPicker from './DateWheelPicker';

const JustincasePage = () => {
  const navigate = useNavigate(); // üîπ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞
  const [userName, setUserName] = useState('');
  useEffect(() => {
    const storedName = localStorage.getItem('userName');
    setUserName(storedName || '–ì–æ—Å—Ç—å');
  }, []);

  // === —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã ===
  const [birthDate, setBirthDate] = useState(null);
  const [gender, setGender] = useState(null);
  const [insuranceInfo, setInsuranceInfo] = useState(null);
  const [insuranceTerm, setInsuranceTerm] = useState('1');
  const [insuranceSum, setInsuranceSum] = useState('');
  const [insuranceFrequency, setInsuranceFrequency] = useState('');

  const [accidentPackage, setAccidentPackage] = useState(null);
  const [criticalPackage, setCriticalPackage] = useState(null);
  const [treatmentRegion, setTreatmentRegion] = useState(null);
  const [sportPackage, setSportPackage] = useState(null);

  // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤–µ—Ç–∫–∏ no (–Ω–µ –∑–Ω–∞–µ—Ç —Å—É–º–º—É)
  const [hasJob, setHasJob] = useState(null);
  const [income2021, setIncome2021] = useState('');
  const [income2022, setIncome2022] = useState('');
  const [income2023, setIncome2023] = useState('');
  const [scholarship, setScholarship] = useState('');
  const [unsecuredLoans, setUnsecuredLoans] = useState('');

  const [breadwinnerStatus, setBreadwinnerStatus] = useState(null);
  const [incomeShare, setIncomeShare] = useState('');
  const [childrenCount, setChildrenCount] = useState('0');
  const [specialCareRelatives, setSpecialCareRelatives] = useState(null);

  // —à–∞–≥–∏
  const [currentStep, setCurrentStep] = useState(1);
  const [isProcessing, setIsProcessing] = useState(false);
  const [resultData, setResultData] = useState(null);

  // —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª–µ–π-—Å—É–º–º
  const formatSum = raw => {
    let digits = raw.replace(/\D/g, '');
    if (!digits) return '';
    let out = '';
    while (digits.length > 3) {
      out = '.' + digits.slice(-3) + out;
      digits = digits.slice(0, -3);
    }
    return digits + out;
  };
  const handleSumChange = e => setInsuranceSum(formatSum(e.target.value));
  const handleIncome2021Change = e => setIncome2021(formatSum(e.target.value));
  const handleIncome2022Change = e => setIncome2022(formatSum(e.target.value));
  const handleIncome2023Change = e => setIncome2023(formatSum(e.target.value));
  const handleScholarshipChange = e => setScholarship(formatSum(e.target.value));
  const handleUnsecuredLoansChange = e => setUnsecuredLoans(formatSum(e.target.value));

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
  const canGoNext = () => {
    if (currentStep === 1) {
      return birthDate && gender && insuranceInfo;
    }
    if (currentStep === 2) {
      return insuranceInfo === 'yes'
        ? (insuranceTerm && insuranceSum && insuranceFrequency)
        : (hasJob && income2021 && income2022 && income2023);
    }
    if (currentStep === 3) {
      if (insuranceInfo === 'yes') {
        return accidentPackage && criticalPackage && (criticalPackage==='no' || treatmentRegion) && sportPackage;
      } else {
        return breadwinnerStatus &&
               (breadwinnerStatus==='yes' || incomeShare) &&
               childrenCount !== '' &&
               specialCareRelatives;
      }
    }
    if (currentStep === 4) {
      // —Ä–∞—Å—á—ë—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      return accidentPackage && criticalPackage && (criticalPackage==='no' || treatmentRegion) && sportPackage;
    }
    return true;
  };

  // –ø–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä—ë–¥
  const handleNext = () => {
    if (!canGoNext()) {
      alert('–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞');
      return;
    }
    if (currentStep < 3) {
      setCurrentStep(s => s + 1);
    } else if (currentStep === 3) {
      insuranceInfo==='yes' ? doCalculation() : setCurrentStep(4);
    } else if (currentStep === 4) {
      doCalculation();
    }
  };

  // –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥
  const handlePrev = () => {
    if (currentStep > 1) setCurrentStep(s => s - 1);
  };

  // —Å–±—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–∞—Å—á—ë—Ç
  const repeatCalculation = () => {
    setBirthDate(null); setGender(null); setInsuranceInfo(null);
    setInsuranceTerm('1'); setInsuranceSum(''); setInsuranceFrequency('');
    setAccidentPackage(null); setCriticalPackage(null); setTreatmentRegion(null); setSportPackage(null);
    setHasJob(null); setIncome2021(''); setIncome2022(''); setIncome2023('');
    setScholarship(''); setUnsecuredLoans('');
    setBreadwinnerStatus(null); setIncomeShare(''); setChildrenCount('0'); setSpecialCareRelatives(null);
    setResultData(null); setIsProcessing(false); setCurrentStep(1);
  };

  // –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
  const goToMenu = () => {
    navigate('/Main-Menu');
  };

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±—ç–∫–µ–Ω–¥ –∏ –ø—Ä–∏—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const doCalculation = () => {
    setIsProcessing(true);
    const payload = {
      birthDate, gender, insuranceInfo,
      insuranceTerm, insuranceSum, insuranceFrequency,
      accidentPackage, criticalPackage, treatmentRegion, sportPackage,
      hasJob, income2021, income2022, income2023, scholarship, unsecuredLoans,
      breadwinnerStatus, incomeShare, childrenCount, specialCareRelatives
    };
    fetch('/api/proxy/calculator/save', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      credentials: 'include',
      body: JSON.stringify(payload)
    })
      .then(res => {
        if (!res.ok) return res.json().then(err=>{throw new Error(err.error||'–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞')});
        return res.json();
      })
      .then(data => {
        setResultData(data);
        setIsProcessing(false);
        setCurrentStep(5);
      })
      .catch(err => {
        setIsProcessing(false);
        alert(err.message);
      });
  };

  // —Ä–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —à–∞–≥–∞
  const renderStep = () => {
    if (isProcessing) {
      return (
        <div className="processing-container">
          <h2>{userName}, –∏–¥—ë—Ç —Ä–∞—Å—á—ë—Ç‚Ä¶</h2>
          <div className="loading-spinner"/>
        </div>
      );
    }

    // –®–∞–≥ 5 ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (currentStep === 5 && resultData) {
      return (
        <div className="result-container">
          <h2>
            –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π¬ª (—Ä–∞—Å—á–µ—Ç –æ—Ç {resultData.calculationDate})
          </h2>
          <p>–í–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞: {resultData.clientAge} –ª–µ—Ç</p>
          <p>–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞: {resultData.clientGender}</p>
          <p>–°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è: {resultData.insuranceTerm} –ª–µ—Ç</p>
          <hr/>

          <h3>
            –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (—É—Ö–æ–¥ –∏–∑ –∂–∏–∑–Ω–∏ –∏ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å I –∏ II –≥—Ä—É–ø–ø—ã):
          </h3>
          <p>–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {resultData.baseInsuranceSum}</p>
          <p>–°—Ç—Ä–∞—Ö–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {resultData.basePremium} —Ä—É–±.</p>

          {resultData.accidentPackageIncluded && (
            <>
              <hr/>
              <h3>–ü–∞–∫–µ—Ç ¬´–ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π¬ª:</h3>
              <p>–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {resultData.accidentInsuranceSum}</p>
              <p>–°—Ç—Ä–∞—Ö–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {resultData.accidentPremium} —Ä—É–±.</p>
            </>
          )}

          {resultData.criticalPackageIncluded && (
            <>
              <hr/>
              <h3>–ü–∞–∫–µ—Ç ¬´–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è¬ª:</h3>
              <p>
                ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ 60 000 000 ‚ÇΩ,
                –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏ ‚Äì 100 000 ‚ÇΩ.
              </p>
              <p>–°—Ç—Ä–∞—Ö–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {resultData.criticalPremium} —Ä—É–±.</p>
            </>
          )}

          {resultData.sportOptionIncluded && (
            <>
              <hr/>
              <h3>–û–ø—Ü–∏—è ¬´–õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–æ—Ä—Ç¬ª:</h3>
              <p>–í–∫–ª—é—á–µ–Ω–æ</p>
            </>
          )}

          <hr/>
          <p><strong>–ò—Ç–æ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞—è –ø—Ä–µ–º–∏—è:</strong> {resultData.totalPremium} —Ä—É–±.</p>
          <p>
            <strong>–ü–æ—Ä—è–¥–æ–∫ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏–∏:</strong> {resultData.paymentMethod}
          </p>
          <hr/>
          <p>
            –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å:&nbsp;
            <a href="/contact">–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä</a>
          </p>
        </div>
      );
    }

    // === –®–∞–≥ 1 ===
    if (currentStep === 1) {
      return (
        <>
          <div className="form-group">
            <label className="form-label">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
            <DateWheelPicker onChange={setBirthDate}/>
          </div>
          <div className="form-group">
            <label className="form-label">–ü–æ–ª:</label>
            <div className="gender-selector">
              {['male','female'].map(g => (
                <div
                  key={g}
                  className={`gender-option ${gender===g?'selected':''}`}
                  onClick={()=>setGender(g)}
                >
                  <div className="gender-label">
                    {g==='male'?'–ú—É–∂—Å–∫–æ–π':'–ñ–µ–Ω—Å–∫–∏–π'}
                  </div>
                  <div className="gender-icon">
                    {g==='male'?'üë®':'üë©'}
                  </div>
                </div>
              ))}
            </div>
          </div>
          <div className="form-group">
            <label className="form-label">
              –ó–Ω–∞–µ—Ç–µ –ª–∏ –í—ã –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –∏ —Å—É–º–º—É –æ—Ñ–æ—Ä–º–ª—è—Ç—å –ø–æ–ª–∏—Å?
            </label>
            <div className="insurance-options">
              {['yes','no'].map(val => (
                <button
                  key={val}
                  className={`insurance-btn ${insuranceInfo===val?'selected':''}`}
                  onClick={()=>setInsuranceInfo(val)}
                >
                  {val==='yes'?'–î–∞':'–ù–µ—Ç'}
                </button>
              ))}
            </div>
          </div>
        </>
      );
    }

    // === –®–∞–≥ 2 ===
    if (currentStep === 2) {
      if (insuranceInfo==='yes') {
        return (
          <>
            <div className="form-group">
              <label className="form-label">–°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è (–ª–µ—Ç):</label>
              <select
                className="insurance-term-select"
                value={insuranceTerm}
                onChange={e=>setInsuranceTerm(e.target.value)}
              >
                {Array.from({length:30},(_,i)=>(i+1)).map(y=>(
                  <option key={y} value={y}>{y}</option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label className="form-label">–°—É–º–º–∞ (–æ—Ç 1 –º–ª–Ω):</label>
              <input
                type="text"
                className="insurance-sum-input"
                placeholder="1.000.000"
                value={insuranceSum}
                onChange={handleSumChange}
              />
            </div>
            <div className="form-group">
              <label className="form-label">–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã:</label>
              <select
                className="insurance-frequency-select"
                value={insuranceFrequency}
                onChange={e=>setInsuranceFrequency(e.target.value)}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥</option>
                {["–ï–∂–µ–º–µ—Å—è—á–Ω–æ","–ï–∂–µ–≥–æ–¥–Ω–æ","–†–∞–∑ –≤ –ø–æ–ª–≥–æ–¥–∞","–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ"].map(o=>(
                  <option key={o} value={o}>{o}</option>
                ))}
              </select>
            </div>
          </>
        );
      } else {
        // –≤–µ—Ç–∫–∞ no
        return (
          <>
            <div className="form-group">
              <label className="form-label">–ï—Å—Ç—å —Ä–∞–±–æ—Ç–∞?</label>
              <div className="insurance-options">
                {['yes','no'].map(v=>(
                  <button
                    key={v}
                    className={`insurance-btn ${hasJob===v?'selected':''}`}
                    onClick={()=>setHasJob(v)}
                  >
                    {v==='yes'?'–î–∞':'–ù–µ—Ç'}
                  </button>
                ))}
              </div>
            </div>
            {[
              {label:"–î–æ—Ö–æ–¥ 2021, —Ä—É–±.",    value:income2021,   onChange:handleIncome2021Change},
              {label:"–î–æ—Ö–æ–¥ 2022, —Ä—É–±.",    value:income2022,   onChange:handleIncome2022Change},
              {label:"–î–æ—Ö–æ–¥ 2023, —Ä—É–±.",    value:income2023,   onChange:handleIncome2023Change},
              {label:"–°—Ç–∏–ø–µ–Ω–¥–∏—è 2023, —Ä—É–±.",value:scholarship,  onChange:handleScholarshipChange},
              {label:"–ö—Ä–µ–¥–∏—Ç—ã, —Ä—É–±.",       value:unsecuredLoans,onChange:handleUnsecuredLoansChange},
            ].map(({label,value,onChange})=>(
              <div className="form-group inline-group" key={label}>
                <label className="inline-label">{label}</label>
                <input
                  type="text"
                  className="inline-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ"
                  value={value}
                  onChange={onChange}
                />
              </div>
            ))}
          </>
        );
      }
    }

    // === –®–∞–≥ 3 ===
    if (currentStep === 3) {
      if (insuranceInfo==='yes') {
        return (
          <>
            {/* –ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π */}
            <div className="form-group">
              <label className="form-label">–ü–∞–∫–µ—Ç ¬´–ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π¬ª?</label>
              <div className="insurance-options">
                {['yes','no'].map(v=>(
                  <button
                    key={v}
                    className={`insurance-btn ${accidentPackage===v?'selected':''}`}
                    onClick={()=>setAccidentPackage(v)}
                  >
                    {v==='yes'?'–î–∞':'–ù–µ—Ç'}
                  </button>
                ))}
              </div>
            </div>
            {/* –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è */}
            <div className="form-group">
              <label className="form-label">–ü–∞–∫–µ—Ç ¬´–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è¬ª?</label>
              <div className="insurance-options">
                {['yes','no'].map(v=>(
                  <button
                    key={v}
                    className={`insurance-btn ${criticalPackage===v?'selected':''}`}
                    onClick={()=>setCriticalPackage(v)}
                  >
                    {v==='yes'?'–î–∞':'–ù–µ—Ç'}
                  </button>
                ))}
              </div>
            </div>
            {/* –†–µ–≥–∏–æ–Ω –ª–µ—á–µ–Ω–∏—è */}
            {criticalPackage==='yes' && (
              <div className="form-group">
                <label className="form-label">–†–µ–≥–∏–æ–Ω –ª–µ—á–µ–Ω–∏—è:</label>
                <div className="insurance-options">
                  <button
                    className={`insurance-btn ${treatmentRegion==='russia'?'selected':''}`}
                    onClick={()=>setTreatmentRegion('russia')}
                  >
                    –õ–µ—á–µ–Ω–∏–µ –≤ –†–§
                  </button>
                  <button
                    className={`insurance-btn ${treatmentRegion==='abroad'?'selected':''}`}
                    onClick={()=>setTreatmentRegion('abroad')}
                  >
                    –ó–∞ —Ä—É–±–µ–∂–æ–º
                  </button>
                </div>
              </div>
            )}
            {/* –õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–æ—Ä—Ç */}
            <div className="form-group">
              <label className="form-label">–û–ø—Ü–∏—è ¬´–õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–æ—Ä—Ç¬ª?</label>
              <div className="insurance-options">
                {['yes','no'].map(v=>(
                  <button
                    key={v}
                    className={`insurance-btn ${sportPackage===v?'selected':''}`}
                    onClick={()=>setSportPackage(v)}
                  >
                    {v==='yes'?'–î–∞':'–ù–µ—Ç'}
                  </button>
                ))}
              </div>
            </div>
          </>
        );
      } else {
        // –≤–µ—Ç–∫–∞ no: –∫–æ—Ä–º–∏–ª–µ—Ü –∏ —Ç. –¥.
        return (
          <>
            <div className="form-group">
              <label className="form-label">–í—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü?</label>
              <div className="insurance-options">
                {['yes','no','notMe'].map(v=>(
                  <button
                    key={v}
                    className={`insurance-btn ${breadwinnerStatus===v?'selected':''}`}
                    onClick={()=>setBreadwinnerStatus(v)}
                  >
                    {v==='yes'?'–î–∞':v==='no'?'–ù–µ—Ç':'–ù–µ —è–≤–ª—è—é—Å—å'}
                  </button>
                ))}
              </div>
            </div>
            {breadwinnerStatus!=='yes' && (
              <div className="form-group">
                <label className="form-label">
                  –î–æ–ª—è –≤–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –≤ —Å–µ–º–µ–π–Ω–æ–º –±—é–¥–∂–µ—Ç–µ:
                </label>
                <select
                  className="insurance-term-select"
                  value={incomeShare}
                  onChange={e=>setIncomeShare(e.target.value)}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ</option>
                  {[
                    "–¥–æ 10%","10‚Äì24%","25‚Äì49%","50‚Äì74%","75‚Äì89%","–ë–æ–ª–µ–µ 90%"
                  ].map(o=>(
                    <option key={o} value={o}>{o}</option>
                  ))}
                </select>
              </div>
            )}
            <div className="form-group">
              <label className="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –Ω–∞ –∏–∂–¥–∏–≤–µ–Ω–∏–∏?</label>
              <select
                className="insurance-term-select"
                value={childrenCount}
                onChange={e=>setChildrenCount(e.target.value)}
              >
                {["0","1","2","3 –∏ –±–æ–ª–µ–µ"].map(o=>(
                  <option key={o} value={o}>{o}</option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label className="form-label">–ï—Å—Ç—å —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —É—Ö–æ–¥–∞?</label>
              <div className="insurance-options">
                {['yes','no'].map(v=>(
                  <button
                    key={v}
                    className={`insurance-btn ${specialCareRelatives===v?'selected':''}`}
                    onClick={()=>setSpecialCareRelatives(v)}
                  >
                    {v==='yes'?'–î–∞':'–ù–µ—Ç'}
                  </button>
                ))}
              </div>
            </div>
          </>
        );
      }
    }

    // === –®–∞–≥ 4 (—Ä–∞—Å—á—ë—Ç) ===
    if (currentStep === 4) {
      return (
        <div className="processing-container">
          <h2>{userName}, –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ —Ä–∞—Å—á—ë—Ç—É‚Ä¶</h2>
          <div className="loading-spinner" />
        </div>
      );
    }

    return null;
  };

  return (
    <div className="justincase-container" style={{ backgroundImage: `url(${backgroundImage})` }}>
      {/* –ª–æ–≥–æ—Ç–∏–ø */}
      {currentStep !== 5
        ? <div className="logo-container"><img src={logoImage} alt="Logo" className="logo-image"/></div>
        : <div className="logo-container logo-container-final"><img src={logoImage} alt="Logo" className="logo-image"/></div>
      }

      {/* –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
      {currentStep !== 5 && (
        <h1 className="justincase-title">
          –†–∞—Å—á—ë—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        </h1>
      )}

      <div className="justincase-form">
        {renderStep()}
      </div>

      {/* üî∫ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ —à–∞–≥ –Ω–∞–∑–∞–¥) */}
      {currentStep === 1 && (
        <div className="back-btn-container">
          <button className="back-btn mainmenu-btn" onClick={goToMenu}>
            <img src={mainmenuIcon} alt="Menu" />
          </button>
        </div>
      )}
      {currentStep > 1 && currentStep < 5 && (
        <div className="back-btn-container">
          <button className="back-btn" onClick={handlePrev}>
            <svg viewBox="0 0 24 24"><path d="M12 20l-8-8 8-8"/></svg>
          </button>
        </div>
      )}

      {/* –∫–Ω–æ–ø–∫–∞ ¬´–î–∞–ª–µ–µ¬ª */}
      {currentStep < 5 && (
        <div className="top-btn-container">
          <button className="top-btn" onClick={handleNext} disabled={!canGoNext()}>
            <svg viewBox="0 0 24 24"><path d="M12 4l8 8-8 8"/></svg>
          </button>
        </div>
      )}

      {/* –®–∞–≥ 5: –∫–Ω–æ–ø–∫–∏ ¬´–î–æ–º–æ–π¬ª –∏ ¬´–ü–æ–≤—Ç–æ—Ä–∏—Ç—å¬ª */}
      {currentStep === 5 && (
        <>
          <div className="back-btn-container">
            <button className="back-btn mainmenu-btn" onClick={goToMenu}>
              <img src={mainmenuIcon} alt="Menu" />
            </button>
          </div>
          <div className="top-btn-container">
            <button className="top-btn" onClick={repeatCalculation}>
              <svg viewBox="0 0 24 24" fill="currentColor">
                <path d="M17.65 6.35A7.95 7.95 0 0012 4a8 8 0 00-8 8h2.08
                         a5.92 5.92 0 015.92-6 6 6 0 015.65 3.65L13 11h7V4
                         l-2.35 2.35zM6.35 17.65A7.95 7.95 0 0012 20a8 8
                         0 008-8h-2.08a5.92 5.92 0 01-5.92 6 6 6 0
                         01-5.65-3.65L3.41 16.3 2 17.71l2.35-2.35z"/>
              </svg>
            </button>
          </div>
        </>
      )}
    </div>
  );
};

export default JustincasePage;









































