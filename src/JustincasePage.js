import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import logoImage from './components/logo.png';
import DateWheelPicker from './DateWheelPicker';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º CSS —Ñ–∞–π–ª—ã
import './Styles/logo.css';
import './Styles/cards.css';
import './Styles/text.css';
import './Styles/buttons.css';
import './Styles/BackButton.css';
import './Styles/HomeButton.css';
import './Styles/containers.css';
import './Styles/ProgressIndicator.css';
import './Styles/NextButton.css';

const JustincasePage = () => {
  const navigate = useNavigate();
  const [userName, setUserName] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π
  const [logoAnimated, setLogoAnimated] = useState(false);
  const [contentAnimated, setContentAnimated] = useState(false);
  const [isExiting, setIsExiting] = useState(false);

  // ===== –°–û–°–¢–û–Ø–ù–ò–Ø EMAIL =====
  const [stage, setStage] = useState('email');
  const [email, setEmail] = useState('');
  const [emailError, setEmailError] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [birthDate, setBirthDate] = useState(null);
  const [gender, setGender] = useState(null);
  const [insuranceInfo, setInsuranceInfo] = useState(null);
  const [insuranceTerm, setInsuranceTerm] = useState('1');
  const [insuranceSum, setInsuranceSum] = useState('');
  const [insuranceFrequency, setInsuranceFrequency] = useState('');

  const [accidentPackage, setAccidentPackage] = useState(null);
  const [criticalPackage, setCriticalPackage] = useState(null);
  const [treatmentRegion, setTreatmentRegion] = useState(null);
  const [sportPackage, setSportPackage] = useState(null);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤–µ—Ç–∫–∏ "–Ω–µ –∑–Ω–∞–µ—Ç —Å—É–º–º—É"
  const [hasJob, setHasJob] = useState(null);
  const [income2022, setIncome2022] = useState('');
  const [income2023, setIncome2023] = useState('');
  const [income2024, setIncome2024] = useState('');
  const [scholarship, setScholarship] = useState('');
  const [unsecuredLoans, setUnsecuredLoans] = useState('0');

  const [breadwinnerStatus, setBreadwinnerStatus] = useState(null);
  const [incomeShare, setIncomeShare] = useState('');
  const [childrenCount, setChildrenCount] = useState('');
  const [specialCareRelatives, setSpecialCareRelatives] = useState(null);

  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã
  const [recommendedSum, setRecommendedSum] = useState('');
  const [isCalculatingRecommended, setIsCalculatingRecommended] = useState(false);
  const [showRecommendedSum, setShowRecommendedSum] = useState(false);

  const [managerSurname, setManagerSurname] = useState('');
  const [managerName, setManagerName] = useState('');
  const [managerCity, setManagerCity] = useState('');
  const [managerError, setManagerError] = useState('');
  const [isSendingManager, setIsSendingManager] = useState(false);
  const [managerSent, setManagerSent] = useState(false);
  const [resultPage, setResultPage] = useState(0);

  // –®–∞–≥–∏
  const [isProcessing, setIsProcessing] = useState(false);
  const [resultData, setResultData] = useState(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
  const calculateAge = (birthDate) => {
    if (!birthDate) return 35; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const today = new Date();
    const birth = new Date(birthDate);
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
      age--;
    }
    return age;
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    const storedName = localStorage.getItem('userName');
    setUserName(storedName || '–ì–æ—Å—Ç—å');

    // –ê–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => setLogoAnimated(true), 100);
    setTimeout(() => setContentAnimated(true), 600);
  }, []);

  // ===== –í–ê–õ–ò–î–ê–¶–ò–Ø EMAIL =====
  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return false;
    }
    
    const lowerEmail = email.toLowerCase();
    return lowerEmail.endsWith('@vtb.ru') || lowerEmail.endsWith('@rgsl.ru');
  };

  const handleEmailSubmit = () => {
    if (!email) {
      setEmailError('–í–≤–µ–¥–∏—Ç–µ email');
      return;
    }
    
    if (!validateEmail(email)) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        setEmailError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
      } else {
        setEmailError('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É (@vtb.ru –∏–ª–∏ @rgsl.ru)');
      }
      return;
    }
    
    setEmailError('');
    setStage('form1');
  };

  // –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª–µ–π-—Å—É–º–º
  const formatSum = raw => {
    let digits = raw.replace(/\D/g, '');
    if (!digits) return '';
    let out = '';
    while (digits.length > 3) {
      out = '.' + digits.slice(-3) + out;
      digits = digits.slice(0, -3);
    }
    return digits + out;
  };

  const handleSumChange = e => setInsuranceSum(formatSum(e.target.value));
  const handleIncome2022Change = e => setIncome2022(formatSum(e.target.value));
  const handleIncome2023Change = e => setIncome2023(formatSum(e.target.value));
  const handleIncome2024Change = e => setIncome2024(formatSum(e.target.value));
  const handleScholarshipChange = e => setScholarship(formatSum(e.target.value));
  const handleUnsecuredLoansChange = e => setUnsecuredLoans(formatSum(e.target.value));

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã
  const calculateRecommendedSum = async () => {
    setIsCalculatingRecommended(true);
    
    try {
      const payload = {
        birthDate: birthDate ? birthDate.toISOString().split('T')[0] : null,
        hasJob: hasJob,
        income2022: income2022.replace(/\./g, ''),
        income2023: income2023.replace(/\./g, ''),
        income2024: income2024.replace(/\./g, ''),
        scholarship: scholarship.replace(/\./g, ''),
        unsecuredLoans: unsecuredLoans.replace(/\./g, ''),
        breadwinnerStatus: breadwinnerStatus,
        incomeShare: incomeShare,
        childrenCount: childrenCount,
        specialCareRelatives: specialCareRelatives
      };

      console.log('üì§ –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã:', payload);

      const apiUrl = process.env.NODE_ENV === 'development' 
        ? 'http://localhost:4000/api/justincase/recommend-sum'
        : `${window.location.origin}/api/justincase/recommend-sum`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(payload)
      });

      const data = await response.json();
      console.log('üì• –ü–æ–ª—É—á–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞:', data);

      if (response.ok) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        const recommendedSum = data.data?.recommended_sum || data.recommended_sum || data.result;
        const recommendedTerm = data.data?.recommended_term || data.recommended_term || 15;
        if (recommendedSum) {
          setRecommendedSum(formatSum(String(recommendedSum)));
          setInsuranceSum(formatSum(String(recommendedSum)));
          setInsuranceTerm(String(recommendedTerm)); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å—Ä–æ–∫
          setShowRecommendedSum(true);
          setStage('recommended');
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É');
        }
      } else {
        throw new Error(data.error || data.message || '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã');
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –æ–±—ã—á–Ω—É—é —Ñ–æ—Ä–º—É
      setInsuranceSum('1.000.000');
      setStage('recommended');
    } finally {
      setIsCalculatingRecommended(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatNumber = (value) => {
    if (!value) return '0';
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç—å—é
    let numValue = parseFloat(value);
    if (isNaN(numValue)) return '0';
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ (–ø—Ä–µ–º–∏–∏ –≤ —Ä—É–±–ª—è—Ö –æ–±—ã—á–Ω–æ —Ü–µ–ª—ã–µ)
    numValue = Math.round(numValue);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    return numValue.toString().replace(/(\d)(?=(\d{3})+$)/g, '$1 ');
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
  const parseUserSum = (value) => {
    if (!value) return '';
    // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const cleanValue = value.toString().replace(/[.\s]/g, '');
    return cleanValue;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
  const canGoNext = () => {
    if (stage === 'email') {
      return email && email.length >= 3;
    }
    if (stage === 'form1') {
      return birthDate && gender && insuranceInfo;
    }
    if (stage === 'form2') {
      return insuranceInfo === 'yes'
        ? (insuranceTerm && insuranceSum && insuranceFrequency)
        : (hasJob && income2022 && income2023 && income2024 && (hasJob !== 'student' || scholarship));
    }
    if (stage === 'form3') {
      if (insuranceInfo === 'yes') {
        return accidentPackage && criticalPackage && (criticalPackage === 'no' || treatmentRegion) && sportPackage;
      } else {
        return breadwinnerStatus &&
               (breadwinnerStatus === 'yes' || breadwinnerStatus === 'not_breadwinner' || incomeShare) &&
               childrenCount &&
               specialCareRelatives;
      }
    }
    if (stage === 'recommended') {
      return insuranceSum && insuranceTerm && insuranceFrequency;
    }
    return true;
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä—ë–¥
  const handleNext = () => {
    if (!canGoNext()) {
      alert('–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞');
      return;
    }

    if (stage === 'email') {
      handleEmailSubmit();
    } else if (stage === 'form1') {
      setStage('form2');
    } else if (stage === 'form2') {
      setStage('form3');
    } else if (stage === 'form3') {
      if (insuranceInfo === 'no') {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
        calculateRecommendedSum();
      } else {
        doCalculation();
      }
    } else if (stage === 'recommended') {
      doCalculation();
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥
  const handlePrev = () => {
    switch (stage) {
      case 'email':
        navigate('/main-menu');
        break;
      case 'form1':
        setStage('email');
        break;
      case 'form2':
        setStage('form1');
        break;
      case 'form3':
        setStage('form2');
        break;
      case 'recommended':
        setStage('form3');
        break;
      case 'result':
        setStage(insuranceInfo === 'no' ? 'recommended' : 'form3');
        break;
      default:
        navigate('/main-menu');
    }
  };

  // –°–±—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–∞—Å—á—ë—Ç
  const repeatCalculation = () => {
    setBirthDate(null); setGender(null); setInsuranceInfo(null);
    setInsuranceTerm('1'); setInsuranceSum(''); setInsuranceFrequency('');
    setAccidentPackage(null); setCriticalPackage(null); setTreatmentRegion(null); setSportPackage(null);
    setHasJob(null); setIncome2022(''); setIncome2023(''); setIncome2024('');
    setScholarship(''); setUnsecuredLoans('0');
    setBreadwinnerStatus(null); setIncomeShare(''); setChildrenCount(''); setSpecialCareRelatives(null);
    setResultData(null); setIsProcessing(false); setStage('form1');
    setRecommendedSum(''); setShowRecommendedSum(false);
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
  const goToMenu = () => {
    setIsExiting(true);
    setTimeout(() => {
      navigate('/main-menu');
    }, 700);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±—ç–∫–µ–Ω–¥
  const doCalculation = async () => {
    setIsProcessing(true);
    setStage('processing');
  
    try {
      const payload = {
        email: email,
        birthDate: birthDate ? birthDate.toISOString().split('T')[0] : null,
        gender: gender === '–ú—É–∂—Å–∫–æ–π' ? 'male' : 'female',
        insuranceInfo: insuranceInfo === 'no' ? 'yes' : insuranceInfo, // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 'yes' –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        insuranceTerm: parseInt(insuranceTerm),
        insuranceSum: insuranceSum ? insuranceSum.replace(/\./g, '') : '',
        insuranceFrequency,
        accidentPackage,
        criticalPackage,
        treatmentRegion,
        sportPackage,
        hasJob,
        income2022,
        income2023,
        income2024,
        scholarship,
        unsecuredLoans,
        breadwinnerStatus,
        incomeShare,
        childrenCount,
        specialCareRelatives
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞—Å—á–µ—Ç:', payload);
      console.log('üîç –õ–æ–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤:', {
        accidentPackage,
        criticalPackage,
        treatmentRegion,
        sportPackage
      });

      const apiUrl = process.env.NODE_ENV === 'development' 
        ? 'http://localhost:4000/api/proxy/calculator/save'
        : `${window.location.origin}/api/proxy/calculator/save`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(payload)
      });

      const data = await response.json();
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', data);

      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞');
      }

      let processedData;
      
      if (data.success && data.calculation_result) {
        const calc = data.calculation_result;
        
        processedData = {
          success: true,
          calculationDate: new Date().toLocaleDateString('ru-RU'),
          clientAge: calc.clientAge || 35,
          clientGender: calc.clientGender || (gender === '–ú—É–∂—Å–∫–æ–π' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'),
          insuranceTerm: calc.insuranceTerm || insuranceTerm,
          baseInsuranceSum: formatNumber(calc.baseInsuranceSum || calc.insuranceSum || insuranceSum),
          basePremium: formatNumber(calc.basePremium || calc.basePremiumAmount || calc.annualPremium || '0'),
          basePremiumRaw: calc.basePremium || calc.basePremiumAmount || calc.annualPremium || 0, // –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
          accidentPackageIncluded: accidentPackage === 'yes',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          accidentInsuranceSum: formatNumber(calc.accidentInsuranceSum || calc.accidentDetails?.insuranceSum || insuranceSum),
          accidentPremium: formatNumber(calc.accidentPremium || calc.accidentDetails?.premium || '0'),
          criticalPackageIncluded: criticalPackage === 'yes',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          criticalInsuranceSum: formatNumber(calc.criticalInsuranceSum || calc.criticalDetails?.insuranceSum || '60 000 000'),
          criticalPremium: formatNumber(calc.criticalPremium || calc.criticalDetails?.premium || '0'),
          totalPremium: formatNumber(calc.totalPremium || calc.annualPremium || '0'),
          treatmentRegion: treatmentRegion || calc.treatmentRegion,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          sportPackage: sportPackage === 'yes',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          calculationId: calc.calculationId || data.calculation_id || 'unknown',
          calculator: data.calculator || 'JustincaseCalculatorComplete',
          version: data.version || '2.0.0'
        };
      } else if (data.success) {
        processedData = {
          ...data,
          clientAge: data.clientAge || 35,
          clientGender: data.clientGender || (gender === '–ú—É–∂—Å–∫–æ–π' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'),
          insuranceTerm: data.insuranceTerm || insuranceTerm,
          baseInsuranceSum: formatNumber(data.baseInsuranceSum || insuranceSum),
          basePremium: formatNumber(data.basePremium || '0'),
          basePremiumRaw: data.basePremium || 0, // –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
          totalPremium: formatNumber(data.totalPremium || '0'),
          accidentPackageIncluded: accidentPackage === 'yes',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          accidentInsuranceSum: formatNumber(data.accidentInsuranceSum || insuranceSum),
          accidentPremium: formatNumber(data.accidentPremium || '0'),
          criticalPackageIncluded: criticalPackage === 'yes',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          criticalPremium: formatNumber(data.criticalPremium || '0'),
          treatmentRegion: treatmentRegion,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          sportPackage: sportPackage === 'yes'  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        };
      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞');
      }
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', processedData);
      console.log('üìä –§–ª–∞–≥–∏ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', {
        accidentPackageIncluded: processedData.accidentPackageIncluded,
        criticalPackageIncluded: processedData.criticalPackageIncluded,
        treatmentRegion: processedData.treatmentRegion,
        sportPackage: processedData.sportPackage
      });
      
      setResultData(processedData);
      setStage('result');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: ${error.message}`);
      setStage('form3');
    } finally {
      setIsProcessing(false);
    }
  };

  // –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —à–∞–≥–∞
  const renderStep = () => {
    // Email —ç—Ç–∞–ø
    if (stage === 'email') {
      return (
        <div className={`card-container card-positioned ${contentAnimated ? 'animated' : ''}`}>
          <div className="card-header">
            <h1 className="text-h1-dark text-center">–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π</h1>
            <p className="text-body-dark text-center">
              –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–∏—Å–∫–æ–≤
            </p>
          </div>
          
          <div className="form-group">
            <label className="form-label text-label-large">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email</label>
            <input
              type="email"
              className={`form-input ${emailError ? 'error' : ''}`}
              value={email}
              onChange={(e) => {
                setEmail(e.target.value);
                if (emailError) setEmailError('');
              }}
              placeholder="example@vtb.ru"
            />
            {emailError && <span className="form-error">{emailError}</span>}
          </div>
        </div>
      );
    }

    if (stage === 'processing' || isCalculatingRecommended) {
      return (
        <div className={`card-container card-positioned ${contentAnimated ? 'animated' : ''}`}>
          <h2 className="text-h2 text-center">
            {isCalculatingRecommended 
              ? '–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è...'
              : `–ò–¥—ë—Ç —Ä–∞—Å—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...`
            }
          </h2>
          <div className="progress-indicator-wrapper">
            <div className="assessment-spinner" />
          </div>
        </div>
      );
    }

    // –≠–∫—Ä–∞–Ω —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
    if (stage === 'recommended') {
      return (
        <div className={`card-container card-positioned scrollable ${contentAnimated ? 'animated' : ''}`}>
          <div className="card-content">
            <h2 className="text-h2">–†–∞—Å—á–µ—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ <br/>"–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π"</h2>
            <p className="text-body-dark text-center">
              –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º—ã —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
            </p>
            
            <div className="recommended-sum-display">
              <p className="text-label-large">–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞:</p>
              <p className="text-h1-dark">{recommendedSum} —Ä—É–±.</p>
            </div>

            <div className="form-group">
              <label className="form-label">
                –°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è: <span className="form-value-highlight">{insuranceTerm} –ª–µ—Ç</span>
              </label>
              <div className="range-container">
                <input
                  type="range"
                  min="1"
                  max="30"
                  value={insuranceTerm}
                  onChange={(e) => setInsuranceTerm(e.target.value)}
                  className="range-input"
                  style={{'--range-progress': `${((insuranceTerm - 1) / 29) * 100}%`}}
                />
                <span className="range-value">{insuranceTerm}</span>
              </div>
            </div>

            <div className="form-group">
              <label className="form-label">–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ (—Ä—É–±.)</label>
              <input
                type="text"
                className="form-input"
                value={insuranceSum}
                onChange={handleSumChange}
                placeholder="–ú–∏–Ω–∏–º—É–º 1.000.000"
              />
              <p className="text-small text-center" style={{marginTop: '8px'}}>
                –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
              </p>
            </div>

            <div className="form-group">
              <label className="form-label">–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã</label>
              <div className="option-buttons horizontal-always">
                <button
                  className={`option-button ${insuranceFrequency === '–ï–∂–µ–≥–æ–¥–Ω–æ' ? 'selected' : ''}`}
                  onClick={() => setInsuranceFrequency('–ï–∂–µ–≥–æ–¥–Ω–æ')}
                >
                  –ï–∂–µ–≥–æ–¥–Ω–æ
                </button>
                <button
                  className={`option-button ${insuranceFrequency === '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' ? 'selected' : ''}`}
                  onClick={() => setInsuranceFrequency('–ï–∂–µ–º–µ—Å—è—á–Ω–æ')}
                >
                  –ï–∂–µ–º–µ—Å—è—á–Ω–æ
                </button>
              </div>
              <div className="option-buttons horizontal-always">
                <button
                  className={`option-button ${insuranceFrequency === '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ' ? 'selected' : ''}`}
                  onClick={() => setInsuranceFrequency('–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ')}
                >
                  –ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ
                </button>
                <button
                  className={`option-button ${insuranceFrequency === '–ü–æ–ª—É–≥–æ–¥–∏–µ' ? 'selected' : ''}`}
                  onClick={() => setInsuranceFrequency('–ü–æ–ª—É–≥–æ–¥–∏–µ')}
                >
                  –†–∞–∑ –≤ –ø–æ–ª –≥–æ–¥–∞
                </button>
              </div>
            </div>
          </div>
        </div>
      );
    }

    // –®–∞–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (stage === 'result' && resultData) {
      const carouselPages = [
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ (–°–º–µ—Ä—Ç—å –õ–ü + –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å + –ò—Ç–æ–≥)
        (
          <div key="main-risks">
            <h2 className="text-h2 text-center">
              –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ <br/>¬´–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π¬ª
            </h2>
            <p className="text-small text-center">
              (—Ä–∞—Å—á–µ—Ç –æ—Ç {resultData.calculationDate || new Date().toLocaleDateString('ru-RU')})
            </p>
            <div className="result-section">
              <h3 className="text-h3">–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</h3>
              <p className="text-small">
                –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π —É—Ö–æ–¥–∞ –∏–∑ –∂–∏–∑–Ω–∏ –∏ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ I –∏ II –≥—Ä—É–ø–ø—ã –ø–æ –ª—é–±–æ–π –ø—Ä–∏—á–∏–Ω–µ
              </p>

              {/* –°–º–µ—Ä—Ç—å –õ–ü */}
              <div className="result-item-split">
                <span className="result-label-left">‚Ä¢ –°–º–µ—Ä—Ç—å –õ–ü:</span>
                <span className="result-value-right">
                  {formatNumber(Math.round(resultData.deathPremium || 0))} —Ä—É–±.
                </span>
              </div>

              {/* –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å */}
              <div className="result-item-split">
                <span className="result-label-left">‚Ä¢ –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å 1,2 –≥—Ä.:</span>
                <span className="result-value-right">
                  {formatNumber(Math.round(resultData.disabilityPremium || 0))} —Ä—É–±.
                </span>
              </div>

              <div className="result-divider"></div>

              {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–∏—Å–∞ */}
              <div className="result-item-split highlight">
                <span className="result-label-left"><strong>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–∏—Å–∞:</strong></span>
                <span className="result-value-right">
                  <strong>{formatNumber(resultData.totalPremium || resultData.annualPremium)} —Ä—É–±.</strong>
                </span>
              </div>

              <div className="result-divider"></div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ */}
              <div className="result-item-split">
                <span className="result-label-left">–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞:</span>
                <span className="result-value-right">
                  {resultData.baseInsuranceSum || parseUserSum(resultData.insuranceSum)} —Ä—É–±.
                </span>
              </div>
              <div className="result-item-split">
                <span className="result-label-left">–°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è:</span>
                <span className="result-value-right">{resultData.insuranceTerm} –ª–µ—Ç</span>
              </div>
              <div className="result-item-split">
                <span className="result-label-left">–ü–æ—Ä—è–¥–æ–∫ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏–∏:</span>
                <span className="result-value-right">{insuranceFrequency || '–ï–∂–µ–≥–æ–¥–Ω–æ'}</span>
              </div>
            </div>
          </div>
        ),

        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ (–ù–° + –õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–æ—Ä—Ç)
        (
          <div key="additional-risks">
            <div className="result-section">
              <h3 className="text-h3">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏</h3>

              {/* –ü–∞–∫–µ—Ç "–ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π" */}
              {resultData.accidentPackageIncluded ? (
                <>
                  <h4 className="text-h4">–ü–∞–∫–µ—Ç ¬´–ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π¬ª</h4>
                  <div className="result-item-split">
                    <span className="result-label-left">‚Ä¢ –°–º–µ—Ä—Ç—å –ù–°:</span>
                    <span className="result-value-right">
                      {formatNumber(Math.round(resultData.accidentDeathPremium || (resultData.accidentPremium * 0.4) || 0))} —Ä—É–±.
                    </span>
                  </div>
                  <div className="result-item-split">
                    <span className="result-label-left">‚Ä¢ –°–º–µ—Ä—Ç—å –î–¢–ü:</span>
                    <span className="result-value-right">
                      {formatNumber(Math.round(resultData.trafficDeathPremium || (resultData.accidentPremium * 0.3) || 0))} —Ä—É–±.
                    </span>
                  </div>
                  <div className="result-item-split">
                    <span className="result-label-left">‚Ä¢ –¢—Ä–∞–≤–º—ã:</span>
                    <span className="result-value-right">
                      {formatNumber(Math.round(resultData.injuryPremium || (resultData.accidentPremium * 0.3) || 0))} —Ä—É–±.
                    </span>
                  </div>
                  <div className="result-item-split">
                    <span className="result-label-left">–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ –ù–°:</span>
                    <span className="result-value-right">
                      {resultData.accidentInsuranceSum || parseUserSum(resultData.insuranceSum)} —Ä—É–±.
                    </span>
                  </div>
                </>
              ) : (
                <p className="text-small">–ü–∞–∫–µ—Ç ¬´–ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π¬ª –Ω–µ –≤–∫–ª—é—á—ë–Ω</p>
              )}

              <div className="result-divider"></div>

              {/* –ü–∞–∫–µ—Ç "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è" */}
              {resultData.criticalPackageIncluded ? (
                <>
                  <h4 className="text-h4">
                    –ü–∞–∫–µ—Ç ¬´–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
                    {resultData.treatmentRegion === 'russia' ? ' (–ª–µ—á–µ–Ω–∏–µ –≤ –†–§)' : ' (–ª–µ—á–µ–Ω–∏–µ –∑–∞ —Ä—É–±–µ–∂–æ–º)'}¬ª
                  </h4>
                  <div className="result-item-split">
                    <span className="result-label-left">‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã:</span>
                    <span className="result-value-right">
                      {formatNumber(resultData.criticalPremium)} —Ä—É–±.
                    </span>
                  </div>
                  <div className="result-item-split">
                    <span className="result-label-left">‚Ä¢ –ó–∞—â–∏—Ç–∞:</span>
                    <span className="result-value-right">
                      60 000 000 —Ä—É–±.
                    </span>
                  </div>
                  <div className="result-item-split">
                    <span className="result-label-left">‚Ä¢ –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è:</span>
                    <span className="result-value-right">
                      400 000 —Ä—É–±.
                    </span>
                  </div>
                </>
              ) : (
                <p className="text-small">–ü–∞–∫–µ—Ç ¬´–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è¬ª –Ω–µ –≤–∫–ª—é—á—ë–Ω</p>
              )}

              <div className="result-divider"></div>

              {/* –û–ø—Ü–∏—è "–õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–æ—Ä—Ç" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ */}
              {resultData.sportPackage && (
                <>
                  <h4 className="text-h4">–û–ø—Ü–∏—è ¬´–õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–æ—Ä—Ç¬ª</h4>
                  <p className="text-small">
                    ‚úÖ –í–∫–ª—é—á–µ–Ω–∞ (—É—á—Ç–µ–Ω–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–µ–º–∏–π –ù–°)
                  </p>
                </>
              )}
            </div>
          </div>
        )
      ];

  return (
    <div className={`card-container card-positioned card-results scrollable ${contentAnimated ? 'animated' : ''}`}>
      {carouselPages[resultPage]}
      
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ */}
      <div className="carousel-navigation-bottom">
        {resultPage > 0 ? (
          <button
            type="button"
            className="carousel-arrow carousel-arrow-left"
            onClick={() => setResultPage(resultPage - 1)}
            aria-label="–ù–∞–∑–∞–¥"
          >
            <svg viewBox="0 0 24 24" width="20" height="20">
              <path d="M15 18l-6-6 6-6" stroke="#7B7B7B" strokeWidth="2.5" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>
        ) : (
          <span className="carousel-arrow-placeholder" />
        )}

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü */}
        <div className="page-indicators">
          {carouselPages.map((_, index) => (
            <button
              key={index}
              className={`page-indicator ${index === resultPage ? 'active' : ''}`}
              onClick={() => setResultPage(index)}
              aria-label={`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${index + 1}`}
            />
          ))}
        </div>

        {resultPage < carouselPages.length - 1 ? (
          <button
            type="button"
            className="carousel-arrow carousel-arrow-right"
            onClick={() => setResultPage(resultPage + 1)}
            aria-label="–í–ø–µ—Ä—ë–¥"
          >
            <svg viewBox="0 0 24 24" width="20" height="20">
              <path d="M9 18l6-6-6-6" stroke="#7B7B7B" strokeWidth="2.5" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>
        ) : (
          <span className="carousel-arrow-placeholder" />
        )}
      </div>
      <div className="button-group">
        <button 
          className="btn-universal btn-primary btn-medium" 
          onClick={() => setStage('manager')}
        >
          –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        </button>
      </div>
    </div>
  );
}

    // –®–∞–≥ 1 - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (stage === 'form1') {
      return (
        <div className={`card-container card-positioned ${contentAnimated ? 'animated' : ''}`}>
          <h2 className="text-h2">–†–∞—Å—á—ë—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π"</h2>
          <p className="text-small text-center">–®–∞–≥ 1 –∏–∑ 3</p>
          
          <div className="form-group">
            <label className="form-label">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</label>
            <DateWheelPicker
              value={{
                day: birthDate ? birthDate.getDate().toString().padStart(2, '0') : '01',
                month: birthDate ? (birthDate.getMonth() + 1).toString().padStart(2, '0') : '01',
                year: birthDate ? birthDate.getFullYear().toString() : new Date().getFullYear().toString()
              }}
              onChange={(val) => {
                if (val?.day && val?.month && val?.year) {
                  const date = new Date(parseInt(val.year), parseInt(val.month) - 1, parseInt(val.day));
                  setBirthDate(date);
                }
              }}
            />
          </div>

          <div className="form-group">
            <label className="form-label">–ü–æ–ª</label>
            <div className="option-buttons horizontal-always">
              <button
                className={`option-button ${gender === '–ú—É–∂—Å–∫–æ–π' ? 'selected' : ''}`}
                onClick={() => setGender('–ú—É–∂—Å–∫–æ–π')}
              >
                –ú—É–∂—Å–∫–æ–π
              </button>
              <button
                className={`option-button ${gender === '–ñ–µ–Ω—Å–∫–∏–π' ? 'selected' : ''}`}
                onClick={() => setGender('–ñ–µ–Ω—Å–∫–∏–π')}
              >
                –ñ–µ–Ω—Å–∫–∏–π
              </button>
            </div>
          </div>

          <div className="form-group">
            <label className="form-label">–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è?</label>
            <div className="option-buttons horizontal-always">
              <button
                className={`option-button ${insuranceInfo === 'yes' ? 'selected' : ''}`}
                onClick={() => setInsuranceInfo('yes')}
              >
                –î–∞
              </button>
              <button
                className={`option-button ${insuranceInfo === 'no' ? 'selected' : ''}`}
                onClick={() => setInsuranceInfo('no')}
              >
                –ù–µ—Ç
              </button>
            </div>
          </div>
        </div>
      );
    }

    // –®–∞–≥ 2 - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
    if (stage === 'form2') {
      return (
        <div className={`card-container card-positioned scrollable ${contentAnimated ? 'animated' : ''}`}>
          <div className="card-content">
            <h2 className="text-h2">
              {insuranceInfo === 'yes' ? '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è' : '–†–∞—Å—á—ë—Ç —Å—É–º–º—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è'}
            </h2>
            <p className="text-small text-center">–®–∞–≥ 2 –∏–∑ 3</p>
            
            {insuranceInfo === 'yes' ? (
              <>
                <div className="form-group">
                  <label className="form-label">
                    –°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è: <span className="form-value-highlight">{insuranceTerm} –ª–µ—Ç</span>
                  </label>
                  <div className="range-container">
                    <input
                      type="range"
                      min="1"
                      max="30"
                      value={insuranceTerm}
                      onChange={(e) => setInsuranceTerm(e.target.value)}
                      className="range-input"
                      style={{'--range-progress': `${((insuranceTerm - 1) / 29) * 100}%`}}
                    />
                    <span className="range-value">{insuranceTerm}</span>
                  </div>
                </div>

                <div className="form-group">
                  <label className="form-label">–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ (—Ä—É–±.)</label>
                  <input
                    type="text"
                    className="form-input"
                    value={insuranceSum}
                    onChange={handleSumChange}
                    placeholder="–ú–∏–Ω–∏–º—É–º 1.000.000"
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã</label>
                  <div className="option-buttons horizontal-always">
                    <button
                      className={`option-button ${insuranceFrequency === '–ï–∂–µ–≥–æ–¥–Ω–æ' ? 'selected' : ''}`}
                      onClick={() => setInsuranceFrequency('–ï–∂–µ–≥–æ–¥–Ω–æ')}
                    >
                      –ï–∂–µ–≥–æ–¥–Ω–æ
                    </button>
                    <button
                      className={`option-button ${insuranceFrequency === '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' ? 'selected' : ''}`}
                      onClick={() => setInsuranceFrequency('–ï–∂–µ–º–µ—Å—è—á–Ω–æ')}
                    >
                      –ï–∂–µ–º–µ—Å—è—á–Ω–æ
                    </button>
                  </div>
                  <div className="option-buttons horizontal-always">
                    <button
                      className={`option-button ${insuranceFrequency === '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ' ? 'selected' : ''}`}
                      onClick={() => setInsuranceFrequency('–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ')}
                    >
                      –ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ
                    </button>
                    <button
                      className={`option-button ${insuranceFrequency === '–ü–æ–ª—É–≥–æ–¥–∏–µ' ? 'selected' : ''}`}
                      onClick={() => setInsuranceFrequency('–ü–æ–ª—É–≥–æ–¥–∏–µ')}
                    >
                      –†–∞–∑ –≤ –ø–æ–ª –≥–æ–¥–∞
                    </button>
                  </div>
                </div>
              </>
            ) : (
              <>
                <div className="form-group">
                  <label className="form-label">–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ä–∞–±–æ—Ç–∞?</label>
                  <select
                    className="form-input"
                    value={hasJob || ''}
                    onChange={(e) => setHasJob(e.target.value)}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç</option>
                    <option value="yes">–î–∞</option>
                    <option value="no">–ù–µ—Ç</option>
                    <option value="student">–†–∞–±–æ—Ç–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç</option>
                  </select>
                </div>

                <div className="form-group">
                  <label className="form-label">–î–æ—Ö–æ–¥—ã 2022 –≥. (—Ä—É–±.)</label>
                  <input
                    type="text"
                    className="form-input"
                    value={income2022}
                    onChange={handleIncome2022Change}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">–î–æ—Ö–æ–¥—ã 2023 –≥. (—Ä—É–±.)</label>
                  <input
                    type="text"
                    className="form-input"
                    value={income2023}
                    onChange={handleIncome2023Change}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">–î–æ—Ö–æ–¥—ã 2024 –≥. (—Ä—É–±.)</label>
                  <input
                    type="text"
                    className="form-input"
                    value={income2024}
                    onChange={handleIncome2024Change}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">–ï—Å—Ç—å –ª–∏ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ (–Ω–µ–∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω—ã–µ) –∫—Ä–µ–¥–∏—Ç—ã? (—Ä—É–±.)</label>
                  <input
                    type="text"
                    className="form-input"
                    value={unsecuredLoans}
                    onChange={handleUnsecuredLoansChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ 0 –µ—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–µ—Ç"
                  />
                </div>

                {hasJob === 'student' && (
                  <div className="form-group">
                    <label className="form-label">–†–∞–∑–º–µ—Ä —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–¥ (—Ä—É–±.)</label>
                    <input
                      type="text"
                      className="form-input"
                      value={scholarship}
                      onChange={handleScholarshipChange}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∏–ø–µ–Ω–¥–∏–∏"
                    />
                  </div>
                )}
              </>
            )}
          </div>
        </div>
      );
    }

    // –®–∞–≥ 3 - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    if (stage === 'form3') {
      return (
        <div className={`card-container card-positioned scrollable ${contentAnimated ? 'animated' : ''}`}>
          <div className="card-content">
            <h2 className="text-h2">
              {insuranceInfo === 'yes' ? '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã' : '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}
            </h2>
            <p className="text-small text-center">–®–∞–≥ 3 –∏–∑ 3</p>
            
            {insuranceInfo === 'yes' ? (
              <>
                <div className="form-group">
                  <label className="form-label">–ü–∞–∫–µ—Ç ¬´–ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π¬ª</label>
                  <div className="option-buttons horizontal-always">
                    <button
                      className={`option-button ${accidentPackage === 'yes' ? 'selected' : ''}`}
                      onClick={() => setAccidentPackage('yes')}
                    >
                      –í–∫–ª—é—á–∏—Ç—å
                    </button>
                    <button
                      className={`option-button ${accidentPackage === 'no' ? 'selected' : ''}`}
                      onClick={() => setAccidentPackage('no')}
                    >
                      –ù–µ –≤–∫–ª—é—á–∞—Ç—å
                    </button>
                  </div>
                </div>

                <div className="form-group">
                  <label className="form-label">–ü–∞–∫–µ—Ç ¬´–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è¬ª</label>
                  <div className="option-buttons horizontal-always">
                    <button
                      className={`option-button ${criticalPackage === 'yes' ? 'selected' : ''}`}
                      onClick={() => setCriticalPackage('yes')}
                    >
                      –í–∫–ª—é—á–∏—Ç—å
                    </button>
                    <button
                      className={`option-button ${criticalPackage === 'no' ? 'selected' : ''}`}
                      onClick={() => setCriticalPackage('no')}
                    >
                      –ù–µ –≤–∫–ª—é—á–∞—Ç—å
                    </button>
                  </div>
                </div>

                {criticalPackage === 'yes' && (
                  <div className="form-group">
                    <label className="form-label">–†–µ–≥–∏–æ–Ω –ª–µ—á–µ–Ω–∏—è</label>
                    <div className="option-buttons horizontal-always">
                      <button
                        className={`option-button ${treatmentRegion === 'russia' ? 'selected' : ''}`}
                        onClick={() => setTreatmentRegion('russia')}
                      >
                        –†–æ—Å—Å–∏—è
                      </button>
                      <button
                        className={`option-button ${treatmentRegion === 'abroad' ? 'selected' : ''}`}
                        onClick={() => setTreatmentRegion('abroad')}
                      >
                        –ó–∞ —Ä—É–±–µ–∂–æ–º
                      </button>
                    </div>
                  </div>
                )}

                <div className="form-group">
                  <label className="form-label">–õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–æ—Ä—Ç</label>
                  <div className="option-buttons horizontal-always">
                    <button
                      className={`option-button ${sportPackage === 'yes' ? 'selected' : ''}`}
                      onClick={() => setSportPackage('yes')}
                    >
                      –í–∫–ª—é—á–∏—Ç—å
                    </button>
                    <button
                      className={`option-button ${sportPackage === 'no' ? 'selected' : ''}`}
                      onClick={() => setSportPackage('no')}
                    >
                      –ù–µ –≤–∫–ª—é—á–∞—Ç—å
                    </button>
                  </div>
                </div>
              </>
            ) : (
              <>
                <div className="form-group">
                  <label className="form-label">–í—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü –≤ —Å–µ–º—å–µ?</label>
                  <select
                    className="form-input"
                    value={breadwinnerStatus || ''}
                    onChange={(e) => setBreadwinnerStatus(e.target.value)}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç</option>
                    <option value="yes">–î–∞</option>
                    <option value="no">–ù–µ—Ç</option>
                    <option value="not_breadwinner">–ù–µ —è–≤–ª—è—é—Å—å –∫–æ—Ä–º–∏–ª—å—Ü–µ–º</option>
                  </select>
                </div>

                {breadwinnerStatus === 'no' && (
                  <div className="form-group">
                    <label className="form-label">–î–æ–ª—è –≤–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –≤ —Å–µ–º–µ–π–Ω–æ–º –±—é–¥–∂–µ—Ç–µ (%)</label>
                    <select
                      className="form-input"
                      value={incomeShare}
                      onChange={(e) => setIncomeShare(e.target.value)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª—é –¥–æ—Ö–æ–¥–∞</option>
                      <option value="–¥–æ 10%">–¥–æ 10%</option>
                      <option value="10-24%">10-24%</option>
                      <option value="25-49%">25-49%</option>
                      <option value="50-74%">50-74%</option>
                      <option value="75-89%">75-89%</option>
                      <option value="–ë–æ–ª–µ–µ 90%">–ë–æ–ª–µ–µ 90%</option>
                    </select>
                  </div>
                )}

                <div className="form-group">
                  <label className="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π</label>
                  <select
                    className="form-input"
                    value={childrenCount}
                    onChange={(e) => setChildrenCount(e.target.value)}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</option>
                    <option value="0">0</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3 –∏ –±–æ–ª–µ–µ">3 –∏ –±–æ–ª–µ–µ</option>
                  </select>
                </div>

                <div className="form-group">
                  <label className="form-label">–ï—Å—Ç—å –ª–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏, –Ω—É–∂–¥–∞—é—â–∏–µ—Å—è –≤ –æ—Å–æ–±–æ–º —É—Ö–æ–¥–µ?</label>
                  <div className="option-buttons horizontal-always">
                    <button
                      className={`option-button ${specialCareRelatives === 'yes' ? 'selected' : ''}`}
                      onClick={() => setSpecialCareRelatives('yes')}
                    >
                      –î–∞
                    </button>
                    <button
                      className={`option-button ${specialCareRelatives === 'no' ? 'selected' : ''}`}
                      onClick={() => setSpecialCareRelatives('no')}
                    >
                      –ù–µ—Ç
                    </button>
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
      );
    }

    return null;
  };

  return (
    <div className={`main-container ${isExiting ? 'exiting' : ''}`}>
      {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤, –∫—Ä–æ–º–µ result */}
      {(stage === 'form2' || stage === 'form3' || stage === 'recommended') && (
        <button className="back-btn animate-home" onClick={handlePrev}>
          <svg viewBox="0 0 24 24">
            <path d="M15 18l-6-6 6-6" stroke="white" strokeWidth="2.5" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </button>
      )}
      
      {/* –î–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Å –¥—Ä—É–≥–∏–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º */}
      {stage === 'result' && (
        <button className="back-btn animate-home" style={{ left: '20px' }} onClick={handlePrev}>
          <svg viewBox="0 0 24 24">
            <path d="M15 18l-6-6 6-6" stroke="white" strokeWidth="2.5" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </button>
      )}
      
      {/* –õ–æ–≥–æ—Ç–∏–ø */}
      <div className={`logo-wrapper ${logoAnimated ? 'animated' : ''}`}>
        <img src={logoImage} alt="Logo" className="logo-image" />
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç" —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      {stage === 'result' && (
        <button
          className="next-btn repeat-btn"
          style={{ right: '20px', left: 'auto' }}
          onClick={repeatCalculation}
          title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç"
        >
          {/* SVG recycle icon */}
          <svg width="20" height="20" viewBox="0 0 28 28" fill="none">
            <path
              d="M4.93 19.07A10 10 0 1 1 21 12"
              stroke="white"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <polyline
              points="22 4 22 12 14 12"
              stroke="white"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              fill="none"
            />
          </svg>
        </button>
      )}

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      {renderStep()}

      {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç—Ç–∞–ø–æ–≤ —É–±—Ä–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ */}

      {stage === 'email' && (
        <button className="home-button" onClick={goToMenu}>
          <svg viewBox="0 0 24 24">
            <path d="M3 11l9-8 9 8v10a1 1 0 0 1-1 1h-5v-7h-6v7H4a1 1 0 0 1-1-1V11z" stroke="white" strokeWidth="2" fill="none"/>
          </svg>
        </button>
      )}

      {(stage === 'email' || stage === 'form1' || stage === 'form2' || stage === 'form3' || stage === 'recommended') && !isProcessing && !isCalculatingRecommended && (
        <button 
          className={`next-btn ${contentAnimated && canGoNext() ? 'animate-next' : ''} ${isExiting ? 'animate-next-exit' : ''} ${!canGoNext() ? 'disabled' : ''}`} 
          onClick={handleNext} 
          disabled={!canGoNext()}
        >
          <div className={`shaker ${contentAnimated && canGoNext() && !isExiting ? 'shake-btn' : ''}`}>
            <svg viewBox="0 0 24 24">
              <path d="M9 18l6-6-6-6" stroke="white" strokeWidth="3" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </div>
        </button>
      )}
    </div>
  );
};

export default JustincasePage;








































/* Force rebuild 08/09/2025 20:01:19 */
