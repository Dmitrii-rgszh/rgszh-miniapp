import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import logoImage from './components/logo.png';
import DateWheelPicker from './DateWheelPicker';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º CSS —Ñ–∞–π–ª—ã
import './Styles/logo.css';
import './Styles/cards.css';
import './Styles/text.css';
import './Styles/buttons.css';
import './Styles/BackButton.css';
import './Styles/HomeButton.css';
import './Styles/containers.css';
import './Styles/ProgressIndicator.css';
import './Styles/NextButton.css';

const JustincasePage = () => {
  const navigate = useNavigate();
  const [userName, setUserName] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π
  const [logoAnimated, setLogoAnimated] = useState(false);
  const [contentAnimated, setContentAnimated] = useState(false);
  const [isExiting, setIsExiting] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [birthDate, setBirthDate] = useState(null);
  const [gender, setGender] = useState(null);
  const [insuranceInfo, setInsuranceInfo] = useState(null);
  const [insuranceTerm, setInsuranceTerm] = useState('1');
  const [insuranceSum, setInsuranceSum] = useState('');
  const [insuranceFrequency, setInsuranceFrequency] = useState('');

  const [accidentPackage, setAccidentPackage] = useState(null);
  const [criticalPackage, setCriticalPackage] = useState(null);
  const [treatmentRegion, setTreatmentRegion] = useState(null);
  const [sportPackage, setSportPackage] = useState(null);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤–µ—Ç–∫–∏ "–Ω–µ –∑–Ω–∞–µ—Ç —Å—É–º–º—É"
  const [hasJob, setHasJob] = useState(null);
  const [income2021, setIncome2021] = useState('');
  const [income2022, setIncome2022] = useState('');
  const [income2023, setIncome2023] = useState('');
  const [scholarship, setScholarship] = useState('');
  const [unsecuredLoans, setUnsecuredLoans] = useState('');

  const [breadwinnerStatus, setBreadwinnerStatus] = useState(null);
  const [incomeShare, setIncomeShare] = useState('');
  const [childrenCount, setChildrenCount] = useState('0');
  const [specialCareRelatives, setSpecialCareRelatives] = useState(null);

  // –®–∞–≥–∏
  const [currentStep, setCurrentStep] = useState(1);
  const [isProcessing, setIsProcessing] = useState(false);
  const [resultData, setResultData] = useState(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    const storedName = localStorage.getItem('userName');
    setUserName(storedName || '–ì–æ—Å—Ç—å');

    // –ê–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => setLogoAnimated(true), 100);
    setTimeout(() => setContentAnimated(true), 600);
  }, []);

  // –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª–µ–π-—Å—É–º–º
  const formatSum = raw => {
    let digits = raw.replace(/\D/g, '');
    if (!digits) return '';
    let out = '';
    while (digits.length > 3) {
      out = '.' + digits.slice(-3) + out;
      digits = digits.slice(0, -3);
    }
    return digits + out;
  };

  const handleSumChange = e => setInsuranceSum(formatSum(e.target.value));
  const handleIncome2021Change = e => setIncome2021(formatSum(e.target.value));
  const handleIncome2022Change = e => setIncome2022(formatSum(e.target.value));
  const handleIncome2023Change = e => setIncome2023(formatSum(e.target.value));
  const handleScholarshipChange = e => setScholarship(formatSum(e.target.value));
  const handleUnsecuredLoansChange = e => setUnsecuredLoans(formatSum(e.target.value));

  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatNumber = (value) => {
    if (!value) return '0';
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    const cleanValue = value.toString().replace(/[^\d]/g, '');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    return cleanValue.replace(/(\d)(?=(\d{3})+$)/g, '$1 ');
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
  const canGoNext = () => {
    if (currentStep === 1) {
      return birthDate && gender && insuranceInfo;
    }
    if (currentStep === 2) {
      return insuranceInfo === 'yes'
        ? (insuranceTerm && insuranceSum && insuranceFrequency)
        : (hasJob && income2021 && income2022 && income2023);
    }
    if (currentStep === 3) {
      if (insuranceInfo === 'yes') {
        return accidentPackage && criticalPackage && (criticalPackage === 'no' || treatmentRegion) && sportPackage;
      } else {
        return breadwinnerStatus &&
               (breadwinnerStatus === 'yes' || incomeShare) &&
               childrenCount !== '' &&
               specialCareRelatives;
      }
    }
    return true;
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä—ë–¥
  const handleNext = () => {
    if (!canGoNext()) {
      alert('–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞');
      return;
    }
    if (currentStep < 3) {
      setCurrentStep(s => s + 1);
    } else if (currentStep === 3) {
      doCalculation();
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥
  const handlePrev = () => {
    if (currentStep > 1) setCurrentStep(s => s - 1);
  };

  // –°–±—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–∞—Å—á—ë—Ç
  const repeatCalculation = () => {
    setBirthDate(null); setGender(null); setInsuranceInfo(null);
    setInsuranceTerm('1'); setInsuranceSum(''); setInsuranceFrequency('');
    setAccidentPackage(null); setCriticalPackage(null); setTreatmentRegion(null); setSportPackage(null);
    setHasJob(null); setIncome2021(''); setIncome2022(''); setIncome2023('');
    setScholarship(''); setUnsecuredLoans('');
    setBreadwinnerStatus(null); setIncomeShare(''); setChildrenCount('0'); setSpecialCareRelatives(null);
    setResultData(null); setIsProcessing(false); setCurrentStep(1);
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
  const goToMenu = () => {
    setIsExiting(true);
    setTimeout(() => {
      navigate('/main-menu');
    }, 700);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±—ç–∫–µ–Ω–¥
  const doCalculation = async () => {
    setIsProcessing(true);
  
    try {
      const payload = {
        birthDate: birthDate ? birthDate.toISOString().split('T')[0] : null,
        gender: gender === '–ú—É–∂—Å–∫–æ–π' ? 'male' : 'female',
        insuranceInfo,
        insuranceTerm: parseInt(insuranceTerm),
        insuranceSum: insuranceSum ? insuranceSum.replace(/\./g, '') : '',
        insuranceFrequency,
        accidentPackage,
        criticalPackage,
        treatmentRegion,
        sportPackage,
        hasJob,
        income2021,
        income2022,
        income2023,
        scholarship,
        unsecuredLoans,
        breadwinnerStatus,
        incomeShare,
        childrenCount,
        specialCareRelatives
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞—Å—á–µ—Ç:', payload);

      const apiUrl = process.env.NODE_ENV === 'development' 
        ? 'http://localhost:4000/api/proxy/calculator/save'
        : `${window.location.origin}/api/proxy/calculator/save`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(payload)
      });

      const data = await response.json();
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', data);

      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞');
      }

      let processedData;
      
      if (data.success && data.calculation_result) {
        const calc = data.calculation_result;
        
        processedData = {
          success: true,
          calculationDate: new Date().toLocaleDateString('ru-RU'),
          clientAge: calc.clientAge || 35,
          clientGender: calc.clientGender || (gender === '–ú—É–∂—Å–∫–æ–π' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'),
          insuranceTerm: calc.insuranceTerm || insuranceTerm,
          baseInsuranceSum: formatNumber(calc.baseInsuranceSum || calc.insuranceSum || insuranceSum),
          basePremium: formatNumber(calc.basePremium || calc.basePremiumAmount || calc.annualPremium || '0'),
          accidentPackageIncluded: calc.accidentPackageIncluded || false,
          accidentInsuranceSum: formatNumber(calc.accidentInsuranceSum || calc.accidentDetails?.insuranceSum || insuranceSum),
          accidentPremium: formatNumber(calc.accidentPremium || calc.accidentDetails?.premium || '0'),
          criticalPackageIncluded: calc.criticalPackageIncluded || false,
          criticalInsuranceSum: formatNumber(calc.criticalInsuranceSum || calc.criticalDetails?.insuranceSum || '60 000 000'),
          criticalPremium: formatNumber(calc.criticalPremium || calc.criticalDetails?.premium || '0'),
          totalPremium: formatNumber(calc.totalPremium || calc.annualPremium || '0'),
          treatmentRegion: calc.treatmentRegion || treatmentRegion,
          sportPackage: calc.sportPackage || (sportPackage === 'yes'),
          calculationId: calc.calculationId || data.calculation_id || 'unknown',
          calculator: data.calculator || 'JustincaseCalculatorComplete',
          version: data.version || '2.0.0'
        };
      } else if (data.success) {
        processedData = {
          ...data,
          clientAge: data.clientAge || 35,
          clientGender: data.clientGender || (gender === '–ú—É–∂—Å–∫–æ–π' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'),
          insuranceTerm: data.insuranceTerm || insuranceTerm,
          baseInsuranceSum: formatNumber(data.baseInsuranceSum || insuranceSum),
          basePremium: formatNumber(data.basePremium || '0'),
          totalPremium: formatNumber(data.totalPremium || '0'),
          accidentPackageIncluded: data.accidentPackageIncluded || false,
          accidentInsuranceSum: formatNumber(data.accidentInsuranceSum || '0'),
          accidentPremium: formatNumber(data.accidentPremium || '0'),
          criticalPackageIncluded: data.criticalPackageIncluded || false,
          criticalPremium: formatNumber(data.criticalPremium || '0')
        };
      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞');
      }
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', processedData);
      
      setResultData(processedData);
      setCurrentStep(4);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  // –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —à–∞–≥–∞
  const renderStep = () => {
    if (isProcessing) {
      return (
        <div className={`card-container card-positioned ${contentAnimated ? 'animated' : ''}`}>
          <h2 className="text-h2 text-center">
            {userName}, –∏–¥—ë—Ç —Ä–∞—Å—á—ë—Ç...
          </h2>
          <div className="progress-indicator-wrapper">
            <div className="assessment-spinner" />
          </div>
        </div>
      );
    }

    // –®–∞–≥ 4 - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (currentStep === 4 && resultData) {
      return (
        <div className={`card-container card-positioned card-results ${contentAnimated ? 'animated' : ''}`}>
          <h2 className="text-h2 text-center">
            –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π¬ª
          </h2>
          <p className="text-small text-center">
            (—Ä–∞—Å—á–µ—Ç –æ—Ç {resultData.calculationDate || new Date().toLocaleDateString('ru-RU')})
          </p>
          
          <div className="result-section">
            <div className="result-item">
              <span className="result-label">–í–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞:</span>
              <span className="result-value">{resultData.clientAge} –ª–µ—Ç</span>
            </div>
            <div className="result-item">
              <span className="result-label">–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞:</span>
              <span className="result-value">{resultData.clientGender}</span>
            </div>
            <div className="result-item">
              <span className="result-label">–°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è:</span>
              <span className="result-value">{resultData.insuranceTerm} –ª–µ—Ç</span>
            </div>
            
            <div className="result-divider"></div>
            
            <h3 className="text-h3">–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</h3>
            <p className="text-small">
              (—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π —É—Ö–æ–¥–∞ –∏–∑ –∂–∏–∑–Ω–∏ –∏ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ I –∏ II –≥—Ä—É–ø–ø—ã –ø–æ –ª—é–±–æ–π –ø—Ä–∏—á–∏–Ω–µ)
            </p>
            
            <div className="result-item">
              <span className="result-label">‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞:</span>
              <span className="result-value">{formatNumber(resultData.baseInsuranceSum || resultData.insuranceSum)} —Ä—É–±.</span>
            </div>
            <div className="result-item">
              <span className="result-label">‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞—è –ø—Ä–µ–º–∏—è:</span>
              <span className="result-value">{formatNumber(resultData.basePremium)} —Ä—É–±.</span>
            </div>
            
            {resultData.accidentPackageIncluded && (
              <>
                <div className="result-divider"></div>
                <h3 className="text-h3">–ü–∞–∫–µ—Ç ¬´–ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π¬ª</h3>
                <div className="result-item">
                  <span className="result-label">‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞:</span>
                  <span className="result-value">{formatNumber(resultData.accidentInsuranceSum)} —Ä—É–±.</span>
                </div>
                <div className="result-item">
                  <span className="result-label">‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞—è –ø—Ä–µ–º–∏—è:</span>
                  <span className="result-value">{formatNumber(resultData.accidentPremium)} —Ä—É–±.</span>
                </div>
              </>
            )}
            
            {resultData.criticalPackageIncluded && (
              <>
                <div className="result-divider"></div>
                <h3 className="text-h3">
                  {resultData.treatmentRegion === 'russia' ? 
                    '–ü–∞–∫–µ—Ç ¬´–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è (–ª–µ—á–µ–Ω–∏–µ –≤ –†–§)¬ª' : 
                    '–ü–∞–∫–µ—Ç ¬´–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è (–ª–µ—á–µ–Ω–∏–µ –∑–∞ —Ä—É–±–µ–∂–æ–º)¬ª'
                  }
                </h3>
                <div className="result-item">
                  <span className="result-label">‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞:</span>
                  <span className="result-value">
                    60 000 000 —Ä—É–±–ª–µ–π,<br/>
                    –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏ ‚Äì 100 000 —Ä—É–±–ª–µ–π
                  </span>
                </div>
                <div className="result-item">
                  <span className="result-label">‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞—è –ø—Ä–µ–º–∏—è:</span>
                  <span className="result-value">{formatNumber(resultData.criticalPremium)} —Ä—É–±.</span>
                </div>
              </>
            )}
            
            {resultData.sportPackage && (
              <>
                <div className="result-divider"></div>
                <h3 className="text-h3">–û–ø—Ü–∏—è ¬´–õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–æ—Ä—Ç¬ª</h3>
                <p className="text-small">(—É—á—Ç–µ–Ω–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–µ–º–∏–π –ù–°)</p>
              </>
            )}
            
            <div className="result-divider result-divider-primary"></div>
            
            <div className="result-item result-item-total">
              <span className="result-label-total">–ò—Ç–æ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞—è –ø—Ä–µ–º–∏—è:</span>
              <span className="result-value-total">{formatNumber(resultData.totalPremium || resultData.annualPremium)} —Ä—É–±.</span>
            </div>
            <div className="result-item">
              <span className="result-label">–ü–æ—Ä—è–¥–æ–∫ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏–∏:</span>
              <span className="result-value">{insuranceFrequency || '–ï–∂–µ–≥–æ–¥–Ω–æ'}</span>
            </div>
          </div>
          
          <div className="button-group">
            <button className="button button-secondary" onClick={goToMenu}>
              –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            </button>
            <button className="button button-primary" onClick={repeatCalculation}>
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á—ë—Ç
            </button>
          </div>
        </div>
      );
    }

    // –®–∞–≥ 1 - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (currentStep === 1) {
      return (
        <div className={`card-container card-positioned ${contentAnimated ? 'animated' : ''}`}>
          <h2 className="text-h2">–†–∞—Å—á—ë—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π"</h2>
          <p className="text-small text-center">–®–∞–≥ 1 –∏–∑ 3</p>
          
          <div className="form-group">
            <label className="form-label">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</label>
            <DateWheelPicker
              value={{
                day: birthDate ? birthDate.getDate().toString().padStart(2, '0') : '01',
                month: birthDate ? (birthDate.getMonth() + 1).toString().padStart(2, '0') : '01',
                year: birthDate ? birthDate.getFullYear().toString() : new Date().getFullYear().toString()
              }}
              onChange={(val) => {
                if (val?.day && val?.month && val?.year) {
                  const date = new Date(parseInt(val.year), parseInt(val.month) - 1, parseInt(val.day));
                  setBirthDate(date);
                }
              }}
            />
          </div>

          <div className="form-group">
            <label className="form-label">–ü–æ–ª</label>
            <div className="option-buttons horizontal-always">
              <button
                className={`option-button ${gender === '–ú—É–∂—Å–∫–æ–π' ? 'selected' : ''}`}
                onClick={() => setGender('–ú—É–∂—Å–∫–æ–π')}
              >
                –ú—É–∂—Å–∫–æ–π
              </button>
              <button
                className={`option-button ${gender === '–ñ–µ–Ω—Å–∫–∏–π' ? 'selected' : ''}`}
                onClick={() => setGender('–ñ–µ–Ω—Å–∫–∏–π')}
              >
                –ñ–µ–Ω—Å–∫–∏–π
              </button>
            </div>
          </div>

          <div className="form-group">
            <label className="form-label">–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è?</label>
            <div className="option-buttons horizontal-always">
              <button
                className={`option-button ${insuranceInfo === 'yes' ? 'selected' : ''}`}
                onClick={() => setInsuranceInfo('yes')}
              >
                –î–∞
              </button>
              <button
                className={`option-button ${insuranceInfo === 'no' ? 'selected' : ''}`}
                onClick={() => setInsuranceInfo('no')}
              >
                –ù–µ—Ç
              </button>
            </div>
          </div>
        </div>
      );
    }

    // –®–∞–≥ 2 - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
    if (currentStep === 2) {
      return (
        <div className={`card-container card-positioned ${contentAnimated ? 'animated' : ''}`}>
          <h2 className="text-h2">
            {insuranceInfo === 'yes' ? '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è' : '–†–∞—Å—á—ë—Ç —Å—É–º–º—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è'}
          </h2>
          <p className="text-small text-center">–®–∞–≥ 2 –∏–∑ 3</p>
          
          {insuranceInfo === 'yes' ? (
            <>
              <div className="form-group">
                <label className="form-label">
                  –°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è: <span className="form-value-highlight">{insuranceTerm} –ª–µ—Ç</span>
                </label>
                <div className="range-container">
                  <input
                    type="range"
                    min="1"
                    max="30"
                    value={insuranceTerm}
                    onChange={(e) => setInsuranceTerm(e.target.value)}
                    className="range-input"
                    style={{'--range-progress': `${((insuranceTerm - 1) / 29) * 100}%`}}
                  />
                  <span className="range-value">{insuranceTerm}</span>
                </div>
              </div>

              <div className="form-group">
                <label className="form-label">–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ (—Ä—É–±.)</label>
                <input
                  type="text"
                  className="form-input"
                  value={insuranceSum}
                  onChange={handleSumChange}
                  placeholder="–ú–∏–Ω–∏–º—É–º 1.000.000"
                />
              </div>

              <div className="form-group">
                <label className="form-label">–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã</label>
                <div className="option-buttons vertical">
                  <div className="option-buttons">
                    <button
                      className={`option-button ${insuranceFrequency === '–ï–∂–µ–≥–æ–¥–Ω–æ' ? 'selected' : ''}`}
                      onClick={() => setInsuranceFrequency('–ï–∂–µ–≥–æ–¥–Ω–æ')}
                    >
                      –ï–∂–µ–≥–æ–¥–Ω–æ
                    </button>
                    <button
                      className={`option-button ${insuranceFrequency === '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' ? 'selected' : ''}`}
                      onClick={() => setInsuranceFrequency('–ï–∂–µ–º–µ—Å—è—á–Ω–æ')}
                    >
                      –ï–∂–µ–º–µ—Å—è—á–Ω–æ
                    </button>
                  </div>
                  <div className="option-buttons">
                    <button
                      className={`option-button ${insuranceFrequency === '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ' ? 'selected' : ''}`}
                      onClick={() => setInsuranceFrequency('–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ')}
                    >
                      –ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ
                    </button>
                    <button
                      className={`option-button ${insuranceFrequency === '–ü–æ–ª—É–≥–æ–¥–∏–µ' ? 'selected' : ''}`}
                      onClick={() => setInsuranceFrequency('–ü–æ–ª—É–≥–æ–¥–∏–µ')}
                    >
                      –†–∞–∑ –≤ –ø–æ–ª –≥–æ–¥–∞
                    </button>
                  </div>
                </div>
              </div>
            </>
          ) : (
            <>
              <div className="form-group">
                <label className="form-label">–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ä–∞–±–æ—Ç–∞?</label>
                <div className="button-group-options">
                  <button
                    className={`button-option ${hasJob === 'yes' ? 'selected' : ''}`}
                    onClick={() => setHasJob('yes')}
                  >
                    –î–∞
                  </button>
                  <button
                    className={`button-option ${hasJob === 'no' ? 'selected' : ''}`}
                    onClick={() => setHasJob('no')}
                  >
                    –ù–µ—Ç
                  </button>
                </div>
              </div>

              <div className="form-group">
                <label className="form-label">–î–æ—Ö–æ–¥—ã 2021 –≥. (—Ä—É–±.)</label>
                <input
                  type="text"
                  className="form-input"
                  value={income2021}
                  onChange={handleIncome2021Change}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                />
              </div>

              <div className="form-group">
                <label className="form-label">–î–æ—Ö–æ–¥—ã 2022 –≥. (—Ä—É–±.)</label>
                <input
                  type="text"
                  className="form-input"
                  value={income2022}
                  onChange={handleIncome2022Change}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                />
              </div>

              <div className="form-group">
                <label className="form-label">–î–æ—Ö–æ–¥—ã 2023 –≥. (—Ä—É–±.)</label>
                <input
                  type="text"
                  className="form-input"
                  value={income2023}
                  onChange={handleIncome2023Change}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                />
              </div>
            </>
          )}
        </div>
      );
    }

    // –®–∞–≥ 3 - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    if (currentStep === 3) {
      return (
        <div className={`card-container card-positioned ${contentAnimated ? 'animated' : ''}`}>
          <h2 className="text-h2">
            {insuranceInfo === 'yes' ? '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã' : '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}
          </h2>
          <p className="text-small text-center">–®–∞–≥ 3 –∏–∑ 3</p>
          
          {insuranceInfo === 'yes' ? (
            <>
              <div className="form-group">
                <label className="form-label">–ü–∞–∫–µ—Ç ¬´–ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π¬ª</label>
                <div className="button-group-options">
                  <button
                    className={`button-option ${accidentPackage === 'yes' ? 'selected' : ''}`}
                    onClick={() => setAccidentPackage('yes')}
                  >
                    –í–∫–ª—é—á–∏—Ç—å
                  </button>
                  <button
                    className={`button-option ${accidentPackage === 'no' ? 'selected' : ''}`}
                    onClick={() => setAccidentPackage('no')}
                  >
                    –ù–µ –≤–∫–ª—é—á–∞—Ç—å
                  </button>
                </div>
              </div>

              <div className="form-group">
                <label className="form-label">–ü–∞–∫–µ—Ç ¬´–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è¬ª</label>
                <div className="button-group-options">
                  <button
                    className={`button-option ${criticalPackage === 'yes' ? 'selected' : ''}`}
                    onClick={() => setCriticalPackage('yes')}
                  >
                    –í–∫–ª—é—á–∏—Ç—å
                  </button>
                  <button
                    className={`button-option ${criticalPackage === 'no' ? 'selected' : ''}`}
                    onClick={() => setCriticalPackage('no')}
                  >
                    –ù–µ –≤–∫–ª—é—á–∞—Ç—å
                  </button>
                </div>
              </div>

              {criticalPackage === 'yes' && (
                <div className="form-group">
                  <label className="form-label">–†–µ–≥–∏–æ–Ω –ª–µ—á–µ–Ω–∏—è</label>
                  <div className="button-group-options">
                    <button
                      className={`button-option ${treatmentRegion === 'russia' ? 'selected' : ''}`}
                      onClick={() => setTreatmentRegion('russia')}
                    >
                      –†–æ—Å—Å–∏—è
                    </button>
                    <button
                      className={`button-option ${treatmentRegion === 'abroad' ? 'selected' : ''}`}
                      onClick={() => setTreatmentRegion('abroad')}
                    >
                      –ó–∞ —Ä—É–±–µ–∂–æ–º
                    </button>
                  </div>
                </div>
              )}

              <div className="form-group">
                <label className="form-label">–õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–æ—Ä—Ç</label>
                <div className="button-group-options">
                  <button
                    className={`button-option ${sportPackage === 'yes' ? 'selected' : ''}`}
                    onClick={() => setSportPackage('yes')}
                  >
                    –í–∫–ª—é—á–∏—Ç—å
                  </button>
                  <button
                    className={`button-option ${sportPackage === 'no' ? 'selected' : ''}`}
                    onClick={() => setSportPackage('no')}
                  >
                    –ù–µ –≤–∫–ª—é—á–∞—Ç—å
                  </button>
                </div>
              </div>
            </>
          ) : (
            <>
              <div className="form-group">
                <label className="form-label">–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ—Ä–º–∏–ª—å—Ü–µ–º?</label>
                <div className="button-group-options">
                  <button
                    className={`button-option ${breadwinnerStatus === 'yes' ? 'selected' : ''}`}
                    onClick={() => setBreadwinnerStatus('yes')}
                  >
                    –î–∞
                  </button>
                  <button
                    className={`button-option ${breadwinnerStatus === 'no' ? 'selected' : ''}`}
                    onClick={() => setBreadwinnerStatus('no')}
                  >
                    –ù–µ—Ç
                  </button>
                </div>
              </div>

              {breadwinnerStatus === 'no' && (
                <div className="form-group">
                  <label className="form-label">–î–æ–ª—è –≤–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –≤ —Å–µ–º–µ–π–Ω–æ–º –±—é–¥–∂–µ—Ç–µ (%)</label>
                  <input
                    type="number"
                    className="form-input"
                    value={incomeShare}
                    onChange={(e) => setIncomeShare(e.target.value)}
                    min="0"
                    max="100"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç"
                  />
                </div>
              )}

              <div className="form-group">
                <label className="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π</label>
                <input
                  type="number"
                  className="form-input"
                  value={childrenCount}
                  onChange={(e) => setChildrenCount(e.target.value)}
                  min="0"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                />
              </div>

              <div className="form-group">
                <label className="form-label">–ï—Å—Ç—å –ª–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏, –Ω—É–∂–¥–∞—é—â–∏–µ—Å—è –≤ –æ—Å–æ–±–æ–º —É—Ö–æ–¥–µ?</label>
                <div className="button-group-options">
                  <button
                    className={`button-option ${specialCareRelatives === 'yes' ? 'selected' : ''}`}
                    onClick={() => setSpecialCareRelatives('yes')}
                  >
                    –î–∞
                  </button>
                  <button
                    className={`button-option ${specialCareRelatives === 'no' ? 'selected' : ''}`}
                    onClick={() => setSpecialCareRelatives('no')}
                  >
                    –ù–µ—Ç
                  </button>
                </div>
              </div>
            </>
          )}
        </div>
      );
    }

    return null;
  };

  return (
    <div className={`main-container ${isExiting ? 'exiting' : ''}`}>
      {/* –õ–æ–≥–æ—Ç–∏–ø */}
      <div className={`logo-wrapper ${logoAnimated ? 'animated' : ''}`}>
        <img src={logoImage} alt="Logo" className="logo-image" />
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      {renderStep()}

      {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      {currentStep > 1 && currentStep < 4 && (
        <button className="back-btn" onClick={handlePrev}>
          <svg viewBox="0 0 24 24">
            <path d="M15 18l-6-6 6-6" stroke="white" strokeWidth="2.5" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </button>
      )}

      {currentStep === 1 && (
        <button className="home-button" onClick={goToMenu}>
          <svg viewBox="0 0 24 24">
            <path d="M3 11l9-8 9 8v10a1 1 0 0 1-1 1h-5v-7h-6v7H4a1 1 0 0 1-1-1V11z" stroke="white" strokeWidth="2" fill="none"/>
          </svg>
        </button>
      )}

      {currentStep < 4 && !isProcessing && (
        <button 
          className={`next-btn ${!canGoNext() ? 'disabled' : ''}`} 
          onClick={handleNext} 
          disabled={!canGoNext()}
        >
          <svg viewBox="0 0 24 24">
            <path d="M9 18l6-6-6-6" stroke="white" strokeWidth="3" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </button>
      )}
    </div>
  );
};

export default JustincasePage;








































