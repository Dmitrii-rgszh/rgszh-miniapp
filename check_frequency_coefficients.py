# check_frequency_coefficients.py
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–µ–π

print("üîç === –ê–ù–ê–õ–ò–ó –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í –ü–ï–†–ò–û–î–ò–ß–ù–û–°–¢–ò ===")

try:
    from justincase_calculator import JustincaseCalculatorComplete
    
    calculator = JustincaseCalculatorComplete()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    print("\nüìä –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –ü–ï–†–ò–û–î–ò–ß–ù–û–°–¢–ò:")
    coefficients = calculator.FREQUENCY_COEFFICIENTS
    for frequency, coeff in coefficients.items():
        print(f"   {frequency}: {coeff} (–¥–æ–ø–ª–∞—Ç–∞: {(coeff-1)*100:.1f}%)")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å —Ä–∞–∑–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é
    print("\nüßÆ –¢–ï–°–¢ –†–ê–°–ß–ï–¢–û–í –° –†–ê–ó–ù–û–ô –ü–ï–†–ò–û–î–ò–ß–ù–û–°–¢–¨–Æ:")
    
    base_data = {
        'birthDate': '1990-01-01',
        'gender': 'male',
        'insuranceInfo': 'yes',
        'insuranceTerm': '10',
        'insuranceSum': '2000000',
        'accidentPackage': True,
        'criticalPackage': True,
        'treatmentRegion': 'abroad',
        'sportPackage': False
    }
    
    results = {}
    
    for frequency in coefficients.keys():
        test_data = base_data.copy()
        test_data['insuranceFrequency'] = frequency
        
        try:
            result = calculator.calculate_full_program(test_data)
            
            base_premium = result['basePremium']
            accident_premium = result['accidentPremium'] 
            critical_premium = result['criticalPremium']
            total_premium = result['annualPremium']
            coeff = coefficients[frequency]
            
            results[frequency] = {
                'coefficient': coeff,
                'base_premium': base_premium,
                'accident_premium': accident_premium,
                'critical_premium': critical_premium,
                'total_premium': total_premium
            }
            
            print(f"\n   üìã {frequency} (–∫–æ—ç—Ñ—Ñ. {coeff}):")
            print(f"      –ë–∞–∑–æ–≤–∞—è: {base_premium:,.2f} —Ä—É–±")
            print(f"      –ù–°: {accident_premium:,.2f} —Ä—É–±")
            print(f"      –ö–ó: {critical_premium:,.2f} —Ä—É–±")
            print(f"      –ò–¢–û–ì–û: {total_premium:,.2f} —Ä—É–±")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è {frequency}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø:")
    
    if '–ï–∂–µ–≥–æ–¥–Ω–æ' in results and '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' in results:
        annual = results['–ï–∂–µ–≥–æ–¥–Ω–æ']
        monthly = results['–ï–∂–µ–º–µ—Å—è—á–Ω–æ']
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ 1.05
        expected_base = annual['base_premium'] * 1.05
        expected_accident = annual['accident_premium'] * 1.05
        expected_critical = annual['critical_premium'] * 1.05
        expected_total = annual['total_premium'] * 1.05
        
        print(f"   –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è:")
        print(f"      –ï–∂–µ–≥–æ–¥–Ω–æ: {annual['base_premium']:,.2f}")
        print(f"      –ï–∂–µ–º–µ—Å—è—á–Ω–æ: {monthly['base_premium']:,.2f}")
        print(f"      –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_base:,.2f}")
        print(f"      {'‚úÖ' if abs(monthly['base_premium'] - expected_base) < 1 else '‚ùå'} –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
        
        print(f"   –ù–° –ø—Ä–µ–º–∏—è:")
        print(f"      –ï–∂–µ–≥–æ–¥–Ω–æ: {annual['accident_premium']:,.2f}")
        print(f"      –ï–∂–µ–º–µ—Å—è—á–Ω–æ: {monthly['accident_premium']:,.2f}")
        print(f"      –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_accident:,.2f}")
        print(f"      {'‚úÖ' if abs(monthly['accident_premium'] - expected_accident) < 1 else '‚ùå'} –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
        
        print(f"   –ö–ó –ø—Ä–µ–º–∏—è:")
        print(f"      –ï–∂–µ–≥–æ–¥–Ω–æ: {annual['critical_premium']:,.2f}")
        print(f"      –ï–∂–µ–º–µ—Å—è—á–Ω–æ: {monthly['critical_premium']:,.2f}")
        print(f"      –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_critical:,.2f}")
        print(f"      {'‚úÖ' if abs(monthly['critical_premium'] - expected_critical) < 1 else '‚ùå'} –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
        
        print(f"   –ò–¢–û–ì–û:")
        print(f"      –ï–∂–µ–≥–æ–¥–Ω–æ: {annual['total_premium']:,.2f}")
        print(f"      –ï–∂–µ–º–µ—Å—è—á–Ω–æ: {monthly['total_premium']:,.2f}")
        print(f"      –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_total:,.2f}")
        print(f"      {'‚úÖ' if abs(monthly['total_premium'] - expected_total) < 1 else '‚ùå'} –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–µ–π
    print("\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• –ü–ï–†–ò–û–î–ò–ß–ù–û–°–¢–ï–ô:")
    if '–ï–∂–µ–≥–æ–¥–Ω–æ' in results:
        annual_total = results['–ï–∂–µ–≥–æ–¥–Ω–æ']['total_premium']
        print(f"   –ë–∞–∑–æ–≤–∞—è (–µ–∂–µ–≥–æ–¥–Ω–æ): {annual_total:,.2f} —Ä—É–±")
        
        for frequency, data in results.items():
            if frequency != '–ï–∂–µ–≥–æ–¥–Ω–æ':
                diff = data['total_premium'] - annual_total
                diff_percent = (diff / annual_total) * 100
                print(f"   {frequency}: {data['total_premium']:,.2f} —Ä—É–± (+{diff:,.2f}, +{diff_percent:.1f}%)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –∫–æ–¥–µ
    print("\nüîß –ü–†–û–í–ï–†–ö–ê –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –í –ö–û–î–ï:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–µ–º–∏—é
    freq_coeff = calculator.get_frequency_coefficient('–ï–∂–µ–º–µ—Å—è—á–Ω–æ')
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': {freq_coeff}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ –≤—Å–µ–º –≤–∏–¥–∞–º –ø—Ä–µ–º–∏–π
    print(f"   –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫:")
    print(f"      ‚úÖ –ë–∞–∑–æ–≤–æ–π –ø—Ä–µ–º–∏–∏ (–∂–∏–∑–Ω—å + –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å)")
    print(f"      ‚úÖ –ü—Ä–µ–º–∏–∏ –ù–° (–≤—Å–µ –≤–∏–¥—ã)")
    print(f"      ‚úÖ –ü—Ä–µ–º–∏–∏ –ö–ó")
    
    print("\nüéØ === –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö 4 –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–µ–π
    expected_frequencies = ['–ï–∂–µ–≥–æ–¥–Ω–æ', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ', '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ', '–ü–æ–ª—É–≥–æ–¥–∏–µ']
    missing_frequencies = [f for f in expected_frequencies if f not in coefficients]
    
    if missing_frequencies:
        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏: {missing_frequencies}")
    else:
        print(f"   ‚úÖ –í—Å–µ 4 –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    expected_coeffs = {
        '–ï–∂–µ–≥–æ–¥–Ω–æ': 1.0,
        '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': 1.05,     # +5% - –ù–£–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨ –° EXCEL!
        '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ': 1.025,  # +2.5% - –ù–£–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨ –° EXCEL!
        '–ü–æ–ª—É–≥–æ–¥–∏–µ': 1.01       # +1% - –ù–£–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨ –° EXCEL!
    }
    
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–Ω—É–∂–Ω–æ —Å–≤–µ—Ä–∏—Ç—å —Å Excel):")
    for freq, expected in expected_coeffs.items():
        actual = coefficients.get(freq, '–û–¢–°–£–¢–°–¢–í–£–ï–¢')
        status = '‚úÖ' if actual == expected else '‚ö†Ô∏è'
        print(f"      {status} {freq}: {actual} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected})")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   1. –°–≤–µ—Ä–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å —Ñ–∞–π–ª–æ–º Excel")
    print(f"   2. –ï—Å–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ - –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã")
    print(f"   3. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ –≤—Å–µ–º —Ç–∏–ø–∞–º –ø—Ä–µ–º–∏–π")

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    import traceback
    traceback.print_exc()