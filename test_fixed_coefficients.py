#!/usr/bin/env python3
# test_fixed_coefficients.py
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏

print("üß™ === –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í –ü–ï–†–ò–û–î–ò–ß–ù–û–°–¢–ò ===")

try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª justincase_calculator.py –Ω–∞ –Ω–æ–≤—ã–π –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    from justincase_calculator import JustincaseCalculatorComplete
    
    calculator = JustincaseCalculatorComplete()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
    print("\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ï:")
    info = calculator.get_calculator_info()
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
    print(f"   –í–µ—Ä—Å–∏—è: {info['version']}")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {info['features']['corrected_frequency_coefficients']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    print("\nüìä –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –ü–ï–†–ò–û–î–ò–ß–ù–û–°–¢–ò:")
    coefficients = calculator.FREQUENCY_COEFFICIENTS
    for frequency, coeff in coefficients.items():
        markup = (coeff - 1) * 100
        print(f"   {frequency}: {coeff} (–¥–æ–ø–ª–∞—Ç–∞: {markup:+.1f}%)")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    print("\n‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –°–û –°–¢–ê–†–´–ú–ò –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê–ú–ò:")
    old_coefficients = {
        '–ï–∂–µ–≥–æ–¥–Ω–æ': 1.0,
        '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': 1.05,     # —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ +5%
        '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ': 1.025,  # —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ +2.5%
        '–ü–æ–ª—É–≥–æ–¥–∏–µ': 1.01       # —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ +1%
    }
    
    print("   –ë—ã–ª–æ ‚Üí –°—Ç–∞–ª–æ:")
    for frequency in coefficients.keys():
        old_coeff = old_coefficients.get(frequency, 'N/A')
        new_coeff = coefficients[frequency]
        old_markup = (old_coeff - 1) * 100 if old_coeff != 'N/A' else 0
        new_markup = (new_coeff - 1) * 100
        
        changed = '‚úÖ' if old_coeff != new_coeff else '‚ûñ'
        print(f"   {changed} {frequency}: {old_coeff} ({old_markup:+.1f}%) ‚Üí {new_coeff} ({new_markup:+.1f}%)")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    print("\nüßÆ –¢–ï–°–¢ –†–ê–°–ß–ï–¢–û–í –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê–ú–ò:")
    
    test_data = {
        'birthDate': '1990-01-01',
        'gender': 'male',
        'insuranceInfo': 'yes',
        'insuranceTerm': '10',
        'insuranceSum': '2000000',
        'accidentPackage': True,
        'criticalPackage': True,
        'treatmentRegion': 'abroad',
        'sportPackage': False
    }
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
    for frequency in coefficients.keys():
        test_data_copy = test_data.copy()
        test_data_copy['insuranceFrequency'] = frequency
        
        try:
            result = calculator.calculate_full_program(test_data_copy)
            
            results[frequency] = {
                'coefficient': coefficients[frequency],
                'base_premium': result['basePremium'],
                'accident_premium': result['accidentPremium'],
                'critical_premium': result['criticalPremium'],
                'total_premium': result['annualPremium']
            }
            
            print(f"\n   üìã {frequency} (–∫–æ—ç—Ñ—Ñ. {coefficients[frequency]}):")
            print(f"      –ë–∞–∑–æ–≤–∞—è: {result['basePremium']:,.2f} —Ä—É–±")
            print(f"      –ù–°: {result['accidentPremium']:,.2f} —Ä—É–±")
            print(f"      –ö–ó: {result['criticalPremium']:,.2f} —Ä—É–±")
            print(f"      –ò–¢–û–ì–û: {result['annualPremium']:,.2f} —Ä—É–±")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è {frequency}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í:")
    
    if '–ï–∂–µ–≥–æ–¥–Ω–æ' in results:
        base_annual = results['–ï–∂–µ–≥–æ–¥–Ω–æ']
        
        print(f"   –ë–∞–∑–æ–≤–∞—è (–µ–∂–µ–≥–æ–¥–Ω–æ): {base_annual['total_premium']:,.2f} —Ä—É–±")
        
        for frequency, data in results.items():
            if frequency != '–ï–∂–µ–≥–æ–¥–Ω–æ':
                expected_total = base_annual['total_premium'] * data['coefficient']
                actual_total = data['total_premium']
                difference = abs(actual_total - expected_total)
                is_correct = difference < 1.0  # –¥–æ–ø—É—Å–∫ 1 —Ä—É–±–ª—å –Ω–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                
                print(f"   {frequency}:")
                print(f"      –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_total:,.2f} —Ä—É–± (–±–∞–∑–∞ √ó {data['coefficient']})")
                print(f"      –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {actual_total:,.2f} —Ä—É–±")
                print(f"      –†–∞–∑–Ω–∏—Ü–∞: {difference:.2f} —Ä—É–± {'‚úÖ' if is_correct else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Excel –ª–æ–≥–∏–∫–µ
    print("\nüìà –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø EXCEL –õ–û–ì–ò–ö–ï:")
    
    # –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ Excel: tbl_freq_k
    excel_logic = {
        '–ï–∂–µ–≥–æ–¥–Ω–æ': {'kk': 1, 'one_payment_coeff': 1.0, 'total_markup': 0.0},
        '–ü–æ–ª—É–≥–æ–¥–∏–µ': {'kk': 2, 'one_payment_coeff': 0.51, 'total_markup': 2.0},
        '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ': {'kk': 4, 'one_payment_coeff': 0.2575, 'total_markup': 3.0},
        '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': {'kk': 12, 'one_payment_coeff': 0.0867, 'total_markup': 4.0}
    }
    
    print("   Excel –ª–æ–≥–∏–∫–∞ (kk √ó –∫–æ—ç—Ñ—Ñ_–æ–¥–Ω–æ–≥–æ_–ø–ª–∞—Ç–µ–∂–∞ = –æ–±—â–∞—è_–¥–æ–ø–ª–∞—Ç–∞):")
    for frequency, excel_data in excel_logic.items():
        kk = excel_data['kk']
        one_coeff = excel_data['one_payment_coeff']
        expected_markup = excel_data['total_markup']
        
        calculated_total = kk * one_coeff
        our_coeff = coefficients.get(frequency, 1.0)
        our_markup = (our_coeff - 1) * 100
        
        matches = abs(our_markup - expected_markup) < 0.5
        
        print(f"   {frequency}: {kk} √ó {one_coeff} = {calculated_total:.3f} (–¥–æ–ø–ª–∞—Ç–∞ {expected_markup:.1f}%)")
        print(f"      –ù–∞—à –∫–æ—ç—Ñ—Ñ: {our_coeff} (–¥–æ–ø–ª–∞—Ç–∞ {our_markup:.1f}%) {'‚úÖ' if matches else '‚ùå'}")
    
    print("\nüéØ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    
    all_tests_passed = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã
    coeffs_updated = all(
        coefficients[freq] == excel_logic[freq]['kk'] * excel_logic[freq]['one_payment_coeff']
        for freq in excel_logic.keys()
        if freq in coefficients
    )
    
    if coeffs_updated:
        print("   ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å Excel")
    else:
        print("   ‚ùå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Excel")
        all_tests_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤
    calculations_correct = len(results) == len(coefficients)
    
    if calculations_correct:
        print("   ‚úÖ –†–∞—Å—á–µ—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–µ–π")
    else:
        print("   ‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö")
        all_tests_passed = False
    
    if all_tests_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        print("\nüìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª justincase_calculator.py –Ω–æ–≤—ã–º –∫–æ–¥–æ–º")
        print("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
        print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ Telegram Miniapp")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—è–º–∏")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª justincase_calculator.py –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–º –∫–æ–¥–æ–º")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "="*60)
print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")