#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ PostgreSQL
"""

import pandas as pd
import psycopg2
from psycopg2.extras import execute_values
import os

def create_tariffs_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–∞—Ä–∏—Ñ–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    conn = psycopg2.connect(
        host="postgres",
        port=5432,
        database="miniapp",
        user="postgres", 
        password="secret"
    )
    
    cursor = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—Å—Ç—å
    cursor.execute("DROP TABLE IF EXISTS justincase_tariffs CASCADE;")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    create_table_sql = """
    CREATE TABLE justincase_tariffs (
        id SERIAL PRIMARY KEY,
        payment_period INTEGER NOT NULL,
        age INTEGER NOT NULL,
        gender VARCHAR(1) NOT NULL,
        death_rate DECIMAL(10,8) NOT NULL,
        disability_rate DECIMAL(10,8) NOT NULL,
        accident_death_rate DECIMAL(10,8) NOT NULL,
        traffic_death_rate DECIMAL(10,8) NOT NULL,
        injury_rate DECIMAL(10,8) NOT NULL,
        critical_rf_fee DECIMAL(10,2) NOT NULL,
        critical_abroad_fee DECIMAL(10,2) NOT NULL,
        i_rate DECIMAL(10,8) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    """
    
    cursor.execute(create_table_sql)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    cursor.execute("""
        CREATE INDEX idx_tariffs_lookup ON justincase_tariffs (age, gender, payment_period);
    """)
    
    conn.commit()
    cursor.close()
    conn.close()
    
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ justincase_tariffs —Å–æ–∑–¥–∞–Ω–∞")

def load_tariffs_from_csv():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∞—Ä–∏—Ñ—ã –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    
    # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    csv_file = "–ë–∞–∑–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã.csv"
    
    print(f"üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {csv_file}")
    
    # –ß–∏—Ç–∞–µ–º CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    df = pd.read_csv(csv_file, encoding='utf-8', sep=';')
    
    print(f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
    print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω–∞—è
    if df.iloc[0].isnull().all() or 'i' in str(df.iloc[0, 0]):
        df = df.drop(df.index[0]).reset_index(drop=True)
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
    df.columns = [
        'payment_period', 'age', 'gender', 'death_rate', 'disability_rate',
        'accident_death_rate', 'traffic_death_rate', 'injury_rate', 
        'critical_rf_fee', 'critical_abroad_fee', 'i_rate', 
        'col1', 'col2', 'col3'  # –õ–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    ]
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    df = df[['payment_period', 'age', 'gender', 'death_rate', 'disability_rate',
             'accident_death_rate', 'traffic_death_rate', 'injury_rate', 
             'critical_rf_fee', 'critical_abroad_fee', 'i_rate']]
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = df.dropna(subset=['age', 'gender'])  # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–ª–∏ –ø–æ–ª–∞
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
    for col in ['death_rate', 'disability_rate', 'accident_death_rate', 'traffic_death_rate', 'injury_rate', 'i_rate']:
        df[col] = df[col].astype(str).str.replace('%', '').str.replace(',', '.').astype(float) / 100
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—ã (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ)
    for col in ['critical_rf_fee', 'critical_abroad_fee']:
        df[col] = df[col].astype(str).str.replace(' ', '').str.replace(',', '.').astype(float)
    
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    df = df[df['age'].notna() & df['gender'].notna()]
    df = df[df['age'] != '–í–æ–∑—Ä–∞—Å—Ç –ó–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ']  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –ø–æ–ø–∞–ª
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã
    df['payment_period'] = df['payment_period'].astype(int)
    df['age'] = df['age'].astype(int)
    df['gender'] = df['gender'].astype(str)
    
    print(f"üìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫: {len(df)}")
    print(f"üîç –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {df['age'].min()} - {df['age'].max()}")
    print(f"üë• –ü–æ–ª—ã: {df['gender'].unique()}")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    conn = psycopg2.connect(
        host="postgres",
        port=5432,
        database="miniapp",
        user="postgres", 
        password="secret"
    )
    
    cursor = conn.cursor()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    data_tuples = [tuple(row) for row in df.values]
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–Ω–æ
    insert_sql = """
    INSERT INTO justincase_tariffs (
        payment_period, age, gender, death_rate, disability_rate,
        accident_death_rate, traffic_death_rate, injury_rate,
        critical_rf_fee, critical_abroad_fee, i_rate
    ) VALUES %s
    """
    
    execute_values(cursor, insert_sql, data_tuples, page_size=1000)
    
    conn.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
    cursor.execute("SELECT COUNT(*) FROM justincase_tariffs;")
    count = cursor.fetchone()[0]
    
    cursor.execute("""
        SELECT age, gender, death_rate, critical_rf_fee 
        FROM justincase_tariffs 
        WHERE age = 35 AND gender = 'm' 
        LIMIT 1;
    """)
    sample = cursor.fetchone()
    
    cursor.close()
    conn.close()
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∞—Ä–∏—Ñ–æ–≤: {count}")
    if sample:
        print(f"üîç –ü—Ä–∏–º–µ—Ä (–≤–æ–∑—Ä–∞—Å—Ç 35, –º—É–∂—á–∏–Ω–∞): death_rate={sample[2]}, critical_rf_fee={sample[3]}")
    
    return count

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤...")
    
    create_tariffs_table()
    count = load_tariffs_from_csv()
    
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ PostgreSQL")
