#!/usr/bin/env python3
# simple_migrate.py - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ë–î

import os
import sys
import logging
from flask import Flask

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from db_saver import init_db, db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    app = Flask(__name__)
    init_db(app)
    
    with app.app_context():
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            db.create_all()
            logger.info("‚úÖ All tables created successfully!")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            from questionnaire_models import Questionnaire, Question, QuestionOption
            from assessment_models import AssessmentCandidate, AssessmentAnswer
            
            logger.info("‚úÖ Models imported successfully!")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error creating tables: {e}")
            return False

def create_assessment_questionnaire():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è Assessment"""
    app = Flask(__name__)
    init_db(app)
    
    with app.app_context():
        try:
            from questionnaire_models import Questionnaire, Question, QuestionOption
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–ø—Ä–æ—Å–Ω–∏–∫
            existing = db.session.query(Questionnaire).filter_by(title="–û—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞").first()
            if existing:
                logger.info(f"üìã Questionnaire already exists: {existing.title} (ID: {existing.id})")
                return existing.id
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫
            questionnaire = Questionnaire(
                title="–û—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
                description="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
                category="assessment",
                created_by="migration_script",
                max_time_minutes=30,
                randomize_questions=False,
                randomize_options=False
            )
            
            db.session.add(questionnaire)
            db.session.flush()  # –ø–æ–ª—É—á–∞–µ–º ID
            
            logger.info(f"‚úÖ Created questionnaire: {questionnaire.title} (ID: {questionnaire.id})")
            
            # –î–∞–Ω–Ω—ã–µ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            sample_questions = [
                {
                    "text": "1. –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –≤–∞–º –±–ª–∏–∂–µ?",
                    "options": [
                        {"text": "–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É—Å—Ç–æ–π—á–∏–≤—É—é —Å–∏—Å—Ç–µ–º—É", "score_type": "innovator"},
                        {"text": "–ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã –∏ —Ç—Ä–µ–±—É—é—Ç –≥–∏–±–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞", "score_type": "optimizer"},
                        {"text": "–ö–æ–≥–¥–∞ –µ—Å—Ç—å —á—ë—Ç–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "score_type": "executor"}
                    ]
                },
                {
                    "text": "2. –ï—Å–ª–∏ –∫–æ–ª–ª–µ–≥–∞ –¥–æ–ø—É—Å—Ç–∏–ª —Å–µ—Ä—å—ë–∑–Ω—É—é –æ—à–∏–±–∫—É, —á—Ç–æ –¥–ª—è –≤–∞—Å –ª–æ–≥–∏—á–Ω–µ–µ —Å–¥–µ–ª–∞—Ç—å?",
                    "options": [
                        {"text": "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –±—É–¥—É—â–µ–º", "score_type": "innovator"},
                        {"text": "–ü–æ–º–æ—á—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∏ –æ–±—Å—É–¥–∏—Ç—å, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", "score_type": "optimizer"},
                        {"text": "–£–∫–∞–∑–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º", "score_type": "executor"}
                    ]
                },
                {
                    "text": "3. –ö–∞–∫–æ–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –∫–∞–∂–µ—Ç—Å—è –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º?",
                    "options": [
                        {"text": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π ‚Äî –ø—Ä–æ–±—É—é —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Å–æ–∑–¥–∞—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã", "score_type": "innovator"},
                        {"text": "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚Äî —Å–æ—á–µ—Ç–∞—é –∏–∑—É—á–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏", "score_type": "optimizer"},
                        {"text": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚Äî —Å–ª–µ–¥—É—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –º–µ—Ç–æ–¥–∏–∫–∞–º", "score_type": "executor"}
                    ]
                }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã (—Å–Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ 3 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            for i, q_data in enumerate(sample_questions, 1):
                question = Question(
                    questionnaire_id=questionnaire.id,
                    text=q_data['text'],
                    order_index=i,
                    question_type='single_choice',
                    is_required=True
                )
                
                db.session.add(question)
                db.session.flush()  # –ø–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                for j, option_data in enumerate(q_data['options']):
                    option = QuestionOption(
                        question_id=question.id,
                        text=option_data['text'],
                        order_index=j,
                        score_type=option_data['score_type'],
                        score_value=1
                    )
                    db.session.add(option)
                
                logger.info(f"‚úÖ Added question {i}: {q_data['text'][:50]}...")
            
            db.session.commit()
            logger.info(f"üéâ Successfully created questionnaire with {len(sample_questions)} questions!")
            
            return questionnaire.id
            
        except Exception as e:
            logger.error(f"‚ùå Error creating questionnaire: {e}")
            db.session.rollback()
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ Starting simple migration...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        if not create_tables():
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫
        questionnaire_id = create_assessment_questionnaire()
        
        logger.info("‚úÖ Migration completed successfully!")
        logger.info(f"üéØ Questionnaire ID: {questionnaire_id}")
        logger.info("üì± Test the API:")
        logger.info(f"   GET /api/questionnaire/{questionnaire_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Migration failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()