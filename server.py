# server.py

import os
import logging
import threading
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from flask_socketio import SocketIO

from db_saver import init_db, save_feedback_to_db
from polls_ws import register_poll_ws
from polls_routes import register_poll_routes
from assessment_routes import register_assessment_routes  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

# ===== –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ù–°–ñ =====
CARE_FUTURE_AVAILABLE = False
CARE_FUTURE_ERROR = None

print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ...")

try:
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    import sqlalchemy
    import psycopg2
    print("  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ó–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
    from care_future_models import init_nsj_database, NSJDataManager
    from care_future_routes import init_care_future_routes
    
    CARE_FUTURE_AVAILABLE = True
    print("  ‚úÖ –ú–æ–¥—É–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
except ImportError as e:
    CARE_FUTURE_ERROR = f"ImportError: {e}"
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print(f"  üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install psycopg2-binary sqlalchemy flask-sqlalchemy")
    
except Exception as e:
    CARE_FUTURE_ERROR = f"Error: {e}"
    print(f"  ‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")

# ====== Logging setup ======
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
logger = logging.getLogger("server")

# ====== Flask app ======
app = Flask(__name__, static_folder="build", static_url_path="")

CORS(app, resources={
    r"/*": {
        "origins": [
            "http://localhost:3000",
            "http://localhost:3001", 
            "http://localhost:4000",
            "http://localhost:4001",  # –î–æ–±–∞–≤–∏—Ç—å
            "http://127.0.0.1:*",
            "https://rgszh-miniapp.org"
        ],
        "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "supports_credentials": True
    }
})

@app.before_request
def log_request():
    logger.info(f"üîç Incoming request: {request.method} {request.path}")

# ====== Socket.IO setup with optional Redis ======
redis_url = os.environ.get("REDIS_URL")
if redis_url:
    try:
        import redis
        socketio = SocketIO(
            app,
            cors_allowed_origins="*",
            message_queue=redis_url
        )
        logger.info("Socket.IO: using Redis message queue %s", redis_url)
    except ImportError:
        logger.warning("Redis not installed, running without message queue")
        socketio = SocketIO(app, cors_allowed_origins="*")
else:
    socketio = SocketIO(app, cors_allowed_origins="*")
    logger.info("Socket.IO: running without Redis message queue")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º WS-—Å–ª—É—à–∞—Ç–µ–ª–∏ –∏ REST-–º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤
register_poll_ws(socketio)
register_poll_routes(app, socketio)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è assessment
register_assessment_routes(app)

# ====== Database setup (–¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞) ======
init_db(app)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ù–°–ñ =====
print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ...")

if CARE_FUTURE_AVAILABLE:
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        print("  üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        with app.app_context():
            init_success = init_nsj_database()
            if init_success:
                print("  ‚úÖ –ë–î –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                print("  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º routes
        print("  üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è API endpoints...")
        route_success = init_care_future_routes(app)
        if route_success:
            print("  ‚úÖ API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            print("  üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
            print("    - POST /api/care-future/calculate")
            print("    - GET  /api/care-future/test")
            print("    - GET  /api/care-future/admin/status")
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ: {e}")
        CARE_FUTURE_AVAILABLE = False
        CARE_FUTURE_ERROR = str(e)
else:
    print(f"  ‚ÑπÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {CARE_FUTURE_ERROR}")

# ====== Email Configuration ======
SMTP_SERVER = os.environ.get("SMTP_SERVER", "smtp.yandex.ru")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SMTP_USER = os.environ.get("SMTP_USER", "rgszh-miniapp@yandex.ru")
SMTP_PASSWORD = os.environ.get("SMTP_PASSWORD", "")
SMTP_FROM = os.environ.get("SMTP_FROM", "rgszh-miniapp@yandex.ru")
SMTP_TO = os.environ.get("SMTP_TO", "zerotlt@mail.ru")

def send_email(subject, body, to_email=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π email —á–µ—Ä–µ–∑ SMTP (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π)
    """
    try:
        if not SMTP_PASSWORD:
            logger.warning("üìß SMTP password not configured, skipping email send")
            return False
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π email –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        recipient = to_email or SMTP_TO
        
        logger.info(f"üìß Sending email to {recipient}: {subject}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart()
        msg['From'] = SMTP_FROM
        msg['To'] = recipient
        msg['Subject'] = subject
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SMTP
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()  # –í–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            server.login(SMTP_USER, SMTP_PASSWORD)
            text = msg.as_string()
            server.sendmail(SMTP_FROM, recipient, text)
        
        logger.info(f"‚úÖ Email sent successfully to {recipient}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to send email: {e}")
        return False

def send_email_with_attachment(subject, body, attachment_data, attachment_filename, to_email=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ SMTP
    
    Args:
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        body: –¢–µ–ª–æ –ø–∏—Å—å–º–∞
        attachment_data: –î–∞–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö
        attachment_filename: –ò–º—è —Ñ–∞–π–ª–∞ –≤–ª–æ–∂–µ–Ω–∏—è
        to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        if not SMTP_PASSWORD:
            logger.warning("üìß SMTP password not configured, skipping email send")
            return False
            
        if not attachment_data:
            logger.warning("üìß No attachment data provided, sending simple email")
            return send_email(subject, body, to_email)
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π email –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        recipient = to_email or SMTP_TO
        
        logger.info(f"üìß Sending email with attachment to {recipient}: {subject}")
        logger.info(f"üìé Attachment: {attachment_filename} ({len(attachment_data)} bytes)")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart()
        msg['From'] = SMTP_FROM
        msg['To'] = recipient
        msg['Subject'] = subject
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
        attachment = MIMEBase('application', 'octet-stream')
        attachment.set_payload(attachment_data)
        encoders.encode_base64(attachment)
        attachment.add_header(
            'Content-Disposition',
            f'attachment; filename= {attachment_filename}'
        )
        msg.attach(attachment)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SMTP
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()  # –í–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            server.login(SMTP_USER, SMTP_PASSWORD)
            text = msg.as_string()
            server.sendmail(SMTP_FROM, recipient, text)
        
        logger.info(f"‚úÖ Email with attachment sent successfully to {recipient}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to send email with attachment: {e}")
        # Fallback - –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è
        logger.info("üîÑ Trying to send email without attachment as fallback...")
        return send_email(subject, body, to_email)

# ====== Endpoints ======

@app.route('/api/feedback/save', methods=['POST', 'OPTIONS'])
def save_feedback():
    logger.info("‚ûú %s %s", request.method, request.path)
    if request.method == "OPTIONS":
        return '', 200

    try:
        payload = request.get_json(force=True)
        logger.info("   payload keys: %s", list(payload.keys()))
    except Exception as e:
        logger.error("   JSON parse error: %s", e)
        return jsonify({"error": "Invalid JSON"}), 400

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    try:
        save_feedback_to_db(payload)
        return jsonify({"success": True}), 200
    except Exception as e:
        logger.error("   DB save error: %s", e)
        return jsonify({"error": "Database error"}), 500

# ===== CARE FUTURE ENDPOINTS =====

@app.route('/api/care-future/status', methods=['GET'])
def care_future_status():
    """–°—Ç–∞—Ç—É—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ"""
    return jsonify({
        'available': CARE_FUTURE_AVAILABLE,
        'error': CARE_FUTURE_ERROR,
        'files_exist': {
            'care_future_models.py': os.path.exists('care_future_models.py'),
            'care_future_routes.py': os.path.exists('care_future_routes.py'),
            'care_future_schema.sql': os.path.exists('care_future_schema.sql'),
            'care_future_data.sql': os.path.exists('care_future_data.sql')
        }
    })

@app.route('/api/care-future/test', methods=['GET'])
def care_future_test():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ"""
    try:
        if not CARE_FUTURE_AVAILABLE:
            return jsonify({
                'status': 'error',
                'message': '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'error': CARE_FUTURE_ERROR
            }), 503
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞
        from care_future_models import NSJCalculator, CalculationInput
        from datetime import date
        
        test_input = CalculationInput(
            birth_date=date(1990, 1, 1),
            gender='male',
            contract_term=5,
            calculation_type='from_premium',
            input_amount=960000,
            email='test@example.com'
        )
        
        calculator = NSJCalculator()
        result = calculator.calculate(test_input)
        
        return jsonify({
            'status': 'success',
            'message': '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
            'test_result': {
                'calculation_id': result.calculation_uuid,
                'premium_amount': result.premium_amount,
                'insurance_sum': result.insurance_sum,
                'accumulated_capital': result.accumulated_capital,
                'program_income': result.program_income,
                'tax_deduction': result.tax_deduction
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/care-future/calculate', methods=['POST', 'OPTIONS'])
def care_future_calculate():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ù–°–ñ"""
    if request.method == "OPTIONS":
        return '', 200
    
    if not CARE_FUTURE_AVAILABLE:
        return jsonify({
            'success': False,
            'error': f'–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {CARE_FUTURE_ERROR}'
        }), 503
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        if not data:
            return jsonify({
                'success': False,
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞'
            }), 400
        
        logger.info(f"üìä –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç: {data.get('calculationType', 'unknown')} –¥–ª—è {data.get('gender', 'unknown')}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from care_future_models import NSJCalculator, CalculationInput
        from datetime import datetime, date
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            birth_date = datetime.strptime(data['birthDate'], '%Y-%m-%d').date()
        except (KeyError, ValueError) as e:
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD'
            }), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['gender', 'contractTerm', 'calculationType', 'inputAmount']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            return jsonify({
                'success': False,
                'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {", ".join(missing_fields)}'
            }), 400
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        calculation_input = CalculationInput(
            birth_date=birth_date,
            gender=data['gender'],
            contract_term=int(data['contractTerm']),
            calculation_type=data['calculationType'],
            input_amount=int(data['inputAmount']),
            email=data.get('email'),
            calculation_date=date.today()
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calculator = NSJCalculator()
        result = calculator.calculate(calculation_input)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'success': True,
            'calculationId': result.calculation_uuid,
            'inputParameters': {
                'birthDate': calculation_input.birth_date.isoformat(),
                'gender': calculation_input.gender,
                'contractTerm': calculation_input.contract_term,
                'calculationType': calculation_input.calculation_type,
                'inputAmount': calculation_input.input_amount,
                'email': calculation_input.email,
                'ageAtStart': result.age_at_start,
                'ageAtEnd': result.age_at_end
            },
            'results': {
                'premiumAmount': result.premium_amount,
                'insuranceSum': result.insurance_sum,
                'accumulatedCapital': result.accumulated_capital,
                'programIncome': result.program_income,
                'taxDeduction': result.tax_deduction
            },
            'redemptionValues': result.redemption_values,
            'calculatedAt': datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result.calculation_uuid}")
        return jsonify(response_data)
        
    except ValueError as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 400
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/care-future/calculate', methods=['POST', 'OPTIONS'])
def care_future_proxy():
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–∫—Å–∏—Ä—É—é—â–∏–π endpoint –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω)"""
    logger.info("üåê ‚ûú %s %s (PROXY)", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    if not CARE_FUTURE_AVAILABLE:
        logger.error("‚ùå –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return jsonify({
            'success': False,
            'error': f'–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {CARE_FUTURE_ERROR}'
        }), 503
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        if not data:
            return jsonify({
                'success': False,
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞'
            }), 400
        
        logger.info(f"üìä –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞: {data.get('calculationType', 'unknown')} –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {data.get('birthDate', 'unknown')}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        from care_future_models import NSJCalculator, CalculationInput
        from datetime import datetime, date
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            birth_date = datetime.strptime(data['birthDate'], '%Y-%m-%d').date()
        except (KeyError, ValueError) as e:
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD'
            }), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['gender', 'contractTerm', 'calculationType', 'inputAmount']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            return jsonify({
                'success': False,
                'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {", ".join(missing_fields)}'
            }), 400
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        calculation_input = CalculationInput(
            birth_date=birth_date,
            gender=data['gender'],
            contract_term=int(data['contractTerm']),
            calculation_type=data['calculationType'],
            input_amount=int(data['inputAmount']),
            email=data.get('email'),
            calculation_date=date.today()
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calculator = NSJCalculator()
        result = calculator.calculate(calculation_input)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'success': True,
            'calculationId': result.calculation_uuid,
            'inputParameters': {
                'birthDate': calculation_input.birth_date.isoformat(),
                'gender': calculation_input.gender,
                'contractTerm': calculation_input.contract_term,
                'calculationType': calculation_input.calculation_type,
                'inputAmount': calculation_input.input_amount,
                'email': calculation_input.email,
                'ageAtStart': result.age_at_start,
                'ageAtEnd': result.age_at_end
            },
            'results': {
                'premiumAmount': result.premium_amount,
                'insuranceSum': result.insurance_sum,
                'accumulatedCapital': result.accumulated_capital,
                'programIncome': result.program_income,
                'taxDeduction': result.tax_deduction
            },
            'redemptionValues': result.redemption_values,
            'calculatedAt': datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result.calculation_uuid}")
        return jsonify(response_data)
        
    except ValueError as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 400
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤ –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

# ====== EMAIL PROXY ENDPOINTS ======

@app.route('/api/proxy/assessment/send_manager', methods=['POST', 'OPTIONS'])
def send_assessment_email():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è assessment"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    try:
        data = request.get_json()
        subject = data.get('subject', 'Assessment Notification')
        body = data.get('body', '')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        success = send_email(subject, body)
        
        if success:
            return jsonify({"success": True, "message": "Email sent successfully"}), 200
        else:
            return jsonify({"success": False, "message": "Failed to send email"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Error in assessment email endpoint: {e}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/api/proxy/snp/send_manager', methods=['POST', 'OPTIONS'])
def send_snp_email():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è SNP"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    try:
        data = request.get_json()
        subject = data.get('subject', 'SNP Notification')
        body = data.get('body', '')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        success = send_email(subject, body)
        
        if success:
            return jsonify({"success": True, "message": "Email sent successfully"}), 200
        else:
            return jsonify({"success": False, "message": "Failed to send email"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Error in SNP email endpoint: {e}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/api/proxy/carefuture/send_manager', methods=['POST', 'OPTIONS'])
def send_carefuture_email():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Care Future"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    try:
        data = request.get_json()
        subject = data.get('subject', 'Care Future Notification')
        body = data.get('body', '')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        success = send_email(subject, body)
        
        if success:
            return jsonify({"success": True, "message": "Email sent successfully"}), 200
        else:
            return jsonify({"success": False, "message": "Failed to send email"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Error in Care Future email endpoint: {e}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/api/contact-manager', methods=['POST', 'OPTIONS'])
def contact_manager():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–∑ Care Future"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    try:
        data = request.get_json()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º email –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        subject = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ –æ—Ç {data.get('surname', '')} {data.get('name', '')}"
        
        body = f"""
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ "–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º –£–ª—å—Ç—Ä–∞"

–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
- –§–∞–º–∏–ª–∏—è: {data.get('surname', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
- –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
- –ì–æ—Ä–æ–¥: {data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}
- Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –°—Ç—Ä–∞–Ω–∏—Ü–∞: {data.get('page', 'care-future')}
- ID —Ä–∞—Å—á–µ—Ç–∞: {data.get('calculationId', '–ù–µ—Ç')}
- –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}

---
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ MiniApp
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        success = send_email(subject, body)
        
        if success:
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç {data.get('surname', '')} {data.get('name', '')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return jsonify({"success": True, "message": "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}), 200
        else:
            return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

# ====== Static files ====== 
# –í–ê–ñ–ù–û: –≠—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú–ò, –ø–æ—Å–ª–µ –≤—Å–µ—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve_react_app(path):
    logger.info(f"üìÅ Requested path: '{path}'")
    logger.info(f"üìÅ Static folder: {app.static_folder}")
    logger.info(f"üìÅ Current directory: {os.getcwd()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    file_path = os.path.join(app.static_folder, path)
    
    if path and os.path.exists(file_path) and os.path.isfile(file_path):
        logger.info(f"üìÅ Serving static file: {path}")
        return send_from_directory(app.static_folder, path)
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html (SPA)
        logger.info(f"üìÅ Serving index.html for SPA route: {path}")
        try:
            return send_from_directory(app.static_folder, 'index.html')
        except Exception as e:
            logger.error(f"‚ùå Error serving index.html: {e}")
            return "Build folder or index.html not found", 404

# ====== App startup ======
if __name__ == '__main__':
    logger.info("üöÄ Starting MiniApp Server...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ build –ø–∞–ø–∫–∏
    if not os.path.exists('build'):
        logger.error("‚ùå Build folder not found! Run 'npm run build' first")
    else:
        logger.info(f"‚úÖ Build folder found with {len(os.listdir('build'))} items")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if SMTP_PASSWORD:
        logger.info(f"üìß Email configured: {SMTP_FROM} -> {SMTP_TO}")
    else:
        logger.warning("üìß Email not configured (SMTP_PASSWORD missing)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if CARE_FUTURE_AVAILABLE:
        logger.info("üßÆ Care Future –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ: –î–û–°–¢–£–ü–ï–ù")
        logger.info("üìç Endpoints: /api/care-future/* –∏ /care-future/calculate")
    else:
        logger.warning("üßÆ Care Future –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ: –ù–ï–î–û–°–¢–£–ü–ï–ù")
        logger.info("üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ endpoints:")
        logger.info("   - GET /api/care-future/status")
    
    port = int(os.environ.get("FLASK_PORT", 4000))
    logger.info(f"üìç Server will run on port {port}")
    logger.info(f"üìç Open http://localhost:{port}/ in your browser")
    
    socketio.run(app, host='0.0.0.0', port=port, debug=False)





















