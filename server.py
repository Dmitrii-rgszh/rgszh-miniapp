# server.py

import os
import logging
import threading
import smtplib
import sys
import uuid
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from flask_socketio import SocketIO
from flask_compress import Compress
from care_future_models import NSJCalculator, CalculationInput, NSJCalculations

from db_saver import init_db, save_feedback_to_db
from polls_ws import register_poll_ws
from polls_routes import register_poll_routes
from assessment_routes import register_assessment_routes  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

# ===== –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ù–°–ñ =====
CARE_FUTURE_AVAILABLE = False
CARE_FUTURE_ERROR = None

print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ...")

try:
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    import sqlalchemy
    import psycopg2
    print("  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ó–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
    from care_future_models import init_nsj_database, NSJDataManager
    from care_future_routes import init_care_future_routes
    
    CARE_FUTURE_AVAILABLE = True
    print("  ‚úÖ –ú–æ–¥—É–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
except ImportError as e:
    CARE_FUTURE_ERROR = f"ImportError: {e}"
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print(f"  üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install psycopg2-binary sqlalchemy flask-sqlalchemy")
    
except Exception as e:
    CARE_FUTURE_ERROR = f"Error: {e}"
    print(f"  ‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")

# –ò–ú–ü–û–†–¢ –ü–û–õ–ù–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê "–ù–ê –í–°–Ø–ö–ò–ô –°–õ–£–ß–ê–ô"
try:
    from justincase_routes import register_justincase_routes
    JUSTINCASE_AVAILABLE = True
    JUSTINCASE_ERROR = None
    print("‚úÖ –ü–æ–ª–Ω—ã–π –º–æ–¥—É–ª—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π' –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    JUSTINCASE_AVAILABLE = False
    JUSTINCASE_ERROR = str(e)
    print(f"‚ö†Ô∏è –ü–æ–ª–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
except Exception as e:
    JUSTINCASE_AVAILABLE = False
    JUSTINCASE_ERROR = str(e)
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π': {e}")

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ======
import logging
import sys
import os

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if os.name == 'nt':  # Windows
    import codecs
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è stdout
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('miniapp.log', encoding='utf-8') if os.path.exists('.') else logging.NullHandler()
    ]
)

logger = logging.getLogger("server")

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã
calculator_logger = logging.getLogger('calculators')
calculator_logger.setLevel(logging.INFO)

# –ü–æ–¥–∞–≤–ª—è–µ–º –∏–∑–ª–∏—à–Ω–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('werkzeug').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)

# ====== Flask app ======
app = Flask(__name__, static_folder="build", static_url_path="")
Compress(app)


CORS(app, resources={
    r"/*": {
        "origins": [
            "http://localhost:3000",
            "http://localhost:3001", 
            "http://localhost:4000",
            "http://localhost:4001",  # –î–æ–±–∞–≤–∏—Ç—å
            "http://127.0.0.1:*",
            "https://rgszh-miniapp.org"
        ],
        "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "supports_credentials": True
    }
})

# ====== Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =====

@app.before_request
def log_request_info():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤"""
    if request.path.startswith('/api/'):
        logger.info(f"üì® {request.method} {request.path} - {request.remote_addr}")
        if request.method == 'POST' and request.is_json:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏, –Ω–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
            try:
                data_keys = list(request.get_json().keys()) if request.get_json() else []
                logger.info(f"   üìã JSON keys: {data_keys}")
            except:
                logger.info("   üìã JSON parsing failed")
    else:
        logger.info(f"üîç Incoming request: {request.method} {request.path}")

@app.after_request  
def log_response_info(response):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ API"""
    if request.path.startswith('/api/'):
        logger.info(f"üì§ {request.method} {request.path} -> {response.status_code}")
        if response.status_code >= 400:
            logger.warning(f"   ‚ö†Ô∏è Error response: {response.status}")
    return response

# ====== Socket.IO setup with optional Redis ======
redis_url = os.environ.get("REDIS_URL")
if redis_url:
    try:
        import redis
        socketio = SocketIO(
            app,
            cors_allowed_origins="*",
            message_queue=redis_url
        )
        logger.info("Socket.IO: using Redis message queue %s", redis_url)
    except ImportError:
        logger.warning("Redis not installed, running without message queue")
        socketio = SocketIO(app, cors_allowed_origins="*")
else:
    socketio = SocketIO(app, cors_allowed_origins="*")
    logger.info("Socket.IO: running without Redis message queue")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º WS-—Å–ª—É—à–∞—Ç–µ–ª–∏ –∏ REST-–º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤
register_poll_ws(socketio)
register_poll_routes(app, socketio)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è assessment
register_assessment_routes(app)

# ====== Database setup (–¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞) ======
init_db(app)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ù–°–ñ =====
print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ...")

if CARE_FUTURE_AVAILABLE:
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        print("  üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        with app.app_context():
            init_success = init_nsj_database()
            if init_success:
                print("  ‚úÖ –ë–î –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                print("  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º routes
        print("  üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è API endpoints...")
        route_success = init_care_future_routes(app)
        if route_success:
            print("  ‚úÖ API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            print("  üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
            print("    - POST /api/care-future/calculate")
            print("    - GET  /api/care-future/test")
            print("    - GET  /api/care-future/admin/status")
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ: {e}")
        CARE_FUTURE_AVAILABLE = False
        CARE_FUTURE_ERROR = str(e)
else:
    print(f"  ‚ÑπÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {CARE_FUTURE_ERROR}")

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê "–ù–ê –í–°–Ø–ö–ò–ô –°–õ–£–ß–ê–ô" =====
print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π'...")

if JUSTINCASE_AVAILABLE:
    try:
        print("  üîó –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Blueprint...")
        route_success = register_justincase_routes(app)
        if route_success:
            print("  ‚úÖ API –ø–æ–ª–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            print("  üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
            print("    - POST /api/proxy/calculator/save (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)")
            print("    - POST /api/justincase/calculate (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)")
            print("    - POST /api/justincase/validate (–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö)")
            print("    - POST /api/justincase/validate-sum (–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã)")
            print("    - POST /api/justincase/recommend-sum (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞)")
            print("    - GET  /api/justincase/config (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)")
            print("    - GET  /api/justincase/test (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)")
            print("    - GET  /api/justincase/status (—Å—Ç–∞—Ç—É—Å)")
            print("  üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏:")
            print("    - –ê–∫—Ç—É–∞—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Excel (11,444+ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)")
            print("    - –ö–í –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ —Å—Ä–æ–∫–∞–º (20%-60%)")
            print("    - –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –ù–° –∏ –ö–ó")
            print("    - –í—ã–∫—É–ø–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
            print("    - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞—Å—Å—Ä–æ—á–∫–∏")
            print("    - –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã")
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ API –ø–æ–ª–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
            
    except Exception as e:  # <-- –í–û–¢ –≠–¢–ê –°–¢–†–û–ö–ê –û–¢–°–£–¢–°–¢–í–£–ï–¢!
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
        JUSTINCASE_AVAILABLE = False
        JUSTINCASE_ERROR = str(e)
else:
    print(f"  ‚ÑπÔ∏è –ü–æ–ª–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π' –æ—Ç–∫–ª—é—á–µ–Ω: {JUSTINCASE_ERROR}")

# ====== Email Configuration ======
SMTP_SERVER = os.environ.get("SMTP_SERVER", "smtp.yandex.ru")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SMTP_USER = os.environ.get("SMTP_USER", "rgszh-miniapp@yandex.ru")
SMTP_PASSWORD = os.environ.get("SMTP_PASSWORD", "")
SMTP_FROM = os.environ.get("SMTP_FROM", "rgszh-miniapp@yandex.ru")
SMTP_TO = os.environ.get("SMTP_TO", "zerotlt@mail.ru")
SMTP_TO_ADDITIONAL = os.environ.get("SMTP_TO_ADDITIONAL", "")

def get_email_recipients():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π email
    """
    recipients = [SMTP_TO]
    if SMTP_TO_ADDITIONAL:
        recipients.append(SMTP_TO_ADDITIONAL)
    return recipients

def send_email(subject, body, to_email=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π email —á–µ—Ä–µ–∑ SMTP (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π)
    –ï—Å–ª–∏ to_email –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    """
    try:
        if not SMTP_PASSWORD:
            logger.warning("üìß SMTP password not configured, skipping email send")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if to_email:
            recipients = [to_email]
        else:
            recipients = get_email_recipients()
        
        logger.info(f"üìß Sending email to {len(recipients)} recipients: {subject}")
        logger.info(f"üìß Recipients: {', '.join(recipients)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SMTP
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()  # –í–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            server.login(SMTP_USER, SMTP_PASSWORD)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            success_count = 0
            for recipient in recipients:
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    msg = MIMEMultipart()
                    msg['From'] = SMTP_FROM
                    msg['To'] = recipient
                    msg['Subject'] = subject
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                    msg.attach(MIMEText(body, 'plain', 'utf-8'))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    text = msg.as_string()
                    server.sendmail(SMTP_FROM, recipient, text)
                    logger.info(f"‚úÖ Email sent successfully to {recipient}")
                    success_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå Failed to send email to {recipient}: {e}")
        
        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        success = success_count > 0
        logger.info(f"üìß Email sending summary: {success_count}/{len(recipients)} successful")
        return success
        
    except Exception as e:
        logger.error(f"‚ùå Failed to send email: {e}")
        return False
    


def send_assessment_email(subject, body):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –¥–ª—è Assessment –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:
    - zerotlt@mail.ru
    - Polina.Iureva@rgsl.ru
    (–ë–ï–ó I.dav@mail.ru)
    """
    try:
        if not SMTP_PASSWORD:
            logger.warning("üìß SMTP password not configured, skipping email send")
            return False
        
        # –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –¥–ª—è Assessment
        assessment_recipients = [
            "zerotlt@mail.ru",
            "Polina.Iureva@rgsl.ru"
        ]
        
        logger.info(f"üìß [Assessment] Sending email to {len(assessment_recipients)} recipients: {subject}")
        logger.info(f"üìß [Assessment] Recipients: {', '.join(assessment_recipients)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SMTP
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()  # –í–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            server.login(SMTP_USER, SMTP_PASSWORD)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            success_count = 0
            for recipient in assessment_recipients:
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    msg = MIMEMultipart()
                    msg['From'] = SMTP_FROM
                    msg['To'] = recipient
                    msg['Subject'] = subject
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                    msg.attach(MIMEText(body, 'plain', 'utf-8'))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    text = msg.as_string()
                    server.sendmail(SMTP_FROM, recipient, text)
                    logger.info(f"‚úÖ [Assessment] Email sent successfully to {recipient}")
                    success_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå [Assessment] Failed to send email to {recipient}: {e}")
        
        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        success = success_count > 0
        logger.info(f"üìß [Assessment] Email sending summary: {success_count}/{len(assessment_recipients)} successful")
        return success
        
    except Exception as e:
        logger.error(f"‚ùå [Assessment] Failed to send email: {e}")
        return False

def send_carefuture_email_to_managers(subject, body):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: zerotlt@mail.ru, I.dav@mail.ru
    """
    try:
        if not SMTP_PASSWORD:
            logger.warning("üìß SMTP password not configured, skipping email send")
            return False
        
        # –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ
        carefuture_recipients = [
            "zerotlt@mail.ru",
            "I.dav@mail.ru"
        ]
        
        logger.info(f"üìß [CareFuture] Sending email to {len(carefuture_recipients)} recipients: {subject}")
        logger.info(f"üìß [CareFuture] Recipients: {', '.join(carefuture_recipients)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SMTP
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()  # –í–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            server.login(SMTP_USER, SMTP_PASSWORD)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            success_count = 0
            for recipient in carefuture_recipients:
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    msg = MIMEMultipart()
                    msg['From'] = SMTP_FROM
                    msg['To'] = recipient
                    msg['Subject'] = subject
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                    msg.attach(MIMEText(body, 'plain', 'utf-8'))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    text = msg.as_string()
                    server.sendmail(SMTP_FROM, recipient, text)
                    logger.info(f"‚úÖ [CareFuture] Email sent successfully to {recipient}")
                    success_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå [CareFuture] Failed to send email to {recipient}: {e}")
        
        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        success = success_count > 0
        logger.info(f"üìß [CareFuture] Email sending summary: {success_count}/{len(carefuture_recipients)} successful")
        return success
        
    except Exception as e:
        logger.error(f"‚ùå [CareFuture] Failed to send email: {e}")
        return False

def print_startup_summary():
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º"""
    print("\n" + "="*60)
    print("üöÄ –°–ï–†–í–ï–† TELEGRAM MINIAPP –ó–ê–ü–£–©–ï–ù")
    print("="*60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê URL: http://176.109.110.217")
    print("\nüìä –°–¢–ê–¢–£–° –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–û–í:")
    
    if CARE_FUTURE_AVAILABLE:
        print("  ‚úÖ '–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º' (–ù–°–ñ) - –†–ê–ë–û–¢–ê–ï–¢")
        print("     üìä –ê–∫—Ç—É–∞—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –≤—ã–∫—É–ø–Ω—ã–µ —Å—É–º–º—ã, –Ω–∞–ª–æ–≥–æ–≤—ã–µ –≤—ã—á–µ—Ç—ã")
    else:
        print(f"  ‚ùå '–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º' (–ù–°–ñ) - –û–®–ò–ë–ö–ê: {CARE_FUTURE_ERROR}")
    
    
    
    print("="*60)
    
# ====== Endpoints ======

@app.route('/api/feedback/save', methods=['POST', 'OPTIONS'])
def save_feedback():
    logger.info("‚ûú %s %s", request.method, request.path)
    if request.method == "OPTIONS":
        return '', 200

    try:
        payload = request.get_json(force=True)
        logger.info("   payload keys: %s", list(payload.keys()))
    except Exception as e:
        logger.error("   JSON parse error: %s", e)
        return jsonify({"error": "Invalid JSON"}), 400

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    try:
        save_feedback_to_db(payload)
        return jsonify({"success": True}), 200
    except Exception as e:
        logger.error("   DB save error: %s", e)
        return jsonify({"error": "Database error"}), 500

# ===== –°–¢–ê–¢–£–° ENDPOINTS =====
@app.route('/api/status', methods=['GET'])
def api_status_updated():
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö API"""
    return jsonify({
        'status': 'ok',
        'timestamp': datetime.now().isoformat(),
        'server_version': '2.0.0',
        'services': {
            'care_future': {
                'available': CARE_FUTURE_AVAILABLE,
                'error': CARE_FUTURE_ERROR,
                'type': '–ù–°–ñ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏',
                'version': 'v1.15',
                'status': 'full' if CARE_FUTURE_AVAILABLE else 'unavailable'
            },
            'justincase': {
                'available': JUSTINCASE_AVAILABLE,
                'error': JUSTINCASE_ERROR,
                'type': '–†–∏—Å–∫–æ–≤–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏',
                'version': '2.0.0-complete' if JUSTINCASE_AVAILABLE else 'unavailable',
                'status': 'full' if JUSTINCASE_AVAILABLE else 'unavailable',
                'actuarial_tables_loaded': JUSTINCASE_AVAILABLE,
                'excel_integration': JUSTINCASE_AVAILABLE
            },
            'polls': {
                'available': True,
                'type': '–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–æ—Å–æ–≤'
            },
            'feedback': {
                'available': True,
                'type': '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'
            },
            'assessment': {
                'available': True,
                'type': '–û—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤'
            }
        },
        'endpoints': {
            '/api/care-future/*': '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ "–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º" (–ø–æ–ª–Ω—ã–π)',
            '/api/proxy/calculator/save': '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" (–ø–æ–ª–Ω—ã–π)' if JUSTINCASE_AVAILABLE else '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" (–≤—Ä–µ–º–µ–Ω–Ω—ã–π)',
            '/api/justincase/*': 'API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" (–ø–æ–ª–Ω—ã–π)' if JUSTINCASE_AVAILABLE else 'API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
            '/api/polls/*': '–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–æ—Å–æ–≤',
            '/api/feedback/save': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
            '/api/assessment/*': '–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤'
        },
        'calculators_comparison': {
            'care_future': {
                'name': '–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º',
                'type': '–ù–°–ñ (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ)',
                'features': ['–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è', '–í—ã–∫—É–ø–Ω—ã–µ —Å—É–º–º—ã', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥'],
                'status': '–†–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª–Ω—ã–π)' if CARE_FUTURE_AVAILABLE else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'accuracy': '–ü–æ–ª–Ω–∞—è'
            },
            'justincase': {
                'name': '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π',
                'type': '–†–∏—Å–∫–æ–≤–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
                'features': ['–ê–∫—Ç—É–∞—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã', '–ù–°', '–ö–ó', '–ö–í –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã', '–í—ã–∫—É–ø—ã'] if JUSTINCASE_AVAILABLE else ['–ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã', '–ù–°', '–ö–ó', '–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã'],
                'status': '–†–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª–Ω—ã–π)' if JUSTINCASE_AVAILABLE else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'accuracy': '–ü–æ–ª–Ω–∞—è (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –†–ì–°)' if JUSTINCASE_AVAILABLE else '–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–∞—è',
                'limitations': [] if JUSTINCASE_AVAILABLE else ['–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã', '–ù–µ—Ç –∞–∫—Ç—É–∞—Ä–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü']
            }
        },
        'important_notes': [] if JUSTINCASE_AVAILABLE else [
            '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ',
            '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –†–ì–°',
            '–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –º–æ–¥—É–ª—å —Å –∞–∫—Ç—É–∞—Ä–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏'
        ]
    })

@app.route('/health', methods=['GET'])
def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    health_status = {
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'uptime': 'unknown',  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç uptime
        'services': {
            'care_future': 'up' if CARE_FUTURE_AVAILABLE else 'down',
            'justincase': 'up' if JUSTINCASE_AVAILABLE else 'down',
            'database': 'up',  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç
            'polls': 'up',
            'feedback': 'up',
            'assessment': 'up'
        },
        'version': {
            'server': '2.0.0',
            'care_future': 'v1.15' if CARE_FUTURE_AVAILABLE else None,
            'justincase': '2.0.0-complete' if JUSTINCASE_AVAILABLE else None
        },
        'service_details': {
            'justincase': {
                'mode': 'full' if JUSTINCASE_AVAILABLE else 'unavailable',
                'actuarial_tables': JUSTINCASE_AVAILABLE,
                'accuracy': 'high' if JUSTINCASE_AVAILABLE else 'unknown',
                'note': 'Full calculator with actuarial tables loaded' if JUSTINCASE_AVAILABLE else 'Calculator not available'
            }
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    down_services = [name for name, status in health_status['services'].items() if status == 'down']
    
    if len(down_services) > 0:
        health_status['status'] = 'degraded'
        health_status['issues'] = down_services
    
    status_code = 200 if health_status['status'] in ['healthy', 'degraded'] else 503
    return jsonify(health_status), status_code

# ===== CARE FUTURE ENDPOINTS =====

@app.route('/api/care-future/status', methods=['GET'])
def care_future_status():
    """–°—Ç–∞—Ç—É—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ"""
    return jsonify({
        'available': CARE_FUTURE_AVAILABLE,
        'error': CARE_FUTURE_ERROR,
        'files_exist': {
            'care_future_models.py': os.path.exists('care_future_models.py'),
            'care_future_routes.py': os.path.exists('care_future_routes.py'),
            'care_future_schema.sql': os.path.exists('care_future_schema.sql'),
            'care_future_data.sql': os.path.exists('care_future_data.sql')
        }
    })

@app.route('/api/care-future/test', methods=['GET'])
def care_future_test():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ"""
    try:
        if not CARE_FUTURE_AVAILABLE:
            return jsonify({
                'status': 'error',
                'message': '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'error': CARE_FUTURE_ERROR
            }), 503
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞
        from care_future_models import NSJCalculator, CalculationInput
        from datetime import date
        
        test_input = CalculationInput(
            birth_date=date(1990, 1, 1),
            gender='male',
            contract_term=5,
            calculation_type='from_premium',
            input_amount=960000,
            email='test@example.com'
        )
        
        calculator = NSJCalculator()
        result = calculator.calculate(test_input)
        
        return jsonify({
            'status': 'success',
            'message': '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
            'test_result': {
                'calculation_id': result.calculation_uuid,
                'premium_amount': result.premium_amount,
                'insurance_sum': result.insurance_sum,
                'accumulated_capital': result.accumulated_capital,
                'program_income': result.program_income,
                'tax_deduction': result.tax_deduction
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/care-future/calculate', methods=['POST', 'OPTIONS'])
def care_future_calculate():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ù–°–ñ"""
    if request.method == "OPTIONS":
        return '', 200
    
    if not CARE_FUTURE_AVAILABLE:
        return jsonify({
            'success': False,
            'error': f'–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {CARE_FUTURE_ERROR}'
        }), 503
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        if not data:
            return jsonify({
                'success': False,
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞'
            }), 400
        
        logger.info(f"üìä –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç: {data.get('calculationType', 'unknown')} –¥–ª—è {data.get('gender', 'unknown')}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from care_future_models import NSJCalculator, CalculationInput
        from datetime import datetime, date
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            birth_date = datetime.strptime(data['birthDate'], '%Y-%m-%d').date()
        except (KeyError, ValueError) as e:
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD'
            }), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['gender', 'contractTerm', 'calculationType', 'inputAmount']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            return jsonify({
                'success': False,
                'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {", ".join(missing_fields)}'
            }), 400
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏: calculation_input = CalculationInput(...)
        # –ó–∞–º–µ–Ω–∏—Ç–µ –≤–µ—Å—å –±–ª–æ–∫ –Ω–∞:

        calculation_input = CalculationInput(
            birth_date=birth_date,
            gender=data['gender'],
            contract_term=int(data['contractTerm']),
            calculation_type=data['calculationType'],
            input_amount=int(data['inputAmount']),
            email=data.get('email'),
            yearly_income=data.get('yearlyIncome'),  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
            calculation_date=date.today()
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calculator = NSJCalculator()
        result = calculator.calculate(calculation_input)

        logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {result.calculation_uuid}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'success': True,
            'calculationId': result.calculation_uuid,
            'inputParameters': {
                'birthDate': calculation_input.birth_date.isoformat(),
                'gender': calculation_input.gender,
                'contractTerm': calculation_input.contract_term,
                'calculationType': calculation_input.calculation_type,
                'inputAmount': calculation_input.input_amount,
                'email': calculation_input.email,
                'ageAtStart': result.age_at_start,
                'ageAtEnd': result.age_at_end
            },
            'results': {
                'premiumAmount': result.premium_amount,
                'insuranceSum': result.insurance_sum,
                'accumulatedCapital': result.accumulated_capital,
                'programIncome': result.program_income,
                'taxDeduction': result.tax_deduction
            },
            'redemptionValues': result.redemption_values,
            'calculatedAt': datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result.calculation_uuid}")
        return jsonify(response_data)
        
    except ValueError as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 400
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/care-future/calculate', methods=['POST', 'OPTIONS'])
def care_future_proxy():
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–∫—Å–∏—Ä—É—é—â–∏–π endpoint –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω)"""
    logger.info("üåê ‚ûú %s %s (PROXY)", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    if not CARE_FUTURE_AVAILABLE:
        logger.error("‚ùå –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return jsonify({
            'success': False,
            'error': f'–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {CARE_FUTURE_ERROR}'
        }), 503
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        if not data:
            return jsonify({
                'success': False,
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞'
            }), 400
        
        logger.info(f"üìä –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞: {data.get('calculationType', 'unknown')} –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {data.get('birthDate', 'unknown')}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        from care_future_models import NSJCalculator, CalculationInput
        from datetime import datetime, date
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            birth_date = datetime.strptime(data['birthDate'], '%Y-%m-%d').date()
        except (KeyError, ValueError) as e:
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD'
            }), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['gender', 'contractTerm', 'calculationType', 'inputAmount']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            return jsonify({
                'success': False,
                'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {", ".join(missing_fields)}'
            }), 400
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        calculation_input = CalculationInput(
            birth_date=birth_date,
            gender=data['gender'],
            contract_term=int(data['contractTerm']),
            calculation_type=data['calculationType'],
            input_amount=int(data['inputAmount']),
            email=data.get('email'),
            yearly_income=data.get('yearlyIncome'),
            calculation_date=date.today()
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calculator = NSJCalculator()
        result = calculator.calculate(calculation_input)

        # ‚úÖ –î–û–ë–ê–í–¨–¢–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
        try:
            calculator.save_calculation_to_db(calculation_input, result)
            logger.info(f"üíæ –†–∞—Å—á–µ—Ç {result.calculation_uuid} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        except Exception as save_error:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç: {save_error}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'success': True,
            'calculationId': result.calculation_uuid,
            'inputParameters': {
                'birthDate': calculation_input.birth_date.isoformat(),
                'gender': calculation_input.gender,
                'contractTerm': calculation_input.contract_term,
                'calculationType': calculation_input.calculation_type,
                'inputAmount': calculation_input.input_amount,
                'email': calculation_input.email,
                'ageAtStart': result.age_at_start,
                'ageAtEnd': result.age_at_end
            },
            'results': {
                'premiumAmount': result.premium_amount,
                'insuranceSum': result.insurance_sum,
                'accumulatedCapital': result.accumulated_capital,
                'programIncome': result.program_income,
                'taxDeduction': result.tax_deduction
            },
            'redemptionValues': result.redemption_values,
            'calculatedAt': datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result.calculation_uuid}")
        return jsonify(response_data)
        
    except ValueError as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 400
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤ –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500



# ====== EMAIL PROXY ENDPOINTS ======

@app.route('/api/proxy/assessment/send_manager', methods=['POST', 'OPTIONS'])
def send_assessment_email_endpoint():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è assessment"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    try:
        data = request.get_json()
        subject = data.get('subject', 'Assessment Notification')
        body = data.get('body', '')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è Assessment
        success = send_assessment_email(subject, body)
        
        if success:
            return jsonify({"success": True, "message": "Email sent successfully"}), 200
        else:
            return jsonify({"success": False, "message": "Failed to send email"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Error in assessment email endpoint: {e}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/api/proxy/snp/send_manager', methods=['POST', 'OPTIONS'])
def send_snp_email():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è SNP"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    try:
        data = request.get_json()
        subject = data.get('subject', 'SNP Notification')
        body = data.get('body', '')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        success = send_email(subject, body)
        
        if success:
            return jsonify({"success": True, "message": "Email sent successfully"}), 200
        else:
            return jsonify({"success": False, "message": "Failed to send email"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Error in SNP email endpoint: {e}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/api/proxy/carefuture/send_manager', methods=['POST', 'OPTIONS'])
def send_carefuture_email():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Care Future –ù–ê –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –ê–î–†–ï–°–ê –ú–ï–ù–ï–î–ñ–ï–†–û–í"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    try:
        data = request.get_json()
        if not data:
            logger.error("‚ùå [CareFuture] No JSON data received")
            return jsonify({"success": False, "message": "No data provided"}), 400
            
        subject = data.get('subject', 'Care Future Notification')
        body = data.get('body', '')
        
        logger.info(f"üìß [CareFuture] Processing email request: {subject[:50]}...")
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–£–Æ –§–£–ù–ö–¶–ò–Æ –î–õ–Ø CARE FUTURE
        success = send_carefuture_email_to_managers(subject, body)
        
        if success:
            logger.info("‚úÖ [CareFuture] Email sent successfully to managers")
            return jsonify({"success": True, "message": "Email sent successfully"}), 200
        else:
            logger.error("‚ùå [CareFuture] Failed to send email")
            return jsonify({"success": False, "message": "Failed to send email"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå [CareFuture] Error in Care Future email endpoint: {e}")
        return jsonify({"success": False, "error": "Internal server error"}), 500


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è contact_manager –¥–ª—è server.py:

def send_carefuture_email_with_user(subject, body, user_email):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –¥–ª—è CalcFuture –Ω–∞ 3 –∞–¥—Ä–µ—Å–∞:
    - zerotlt@mail.ru
    - I.dav@mail.ru  
    - email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        if not SMTP_PASSWORD:
            logger.warning("üìß SMTP password not configured, skipping email send")
            return False
        
        # ‚úÖ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –¥–ª—è CareFuture
        carefuture_recipients = [
            "zerotlt@mail.ru",
            "I.dav@mail.ru"
        ]
        
        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
        if user_email and user_email.strip():
            user_email_clean = user_email.strip().lower()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email
            if user_email_clean.endswith('@vtb.ru') or user_email_clean.endswith('@rgsl.ru'):
                carefuture_recipients.append(user_email_clean)
                logger.info(f"üìß [CareFuture] Added user email: {user_email_clean}")
            else:
                logger.warning(f"üìß [CareFuture] Invalid user email format: {user_email}")
        
        logger.info(f"üìß [CareFuture] Sending email to {len(carefuture_recipients)} recipients: {subject}")
        logger.info(f"üìß [CareFuture] Recipients: {', '.join(carefuture_recipients)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SMTP
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USER, SMTP_PASSWORD)
            
            success_count = 0
            for recipient in carefuture_recipients:
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    msg = MIMEMultipart()
                    msg['From'] = SMTP_FROM
                    msg['To'] = recipient
                    msg['Subject'] = subject
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                    msg.attach(MIMEText(body, 'plain', 'utf-8'))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    text = msg.as_string()
                    server.sendmail(SMTP_FROM, recipient, text)
                    logger.info(f"‚úÖ [CareFuture] Email sent successfully to {recipient}")
                    success_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå [CareFuture] Failed to send email to {recipient}: {e}")
        
        success = success_count > 0
        logger.info(f"üìß [CareFuture] Email sending summary: {success_count}/{len(carefuture_recipients)} successful")
        return success
        
    except Exception as e:
        logger.error(f"‚ùå [CareFuture] Failed to send email: {e}")
        return False
    
@app.route('/api/contact-manager', methods=['POST', 'OPTIONS'])
def contact_manager():
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    ‚úÖ CareFuture: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ zerotlt@mail.ru, I.dav@mail.ru + email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ‚úÖ Assessment: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ (–≤–∫–ª—é—á–∞—è Polina.Iureva@rgsl.ru)
    """
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    try:
        data = request.get_json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å calculationId
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å calculationId
        calculation_data = None
        if data.get('calculationId'):
            try:
                calc_id = data['calculationId']
                logger.info(f"üîç –ò—â–µ–º —Ä–∞—Å—á–µ—Ç —Å ID: {calc_id}")
                
                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ú–ï–¢–û–î –ö–õ–ê–°–°–ê (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
                calculation = NSJCalculations.find_by_uuid(calc_id)
                
                if calculation:
                    calculation_data = calculation.to_dict()
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞—Å—á–µ—Ç: {calc_id}")
                    logger.info(f"   –î–∞–Ω–Ω—ã–µ: –≤–æ–∑—Ä–∞—Å—Ç {calculation_data.get('age_at_start')}, —Å—Ä–æ–∫ {calculation_data.get('contract_term')}")
                else:
                    logger.warning(f"‚ö†Ô∏è –†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {calc_id}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ä–∞—Å—á–µ—Ç—ã –≤ –ë–î
                    total_count = db.session.query(NSJCalculations).count()
                    logger.info(f"   –í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ –ë–î: {total_count}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ –ë–î: {e}")
                import traceback
                logger.error(f"   Traceback: {traceback.format_exc()}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º email
        page = data.get('page', 'unknown')
        surname = data.get('surname', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        city = data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        user_email = data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        # ‚úÖ –†–ê–ó–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –†–ê–ó–ù–´–• –°–¢–†–ê–ù–ò–¶
        if page == 'care-future':
            subject = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ù–°–ñ ¬´–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º¬ª –æ—Ç {surname} {name}"
            logger.info(f"üìß [CareFuture] Processing manager request from: {surname} {name}")
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–≤–∫–ª—é—á–∞—è Assessment)
            subject = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –æ—Ç {surname} {name}"
            logger.info(f"üìß [Other] Processing manager request from: {surname} {name}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        body = f"""
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é

–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:
- –§–∞–º–∏–ª–∏—è: {surname}
- –ò–º—è: {name}
- –ì–æ—Ä–æ–¥: {city}
- Email: {user_email}
"""
        if calculation_data:
            gender_ru = '–ú—É–∂—Å–∫–æ–π' if calculation_data['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'
            birth_date_str = calculation_data.get('birth_date', '').split('T')[0] if calculation_data.get('birth_date') else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    
            # –ö–∞—Ä—Ç–∞ —É—Ä–æ–≤–Ω–µ–π –¥–æ—Ö–æ–¥–∞
            income_map = {
                'up_to_2_4': '–î–æ 2,4 –º–ª–Ω ‚ÇΩ',
                'over_2_4': '–°–≤—ã—à–µ 2,4 –º–ª–Ω ‚ÇΩ', 
                'over_5': '–°–≤—ã—à–µ 5 –º–ª–Ω ‚ÇΩ',
                'over_20': '–°–≤—ã—à–µ 20 –º–ª–Ω ‚ÇΩ',
                'over_50': '–°–≤—ã—à–µ 50 –º–ª–Ω ‚ÇΩ'
            }
    
            yearly_income_text = income_map.get(calculation_data.get('yearly_income', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')
    
            body += f"""

–ü–ê–†–ê–ú–ï–¢–†–´ –°–¢–†–ê–•–û–í–ê–ù–ò–Ø:
- –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_str}
- –ü–æ–ª: {gender_ru}
- –í–æ–∑—Ä–∞—Å—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏—è: {calculation_data.get('age_at_start', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç
- –°—Ä–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {calculation_data.get('contract_term', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç

–§–ò–ù–ê–ù–°–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:
- –ï–∂–µ–≥–æ–¥–Ω—ã–π –≤–∑–Ω–æ—Å: {calculation_data.get('premium_amount', 0):,} ‚ÇΩ
- –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {calculation_data.get('insurance_sum', 0):,} ‚ÇΩ
- –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {calculation_data.get('accumulated_capital', 0):,} ‚ÇΩ
- –î–æ—Ö–æ–¥ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {calculation_data.get('program_income', 0):,} ‚ÇΩ
- –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç (–∑–∞ –≤–µ—Å—å —Å—Ä–æ–∫): {calculation_data.get('tax_deduction', 0):,} ‚ÇΩ
- –£—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞: {yearly_income_text}

–¢–ò–ü –†–ê–°–ß–ï–¢–ê:
- {('–ü–æ —Ä–∞–∑–º–µ—Ä—É –≤–∑–Ω–æ—Å–∞' if calculation_data.get('calculation_type') == 'from_premium' else '–ü–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º–µ')}
- –í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {calculation_data.get('input_amount', 0):,} ‚ÇΩ
"""
        else:
            body += f"""

–ü–ê–†–ê–ú–ï–¢–†–´ –°–¢–†–ê–•–û–í–ê–ù–ò–Ø:
- –†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ID: {data.get('calculationId', '–ù–µ—Ç')})
"""
        
        body += f"""

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}
- ID —Ä–∞—Å—á–µ—Ç–∞: {data.get('calculationId', '–ù–µ—Ç')}
- –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}

---
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ MiniApp
        """
        
        # ‚úÖ –í–´–ë–ò–†–ê–ï–ú –§–£–ù–ö–¶–ò–Æ –û–¢–ü–†–ê–í–ö–ò –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –°–¢–†–ê–ù–ò–¶–´
        if page == 'care-future':
            # –î–ª—è CareFuture –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ 3 –∞–¥—Ä–µ—Å–∞
            success = send_carefuture_email_with_user(subject, body, user_email)
            logger_prefix = "[CareFuture]"
        elif page == 'assessment':
            # –î–ª—è Assessment –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 2 –∞–¥—Ä–µ—Å–∞ (–±–µ–∑ I.dav@mail.ru)
            success = send_assessment_email(subject, body)
            logger_prefix = "[Assessment]"
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            success = send_email(subject, body)
            logger_prefix = "[Other]"
        
        if success:
            logger.info(f"‚úÖ {logger_prefix} –ó–∞—è–≤–∫–∞ –æ—Ç {surname} {name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return jsonify({"success": True, "message": "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}), 200
        else:
            logger.error(f"‚ùå {logger_prefix} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –æ—Ç {surname} {name}")
            return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

# ===== –ü–†–û–í–ï–†–¨–¢–ï –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –§–£–ù–ö–¶–ò–Æ get_email_recipients() =====
# –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Polina.Iureva@rgsl.ru –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è CareFuture

def get_email_recipients():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π email –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Assessment –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –ù–ï –¥–ª—è CareFuture)
    """
    recipients = [SMTP_TO]  # zerotlt@mail.ru
    if SMTP_TO_ADDITIONAL:
        recipients.append(SMTP_TO_ADDITIONAL)  # I.dav@mail.ru
    
    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º Polina.Iureva@rgsl.ru –¥–ª—è Assessment (–Ω–æ –ù–ï –¥–ª—è CareFuture)
    recipients.append("Polina.Iureva@rgsl.ru")
    
    return recipients

@app.errorhandler(404)
def handle_404(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤"""
    if request.path.startswith('/api/'):
        return jsonify({
            'success': False,
            'error': 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
            'path': request.path,
            'available_calculators': {
                'care_future': CARE_FUTURE_AVAILABLE,
                'justincase': JUSTINCASE_AVAILABLE
            },
            'suggestion': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'
        }), 404
    return str(error), 404

@app.errorhandler(500)
def handle_500(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –¥–ª—è API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤"""
    if request.path.startswith('/api/'):
        logger.error(f"‚ùå Internal server error on {request.path}: {error}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            'path': request.path,
            'timestamp': datetime.now().isoformat(),
            'suggestion': '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
        }), 500
    return str(error), 500

# ====== Static files ====== 
# –í–ê–ñ–ù–û: –≠—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú–ò, –ø–æ—Å–ª–µ –≤—Å–µ—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve_react_app(path):
    logger.info(f"üìÅ Requested path: '{path}'")
    logger.info(f"üìÅ Static folder: {app.static_folder}")
    logger.info(f"üìÅ Current directory: {os.getcwd()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    file_path = os.path.join(app.static_folder, path)
    
    if path and os.path.exists(file_path) and os.path.isfile(file_path):
        logger.info(f"üìÅ Serving static file: {path}")
        return send_from_directory(app.static_folder, path)
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html (SPA)
        logger.info(f"üìÅ Serving index.html for SPA route: {path}")
        try:
            return send_from_directory(app.static_folder, 'index.html')
        except Exception as e:
            logger.error(f"‚ùå Error serving index.html: {e}")
            return "Build folder or index.html not found", 404

# ====== App startup ======
if __name__ == '__main__':
    logger.info("üöÄ Starting MiniApp Server...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ build –ø–∞–ø–∫–∏
    if not os.path.exists('build'):
        logger.error("‚ùå Build folder not found! Run 'npm run build' first")
    else:
        logger.info(f"‚úÖ Build folder found with {len(os.listdir('build'))} items")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if SMTP_PASSWORD:
        recipients = get_email_recipients()
        logger.info(f"üìß Email configured: {SMTP_FROM} -> {', '.join(recipients)}")
        if SMTP_TO_ADDITIONAL:
            logger.info(f"üìß Additional recipient configured: {SMTP_TO_ADDITIONAL}")
    else:
        logger.warning("üìß Email not configured (SMTP_PASSWORD missing)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if CARE_FUTURE_AVAILABLE:
        logger.info("üßÆ Care Future –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ: –î–û–°–¢–£–ü–ï–ù")
        logger.info("üìç Endpoints: /api/care-future/* –∏ /care-future/calculate")
    else:
        logger.warning("üßÆ Care Future –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ: –ù–ï–î–û–°–¢–£–ü–ï–ù")
        logger.info("üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ endpoints:")
        logger.info("   - GET /api/care-future/status")
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    print_startup_summary()
    
    flask_port = os.environ.get("FLASK_PORT", "4000")
    # –û—á–∏—â–∞–µ–º –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    flask_port = flask_port.split('#')[0].strip()
    port = int(flask_port)
    logger.info(f"üìç Server will run on port {port}")
    logger.info(f"üìç Open http://localhost:{port}/ in your browser")
    
    socketio.run(app, host='0.0.0.0', port=port, debug=False)





















