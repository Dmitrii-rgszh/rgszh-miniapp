# care_future_calculator_fixed.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –ù–°–ñ
# –¢–æ—á–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ª–æ–≥–∏–∫—É –∏–∑ Excel —Ñ–∞–π–ª–∞ "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä –ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ v.1.15"

import logging
import uuid
from datetime import date, datetime
from decimal import Decimal, ROUND_HALF_UP
from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass

from db_saver import db
from care_future_models import (
    NSJCalculations, NSJRiskRates, NSJRedemptionRates, 
    NSJCalculatorSettings, CalculationInput, CalculationResult
)

logger = logging.getLogger("NSJCalculatorFixed")

class NSJCalculatorFixed:
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ —Å —Ç–æ—á–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏–∑ Excel —Ñ–∞–π–ª–∞
    """
    
    def __init__(self):
        self.logger = logging.getLogger("NSJCalculatorFixed")
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ–∂–∏—Ç–∏—è –ø–æ —Å—Ä–æ–∫–∞–º (–∏–∑ –ª–∏—Å—Ç–∞ "–∫_–†–∞—Å—á–µ—Ç—á–∏–∫")
        self.survival_coefficients = {
            5: 1.34,
            6: 1.38, 
            7: 1.46,
            8: 1.54,
            9: 1.63,
            10: 1.73,
            11: 1.82,
            12: 1.92,
            13: 2.03,
            14: 2.15,
            15: 2.28,
            16: 2.42,
            17: 2.57,
            18: 2.74,
            19: 2.92,
            20: 3.11
        }
        
        # –¢–∞—Ä–∏—Ñ—ã –ø–æ —Ä–∏—Å–∫–∞–º (–∏–∑ –ª–∏—Å—Ç–∞ "–∫_–¢–∞—Ä–∏—Ñ—ã –ø–æ —Ä–∏—Å–∫–∞–º")
        self.risk_tariffs = {
            5: {'survival': 0.981, 'death_immediate': 0.0063, 'disability': 0.0016, 'death_deferred': 0.0111},
            6: {'survival': 0.9764, 'death_immediate': 0.0076, 'disability': 0.0021, 'death_deferred': 0.0139},
            7: {'survival': 0.9715, 'death_immediate': 0.009, 'disability': 0.0026, 'death_deferred': 0.0169},
            8: {'survival': 0.9661, 'death_immediate': 0.0105, 'disability': 0.0032, 'death_deferred': 0.0202},
            9: {'survival': 0.96, 'death_immediate': 0.0122, 'disability': 0.0039, 'death_deferred': 0.0239},
            10: {'survival': 0.9535, 'death_immediate': 0.014, 'disability': 0.0046, 'death_deferred': 0.0279},
            11: {'survival': 0.9457, 'death_immediate': 0.0165, 'disability': 0.0055, 'death_deferred': 0.0323},
            12: {'survival': 0.9372, 'death_immediate': 0.0192, 'disability': 0.0066, 'death_deferred': 0.037},
            13: {'survival': 0.928, 'death_immediate': 0.0222, 'disability': 0.0077, 'death_deferred': 0.0421},
            14: {'survival': 0.918, 'death_immediate': 0.0255, 'disability': 0.009, 'death_deferred': 0.0475},
            15: {'survival': 0.9071, 'death_immediate': 0.0291, 'disability': 0.0105, 'death_deferred': 0.0533},
            16: {'survival': 0.8956, 'death_immediate': 0.0328, 'disability': 0.0121, 'death_deferred': 0.0595},
            17: {'survival': 0.8831, 'death_immediate': 0.0369, 'disability': 0.0138, 'death_deferred': 0.0662},
            18: {'survival': 0.8695, 'death_immediate': 0.0414, 'disability': 0.0157, 'death_deferred': 0.0734},
            19: {'survival': 0.8547, 'death_immediate': 0.0464, 'disability': 0.0178, 'death_deferred': 0.0811},
            20: {'survival': 0.8393, 'death_immediate': 0.0517, 'disability': 0.0201, 'death_deferred': 0.0889}
        }
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã–∫—É–ø–Ω—ã—Ö —Å—É–º–º (–∏–∑ –ª–∏—Å—Ç–∞ "–∫_–í—ã–∫—É–ø–Ω—ã–µ —Å—É–º–º—ã")
        self.redemption_percentages = {
            5: {3: 0.7, 4: 0.8, 5: 0.9},
            6: {3: 0.6, 4: 0.7, 5: 0.8, 6: 0.9},
            7: {3: 0.5, 4: 0.6, 5: 0.7, 6: 0.8},
            8: {3: 0.4, 4: 0.5, 5: 0.6, 6: 0.7},
            9: {3: 0.3, 4: 0.4, 5: 0.5, 6: 0.6},
            10: {3: 0.2, 4: 0.3, 5: 0.4, 6: 0.5},
            11: {3: 0.1, 4: 0.2, 5: 0.3, 6: 0.4},
            12: {3: 0.1, 4: 0.2, 5: 0.3, 6: 0.4},
            13: {3: 0.1, 4: 0.2, 5: 0.3, 6: 0.4},
            14: {3: 0.1, 4: 0.2, 5: 0.3, 6: 0.4},
            15: {3: 0.1, 4: 0.2, 5: 0.3, 6: 0.4},
            16: {3: 0.1, 4: 0.2, 5: 0.3, 6: 0.4},
            17: {3: 0.1, 4: 0.2, 5: 0.3, 6: 0.4},
            18: {3: 0.1, 4: 0.2, 5: 0.3, 6: 0.4},
            19: {3: 0.1, 4: 0.2, 5: 0.3, 6: 0.4},
            20: {3: 0.1, 4: 0.2, 5: 0.3, 6: 0.4}
        }
    
    def calculate(self, input_data: CalculationInput) -> CalculationResult:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏–∑ Excel
        """
        try:
            self.logger.info(f"üßÆ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç: {input_data.calculation_type}, —Å—É–º–º–∞: {input_data.input_amount}, —Å—Ä–æ–∫: {input_data.contract_term}")
            
            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self._validate_input(input_data)
            
            # 2. –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
            calc_date = input_data.calculation_date or date.today()
            age_at_start = self._calculate_age(input_data.birth_date, calc_date)
            age_at_end = age_at_start + input_data.contract_term
            
            self.logger.info(f"üìÖ –í–æ–∑—Ä–∞—Å—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ: {age_at_start}, –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: {age_at_end}")
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–º–∏—é –∏ —Å—Ç—Ä–∞—Ö–æ–≤—É—é —Å—É–º–º—É
            if input_data.calculation_type == 'from_premium':
                premium_amount = input_data.input_amount
                insurance_sum = self._calculate_insurance_sum_from_premium(premium_amount, input_data.contract_term)
            else:  # from_sum
                insurance_sum = input_data.input_amount
                premium_amount = self._calculate_premium_from_sum(insurance_sum, input_data.contract_term)
            
            self.logger.info(f"üí∞ –ü—Ä–µ–º–∏—è: {premium_amount}, –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {insurance_sum}")
            
            # 4. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã (–ø–æ –ª–æ–≥–∏–∫–µ Excel)
            cashback_rate = self._get_cashback_rate(input_data.contract_term)
            accumulated_capital = premium_amount * input_data.contract_term
            program_income = int(premium_amount * cashback_rate * input_data.contract_term)
            
            # 5. –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç
            tax_deduction = self._calculate_tax_deduction(premium_amount, input_data.contract_term)
            
            # 6. –í—ã–∫—É–ø–Ω—ã–µ —Å—É–º–º—ã
            redemption_values = self._calculate_redemption_values(premium_amount, input_data.contract_term)
            
            # 7. –°–æ–∑–¥–∞–µ–º UUID –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            calculation_uuid = str(uuid.uuid4())
            
            result = CalculationResult(
                premium_amount=premium_amount,
                insurance_sum=insurance_sum,
                accumulated_capital=accumulated_capital,
                program_income=program_income,
                tax_deduction=tax_deduction,
                age_at_start=age_at_start,
                age_at_end=age_at_end,
                redemption_values=redemption_values,
                calculation_uuid=calculation_uuid
            )
            
            # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
            self._save_calculation(input_data, result, calc_date)
            
            self.logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {calculation_uuid}")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            raise
    
    def _validate_input(self, input_data: CalculationInput):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if input_data.contract_term < 5 or input_data.contract_term > 20:
            raise ValueError(f"–°—Ä–æ–∫ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 20 –ª–µ—Ç, –ø–æ–ª—É—á–µ–Ω: {input_data.contract_term}")
        
        if input_data.gender not in ['male', 'female']:
            raise ValueError(f"–ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'male' –∏–ª–∏ 'female', –ø–æ–ª—É—á–µ–Ω: {input_data.gender}")
        
        if input_data.calculation_type not in ['from_premium', 'from_sum']:
            raise ValueError(f"–¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'from_premium' –∏–ª–∏ 'from_sum', –ø–æ–ª—É—á–µ–Ω: {input_data.calculation_type}")
        
        if input_data.input_amount <= 0:
            raise ValueError(f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π, –ø–æ–ª—É—á–µ–Ω–∞: {input_data.input_amount}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ —Å—É–º–º–∞–º
        if input_data.calculation_type == 'from_premium':
            if input_data.input_amount < 100000:
                raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –≤–∑–Ω–æ—Å: 100,000 —Ä—É–±.")
            if input_data.input_amount > 50000000:
                raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –≤–∑–Ω–æ—Å: 50,000,000 —Ä—É–±.")
        else:  # from_sum
            if input_data.input_amount < 500000:
                raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: 500,000 —Ä—É–±.")
            if input_data.input_amount > 100000000:
                raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: 100,000,000 —Ä—É–±.")
    
    def _calculate_age(self, birth_date: date, calc_date: date) -> int:
        """–†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞ –¥–∞—Ç—É —Ä–∞—Å—á–µ—Ç–∞"""
        age = calc_date.year - birth_date.year
        if calc_date.month < birth_date.month or (calc_date.month == birth_date.month and calc_date.day < birth_date.day):
            age -= 1
        
        if age < 18 or age > 63:
            raise ValueError(f"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 63 –ª–µ—Ç, –≤—ã—á–∏—Å–ª–µ–Ω: {age}")
        
        return age
    
    def _get_cashback_rate(self, contract_term: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∫—ç—à–±—ç–∫–∞ –ø–æ —Å—Ä–æ–∫—É (–∏–∑ Excel –ª–æ–≥–∏–∫–∏)"""
        # –õ–æ–≥–∏–∫–∞ –∏–∑ –ª–∏—Å—Ç–∞ "–∫_–†–∞—Å—á–µ—Ç—á–∏–∫": –∫—ç—à–±—ç–∫ = –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–¥–æ–∂–∏—Ç–∏—è - 1
        survival_coeff = self.survival_coefficients.get(contract_term)
        if not survival_coeff:
            raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ –¥–æ–∂–∏—Ç–∏—è –¥–ª—è —Å—Ä–æ–∫–∞ {contract_term}")
        
        cashback_rate = survival_coeff - 1.0
        self.logger.info(f"üìä –ö—ç—à–±—ç–∫ –¥–ª—è —Å—Ä–æ–∫–∞ {contract_term} –ª–µ—Ç: {cashback_rate:.4f}")
        return cashback_rate
    
    def _calculate_insurance_sum_from_premium(self, premium: int, term: int) -> int:
        """
        –†–∞—Å—á–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã –æ—Ç –ø—Ä–µ–º–∏–∏ 
        –§–æ—Ä–º—É–ª–∞ –∏–∑ Excel: —Ä_—Å—É–º–º–∞ = —Ä_–≤–∑–Ω–æ—Å * —Ä_—Å—Ä–æ–∫ * (1 + —Ä_–∫—ç—à–±—ç–∫)
        """
        cashback_rate = self._get_cashback_rate(term)
        insurance_sum = int(premium * term * (1 + cashback_rate))
        return insurance_sum
    
    def _calculate_premium_from_sum(self, insurance_sum: int, term: int) -> int:
        """
        –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã
        –§–æ—Ä–º—É–ª–∞ –∏–∑ Excel: —Ä_–≤–∑–Ω–æ—Å = —Ä_—Å—É–º–º–∞ / (—Ä_—Å—Ä–æ–∫ * (1 + —Ä_–∫—ç—à–±—ç–∫))
        """
        cashback_rate = self._get_cashback_rate(term)
        premium = int(insurance_sum / (term * (1 + cashback_rate)))
        return premium
    
    def _calculate_tax_deduction(self, premium: int, term: int) -> int:
        """
        –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞ 
        –ò–∑ Excel: IF($C$10<=150000, $C$10 * 0.13 * $C$6, 19500 * $C$6)
        """
        if premium <= 150000:
            # –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç 13% —Å –ø—Ä–µ–º–∏–∏
            annual_deduction = premium * 0.13
        else:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã—á–µ—Ç 19,500 —Ä—É–± –≤ –≥–æ–¥ (150,000 * 0.13)
            annual_deduction = 19500
        
        total_deduction = int(annual_deduction * term)
        self.logger.info(f"üí∞ –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç: {annual_deduction}/–≥–æ–¥ √ó {term} –ª–µ—Ç = {total_deduction}")
        return total_deduction
    
    def _calculate_redemption_values(self, premium: int, term: int) -> List[Dict[str, Union[int, float]]]:
        """
        –†–∞—Å—á–µ—Ç –≤—ã–∫—É–ø–Ω—ã—Ö —Å—É–º–º –ø–æ –≥–æ–¥–∞–º
        –ò–∑ Excel: –≤—ã–∫—É–ø–Ω–∞—è_—Å—É–º–º–∞ = –ø—Ä–µ–º–∏—è * –≥–æ–¥ * –ø—Ä–æ—Ü–µ–Ω—Ç_–≤—ã–∫—É–ø–∞
        """
        redemption_values = []
        percentages = self.redemption_percentages.get(term, {})
        
        for year in range(1, term + 1):
            if year in percentages:
                # –ï—Å—Ç—å –≤—ã–∫—É–ø–Ω–∞—è —Å—É–º–º–∞
                percentage = percentages[year]
                amount = int(premium * year * percentage)
                redemption_values.append({
                    'year': year,
                    'amount': amount,
                    'percentage': percentage
                })
            else:
                # –ù–µ—Ç –≤—ã–∫—É–ø–Ω–æ–π —Å—É–º–º—ã (–æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ 0)
                redemption_values.append({
                    'year': year, 
                    'amount': 0,
                    'percentage': 0
                })
        
        return redemption_values
    
    def _save_calculation(self, input_data: CalculationInput, result: CalculationResult, calc_date: date):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤ –ë–î"""
        try:
            calculation = NSJCalculations(
                calculation_uuid=result.calculation_uuid,
                email=input_data.email,
                birth_date=input_data.birth_date,
                gender=input_data.gender,
                calculation_date=calc_date,
                contract_term=input_data.contract_term,
                calculation_type=input_data.calculation_type,
                input_amount=input_data.input_amount,
                premium_amount=result.premium_amount,
                insurance_sum=result.insurance_sum,
                accumulated_capital=result.accumulated_capital,
                program_income=result.program_income,
                tax_deduction=result.tax_deduction,
                age_at_start=result.age_at_start,
                age_at_end=result.age_at_end,
                redemption_values=result.redemption_values
            )
            
            db.session.add(calculation)
            db.session.commit()
            
            self.logger.info(f"üíæ –†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {result.calculation_uuid}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
            db.session.rollback()
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ...")
    
    calculator = NSJCalculatorFixed()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–∑ Excel —Ñ–∞–π–ª–∞)
    test_input = CalculationInput(
        birth_date=date(1965, 4, 1),  # –≤–æ–∑—Ä–∞—Å—Ç 60 –ª–µ—Ç
        gender='male',
        contract_term=9,
        calculation_type='from_premium',
        input_amount=100000,  # 100,000 —Ä—É–± –ø—Ä–µ–º–∏—è
        email='test@example.com'
    )
    
    try:
        result = calculator.calculate(test_input)
        
        print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   UUID: {result.calculation_uuid}")
        print(f"   –ü—Ä–µ–º–∏—è: {result.premium_amount:,} —Ä—É–±.")
        print(f"   –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {result.insurance_sum:,} —Ä—É–±.")
        print(f"   –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {result.accumulated_capital:,} —Ä—É–±.")
        print(f"   –î–æ—Ö–æ–¥ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {result.program_income:,} —Ä—É–±.")
        print(f"   –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç: {result.tax_deduction:,} —Ä—É–±.")
        print(f"   –í—ã–∫—É–ø–Ω—ã–µ —Å—É–º–º—ã: {len(result.redemption_values)} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–≤–µ—Ä—è–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ Excel
        expected_insurance_sum = 1467000  # –∏–∑ Excel C16
        expected_program_income = 567000  # –ø—Ä–∏–º–µ—Ä–Ω–æ –∏–∑ Excel C13
        
        print(f"\nüîç –°–≤–µ—Ä–∫–∞ —Å Excel:")
        print(f"   –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_insurance_sum:,}, –ø–æ–ª—É—á–µ–Ω–æ {result.insurance_sum:,}")
        print(f"   –î–æ—Ö–æ–¥: –æ–∂–∏–¥–∞–µ—Ç—Å—è ~{expected_program_income:,}, –ø–æ–ª—É—á–µ–Ω–æ {result.program_income:,}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    quick_test()