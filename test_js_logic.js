// –¢–µ—Å—Ç JavaScript –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã
// –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ JustincasePage.js

const computeRecommended = (params) => {
    const {
        birthDate,
        hasJob,
        income2022,
        income2023,
        income2024,
        scholarship,
        unsecuredLoans,
        breadwinnerStatus,
        incomeShare,
        childrenCount,
        specialCareRelatives
    } = params;

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Å—É–º–º –≤ —á–∏—Å–ª–∞: —É–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏/–ø—Ä–æ–±–µ–ª—ã, –ø–∞—Ä—Å–∏–º –≤ int.
    const toNumber = (val) => {
        if (!val) return null;
        const cleaned = val.toString().replace(/[\.\s]/g, '');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
        const num = parseInt(cleaned, 10);
        return Number.isNaN(num) ? null : num;
    };

    // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è; –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, age=null
    const computeAge = (dateStr) => {
        if (!dateStr) return null;
        const bd = new Date(dateStr);
        const today = new Date();
        let a = today.getFullYear() - bd.getFullYear();
        const m = today.getMonth() - bd.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < bd.getDate())) a--;
        return a;
    };

    const age = computeAge(birthDate);

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –¥–æ—Ö–æ–¥—ã –∏ —Å—Ç–∏–ø–µ–Ω–¥–∏—é, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ, —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ
    const incomes = [income2022, income2023, income2024, scholarship]
        .map(toNumber)
        .filter(v => v !== null);
    const avgIncome = incomes.length > 0 ? incomes.reduce((a, b) => a + b, 0) / incomes.length : 0;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (lowercase, trimming)
    const norm = (v) => (v || '').toString().toLowerCase().trim();
    const jobNorm = norm(hasJob);
    const breadNorm = norm(breadwinnerStatus);
    const specialNorm = norm(specialCareRelatives);

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç F13: —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–º–∏–ª—å—Ü–∞ –∏ –¥–æ–ª—è –¥–æ—Ö–æ–¥–∞
    let breadwinnerCoeff = 1;
    console.log(`   DEBUG: breadNorm = "${breadNorm}", incomeShare = "${incomeShare}"`);
    
    if (breadNorm === '–¥–∞' || breadNorm === 'yes') {
        breadwinnerCoeff = 3;
        console.log(`   DEBUG: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü, –∫–æ—ç—Ñ = 3`);
    } else if (breadNorm === '–Ω–µ—Ç' || breadNorm === 'no') {
        // –ü–æ–¥–±–∏—Ä–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ –¥–æ–ª–µ –¥–æ—Ö–æ–¥–∞
        const shareMap = {
            '–¥–æ 10': 1,
            '10-24': 1.4,
            '25-49': 1.8,
            '50-74': 2.2,
            '75-89': 2.6,
            '–±–æ–ª–µ–µ 90': 3
        };
        // incomeShare –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä '75%-89%' –∏–ª–∏ '50-74%', —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        const shareKey = norm(incomeShare).replace(/[%]/g, '');
        console.log(`   DEBUG: shareKey = "${shareKey}"`);
        breadwinnerCoeff = shareMap[shareKey] ?? 1;
        console.log(`   DEBUG: –ù–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü, –¥–æ–ª—è "${shareKey}", –∫–æ—ç—Ñ = ${breadwinnerCoeff}`);
    } else {
        // –ù–µ —è–≤–ª—è—é—Å—å –∫–æ—Ä–º–∏–ª—å—Ü–µ–º
        breadwinnerCoeff = 1;
        console.log(`   DEBUG: –ù–µ –∫–æ—Ä–º–∏–ª–µ—Ü, –∫–æ—ç—Ñ = 1`);
    }

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç F14: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
    const childrenKey = norm(childrenCount);
    let childrenCoeff;
    switch (childrenKey) {
        case '1':
            childrenCoeff = 1.25;
            break;
        case '2':
            childrenCoeff = 1.40625;
            break;
        case '3 –∏ –±–æ–ª–µ–µ':
        case '3 –∏ –±–æ–ª–µ–µ':
        case '3 –∏ –±–æ–ª–µ–µ.':
        case '3 –∏ –±–æ–ª–µ–µ':
        case '3 –∏ –±–æ–ª–µ–µ ': // —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        case '3 –∏–ª–∏ –±–æ–ª–µ–µ':
        case '3+':
            childrenCoeff = 1.523438;
            break;
        case '0':
        default:
            childrenCoeff = 1;
            break;
    }

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç F15: –Ω–∞–ª–∏—á–∏–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö —É—Ö–æ–¥–∞
    const specialCoeff = (specialNorm === '–¥–∞' || specialNorm === 'yes') ? 1.3 : 1;

    // –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)
    const productCoeff = breadwinnerCoeff * childrenCoeff * specialCoeff;

    // –ù–µ—Å–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
    const loans = toNumber(unsecuredLoans) || 0;

    // –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç F5 –¥–ª—è —Ä–∏—Å–∫–∞ ¬´–°–º–µ—Ä—Ç—å –ø–æ –ª—é–±–æ–π –ø—Ä–∏—á–∏–Ω–µ¬ª
    const getF5 = (a) => {
        if (a === null || a === undefined) return 3;
        if (a <= 34) return 10;
        if (a <= 44) return 8;
        if (a <= 49) return 7;
        if (a <= 54) return 6;
        if (a <= 59) return 5;
        return 3;
    };
    const f5 = getF5(age);

    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ö–æ–≤—É—é —Å—É–º–º—É F18
    let maxSum;
    if (jobNorm === '–¥–∞' || jobNorm === 'yes') {
        maxSum = avgIncome * f5;
    } else if (jobNorm === '—Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç' || jobNorm === 'student') {
        maxSum = avgIncome * 10;
    } else {
        // –ù–µ—Ç —Ä–∞–±–æ—Ç—ã
        maxSum = 1_000_000;
    }

    // –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞: –¥–ª—è –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã—Ö 1 000 000, –∏–Ω–∞—á–µ –¥–æ—Ö–æ–¥*–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã + –∫—Ä–µ–¥–∏—Ç—ã
    let baseSum;
    if (jobNorm === '–Ω–µ—Ç' || jobNorm === 'no') {
        baseSum = 1_000_000;
    } else {
        baseSum = avgIncome * productCoeff + loans;
    }

    // –ö–æ–Ω–µ—á–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ baseSum –∏ maxSum, –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 100 000
    let recSum = Math.min(baseSum, maxSum);
    recSum = Math.round(recSum / 100000) * 100000;

    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫ (D19)
    let recTerm = null;
    if (age !== null && age !== undefined) {
        if (age > 70) {
            recTerm = Math.max(75 - age, 0);
        } else {
            let term = 60 - age;
            if (term < 5) term = 5;
            if (term > 15) term = 15;
            recTerm = term;
        }
    }

    return { 
        recommendedSum: recSum, 
        recommendedTerm: recTerm,
        details: {
            age,
            avgIncome,
            breadwinnerCoeff,
            childrenCoeff,
            specialCoeff,
            productCoeff,
            loans,
            f5,
            maxSum,
            baseSum
        }
    };
};

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testCases = [
    {
        name: "–ú–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç (25 –ª–µ—Ç)",
        data: {
            birthDate: "1999-01-01",
            hasJob: "–¥–∞",
            income2022: "600000",
            income2023: "700000", 
            income2024: "800000",
            scholarship: "",
            unsecuredLoans: "0",
            breadwinnerStatus: "–Ω–µ—Ç",
            incomeShare: "25-49%",
            childrenCount: "0",
            specialCareRelatives: "–Ω–µ—Ç"
        }
    },
    {
        name: "–°–µ–º–µ–π–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü (35 –ª–µ—Ç, 2 –¥–µ—Ç–µ–π)",
        data: {
            birthDate: "1989-01-01",
            hasJob: "–¥–∞", 
            income2022: "1000000",
            income2023: "1000000",
            income2024: "1000000",
            scholarship: "",
            unsecuredLoans: "0",
            breadwinnerStatus: "–¥–∞",
            incomeShare: "75-89%",
            childrenCount: "2",
            specialCareRelatives: "–Ω–µ—Ç"
        }
    },
    {
        name: "–°–ª—É—á–∞–π –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (35 –ª–µ—Ç, –∫–æ—Ä–º–∏–ª–µ—Ü)",
        data: {
            birthDate: "1989-01-01",
            hasJob: "–¥–∞",
            income2022: "1000000",
            income2023: "1000000",
            income2024: "1000000", 
            scholarship: "",
            unsecuredLoans: "0",
            breadwinnerStatus: "–Ω–µ—Ç", // –ù–ï –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü, –Ω–æ –µ—Å—Ç—å –¥–æ–ª—è –¥–æ—Ö–æ–¥–∞
            incomeShare: "50-74%", // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –¥–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.2
            childrenCount: "0",
            specialCareRelatives: "–Ω–µ—Ç"
        }
    }
];

function formatNumber(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JavaScript –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã");
console.log("=" * 60);

testCases.forEach((testCase, index) => {
    console.log(`\n${index + 1}. ${testCase.name}`);
    console.log("-".repeat(40));
    
    try {
        const result = computeRecommended(testCase.data);
        const details = result.details;
        
        console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
        console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ${formatNumber(result.recommendedSum)} —Ä—É–±`);
        console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å—Ä–æ–∫: ${result.recommendedTerm} –ª–µ—Ç`);
        console.log(`   –í–æ–∑—Ä–∞—Å—Ç: ${details.age} –ª–µ—Ç`);
        console.log(`   –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: ${formatNumber(Math.round(details.avgIncome))} —Ä—É–±`);
        console.log(`   –ö–æ—ç—Ñ. –∫–æ—Ä–º–∏–ª—å—Ü–∞: ${details.breadwinnerCoeff}`);
        console.log(`   –ö–æ—ç—Ñ. –¥–µ—Ç–µ–π: ${details.childrenCoeff}`);
        console.log(`   –ö–æ—ç—Ñ. –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤: ${details.specialCoeff}`);
        console.log(`   –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ—ç—Ñ.: ${details.productCoeff.toFixed(3)}`);
        console.log(`   –ö—Ä–µ–¥–∏—Ç—ã: ${formatNumber(details.loans)} —Ä—É–±`);
        console.log(`   –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–æ—ç—Ñ. (F5): ${details.f5}`);
        console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${formatNumber(details.maxSum)} —Ä—É–±`);
        console.log(`   –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞: ${formatNumber(Math.round(details.baseSum))} —Ä—É–±`);
        console.log(`   –ö–æ—ç—Ñ. –∫ –¥–æ—Ö–æ–¥—É: ${(result.recommendedSum / details.avgIncome).toFixed(2)}x`);
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è —Å–ª—É—á–∞—è –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        if (testCase.name.includes("—Å–∫—Ä–∏–Ω—à–æ—Ç–∞")) {
            const expected = 2200000;
            const difference = Math.abs(result.recommendedSum - expected);
            const percentDiff = (difference / expected * 100).toFixed(1);
            console.log(`   üéØ –û–∂–∏–¥–∞–µ–º–æ: ${formatNumber(expected)} —Ä—É–±`);
            console.log(`   üìä –†–∞–∑–Ω–∏—Ü–∞: ${formatNumber(difference)} —Ä—É–± (${percentDiff}%)`);
        }
        
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
});

console.log("\n" + "=".repeat(60));
console.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
