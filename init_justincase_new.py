# -*- coding: utf-8 -*-
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ JustInCase
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ base_tariffs.txt
"""

import psycopg2
import logging
import os
import sys
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class JustInCaseDatabase:
    def __init__(self):
        self.db_config = {
            'host': os.getenv('DB_HOST', '176.108.243.189'),
            'port': int(os.getenv('DB_PORT', 5432)),
            'database': os.getenv('DB_NAME', 'miniapp'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD', 'secret')
        }
        
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = psycopg2.connect(**self.db_config)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return conn
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ JustInCase"""
        conn = self.connect()
        if not conn:
            return False
            
        try:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS justincase_base_tariffs (
                    id SERIAL PRIMARY KEY,
                    term_years INTEGER NOT NULL,
                    age INTEGER NOT NULL,
                    gender CHAR(1) NOT NULL CHECK (gender IN ('m', 'f')),
                    death_rate DECIMAL(10, 8) NOT NULL,
                    disability_rate DECIMAL(10, 8) NOT NULL,
                    accident_death_rate DECIMAL(10, 8) NOT NULL,
                    traffic_death_rate DECIMAL(10, 8) NOT NULL,
                    injury_rate DECIMAL(10, 8) NOT NULL,
                    critical_illness_rf_fee DECIMAL(12, 2) NOT NULL,
                    critical_illness_abroad_fee DECIMAL(12, 2) NOT NULL,
                    coefficient_i DECIMAL(6, 4) NOT NULL DEFAULT 0.08,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(term_years, age, gender)
                );
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —á–∞—Å—Ç–æ—Ç—ã –≤—ã–ø–ª–∞—Ç
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS justincase_frequency_coefficients (
                    id SERIAL PRIMARY KEY,
                    payment_frequency VARCHAR(20) NOT NULL UNIQUE,
                    coefficient DECIMAL(6, 4) NOT NULL,
                    description VARCHAR(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å—á–µ—Ç–æ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS justincase_calculations (
                    id SERIAL PRIMARY KEY,
                    calculation_id VARCHAR(50) UNIQUE NOT NULL,
                    age INTEGER NOT NULL,
                    gender CHAR(1) NOT NULL,
                    term_years INTEGER NOT NULL,
                    sum_insured DECIMAL(15, 2) NOT NULL,
                    include_accident BOOLEAN DEFAULT TRUE,
                    include_critical_illness BOOLEAN DEFAULT TRUE,
                    critical_illness_type VARCHAR(20) DEFAULT 'rf', -- 'rf' –∏–ª–∏ 'abroad'
                    payment_frequency VARCHAR(20) DEFAULT 'annual',
                    base_premium DECIMAL(15, 2) NOT NULL,
                    accident_premium DECIMAL(15, 2) NOT NULL DEFAULT 0,
                    critical_premium DECIMAL(15, 2) NOT NULL DEFAULT 0,
                    total_premium DECIMAL(15, 2) NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_justincase_tariffs_lookup 
                ON justincase_base_tariffs (term_years, age, gender);
            """)
            
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_justincase_calculations_id 
                ON justincase_calculations (calculation_id);
            """)
            
            conn.commit()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ JustInCase —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            conn.rollback()
            return False
        finally:
            cursor.close()
            conn.close()

    def load_frequency_coefficients(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —á–∞—Å—Ç–æ—Ç—ã –≤—ã–ø–ª–∞—Ç"""
        conn = self.connect()
        if not conn:
            return False
            
        try:
            cursor = conn.cursor()
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —á–∞—Å—Ç–æ—Ç—ã –≤—ã–ø–ª–∞—Ç
            frequency_data = [
                ('annual', 1.0000, '–ì–æ–¥–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞'),
                ('semi_annual', 0.5150, '–ü–æ–ª—É–≥–æ–¥–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞'),
                ('quarterly', 0.2640, '–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞'),
                ('monthly', 0.0870, '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞')
            ]
            
            for freq, coeff, desc in frequency_data:
                cursor.execute("""
                    INSERT INTO justincase_frequency_coefficients 
                    (payment_frequency, coefficient, description)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (payment_frequency) 
                    DO UPDATE SET coefficient = EXCLUDED.coefficient,
                                description = EXCLUDED.description;
                """, (freq, coeff, desc))
            
            conn.commit()
            logger.info("‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —á–∞—Å—Ç–æ—Ç—ã –≤—ã–ø–ª–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
            conn.rollback()
            return False
        finally:
            cursor.close()
            conn.close()

    def parse_tariff_file(self, file_path: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
        logger.info(f"üìä –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Ç–∞—Ä–∏—Ñ–æ–≤: {file_path}")
        
        if not os.path.exists(file_path):
            logger.error(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
            
        tariffs = []
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['utf-8', 'cp1251', 'windows-1251', 'utf-16']
            content = None
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as f:
                        content = f.read()
                    logger.info(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ {encoding}")
                    break
                except UnicodeDecodeError:
                    continue
            
            if not content:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ")
                return []
            
            lines = content.strip().split('\n')
            logger.info(f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(lines)}")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for line_num, line in enumerate(lines[1:], 2):
                line = line.strip()
                if not line:
                    continue
                    
                try:
                    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π (CSV —Ñ–æ—Ä–º–∞—Ç)
                    parts = line.split(';')
                    if len(parts) < 11:
                        continue
                    
                    term_years = int(parts[0])
                    age = int(parts[1])
                    gender = parts[2].strip()
                    
                    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã (—É–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ % –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º)
                    death_rate = float(parts[3].replace('%', '').replace(',', '.')) / 100
                    disability_rate = float(parts[4].replace('%', '').replace(',', '.')) / 100
                    accident_death_rate = float(parts[5].replace('%', '').replace(',', '.')) / 100
                    traffic_death_rate = float(parts[6].replace('%', '').replace(',', '.')) / 100
                    injury_rate = float(parts[7].replace('%', '').replace(',', '.')) / 100
                    
                    # –ü–∞—Ä—Å–∏–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã –ö–ó (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ)
                    critical_rf_fee = float(parts[8].replace(' ', '').replace(',', '.'))
                    critical_abroad_fee = float(parts[9].replace(' ', '').replace(',', '.'))
                    
                    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç i
                    coeff_i = 0.08
                    if len(parts) > 10 and parts[10].strip():
                        coeff_i = float(parts[10].replace(',', '.'))
                    
                    tariff = {
                        'term_years': term_years,
                        'age': age,
                        'gender': gender,
                        'death_rate': death_rate,
                        'disability_rate': disability_rate,
                        'accident_death_rate': accident_death_rate,
                        'traffic_death_rate': traffic_death_rate,
                        'injury_rate': injury_rate,
                        'critical_illness_rf_fee': critical_rf_fee,
                        'critical_illness_abroad_fee': critical_abroad_fee,
                        'coefficient_i': coeff_i
                    }
                    
                    tariffs.append(tariff)
                    
                except (ValueError, IndexError) as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
                    continue
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(tariffs)} —Ç–∞—Ä–∏—Ñ–æ–≤")
            return tariffs
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞: {e}")
            return []

    def load_base_tariffs(self, file_path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        tariffs = self.parse_tariff_file(file_path)
        if not tariffs:
            return False
            
        conn = self.connect()
        if not conn:
            return False
            
        try:
            cursor = conn.cursor()
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute("DELETE FROM justincase_base_tariffs;")
            logger.info("üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã —É–¥–∞–ª–µ–Ω—ã")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            insert_count = 0
            for tariff in tariffs:
                try:
                    cursor.execute("""
                        INSERT INTO justincase_base_tariffs 
                        (term_years, age, gender, death_rate, disability_rate,
                         accident_death_rate, traffic_death_rate, injury_rate, 
                         critical_illness_rf_fee, critical_illness_abroad_fee, coefficient_i)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
                    """, (
                        tariff['term_years'], tariff['age'], tariff['gender'],
                        tariff['death_rate'], tariff['disability_rate'],
                        tariff['accident_death_rate'], tariff['traffic_death_rate'],
                        tariff['injury_rate'], tariff['critical_illness_rf_fee'],
                        tariff['critical_illness_abroad_fee'], tariff['coefficient_i']
                    ))
                    insert_count += 1
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–∞—Ä–∏—Ñ–∞: {e}")
                    continue
            
            conn.commit()
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {insert_count} –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
            conn.rollback()
            return False
        finally:
            cursor.close()
            conn.close()

    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        conn = self.connect()
        if not conn:
            return {}
            
        try:
            cursor = conn.cursor()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
            cursor.execute("SELECT COUNT(*) FROM justincase_base_tariffs;")
            total_tariffs = cursor.fetchone()[0]
            
            cursor.execute("""
                SELECT term_years, COUNT(*) 
                FROM justincase_base_tariffs 
                GROUP BY term_years 
                ORDER BY term_years;
            """)
            tariffs_by_term = cursor.fetchall()
            
            cursor.execute("""
                SELECT gender, COUNT(*) 
                FROM justincase_base_tariffs 
                GROUP BY gender;
            """)
            tariffs_by_gender = cursor.fetchall()
            
            cursor.execute("SELECT COUNT(*) FROM justincase_frequency_coefficients;")
            frequency_count = cursor.fetchone()[0]
            
            stats = {
                'total_tariffs': total_tariffs,
                'tariffs_by_term': dict(tariffs_by_term),
                'tariffs_by_gender': dict(tariffs_by_gender),
                'frequency_coefficients': frequency_count
            }
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
        finally:
            cursor.close()
            conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ JustInCase")
    
    db = JustInCaseDatabase()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    if not db.create_tables():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —á–∞—Å—Ç–æ—Ç—ã
    if not db.load_frequency_coefficients():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —á–∞—Å—Ç–æ—Ç—ã")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã
    tariff_file = "base_tariffs_new.csv"
    if not db.load_base_tariffs(tariff_file):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã")
        return False
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_statistics()
    if stats:
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"   - –í—Å–µ–≥–æ —Ç–∞—Ä–∏—Ñ–æ–≤: {stats['total_tariffs']}")
        logger.info(f"   - –ü–æ —Å—Ä–æ–∫–∞–º: {stats['tariffs_by_term']}")
        logger.info(f"   - –ü–æ –ø–æ–ª—É: {stats['tariffs_by_gender']}")
        logger.info(f"   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —á–∞—Å—Ç–æ—Ç—ã: {stats['frequency_coefficients']}")
    
    logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
