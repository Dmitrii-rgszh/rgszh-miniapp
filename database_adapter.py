# database_adapter.py - –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ë–î

import os
import logging
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

logger = logging.getLogger("database_adapter")

class DatabaseAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.engine = None
        self.Session = None
        self.db_type = None
        self.db_url = None
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ–º –ë–î
        database_url = os.getenv("DATABASE_URL")
        
        if database_url and "postgresql" in database_url:
            # –ü—Ä–æ–¥–∞–∫—à–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL
            self.db_type = "postgresql"
            self.db_url = database_url
            logger.info("üêò –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            
        else:
            # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite
            self.db_type = "sqlite"
            sqlite_path = os.path.join(os.path.dirname(__file__), "miniapp.db")
            self.db_url = f"sqlite:///{sqlite_path}"
            logger.info(f"üóÉÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {sqlite_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ SQLite –±–∞–∑–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
            if not os.path.exists(sqlite_path):
                logger.warning("‚ö†Ô∏è SQLite –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –±–∞–∑–∞")
                logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python init_local_tariffs_sqlite.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if self.db_type == "postgresql":
                self.engine = create_engine(
                    self.db_url,
                    pool_pre_ping=True,
                    pool_recycle=300,
                    echo=False
                )
            else:
                self.engine = create_engine(
                    self.db_url,
                    echo=False,
                    connect_args={"check_same_thread": False}
                )
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            self.Session = sessionmaker(bind=self.engine)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            with self.engine.connect() as conn:
                if self.db_type == "postgresql":
                    result = conn.execute(text("SELECT version()"))
                    version = result.fetchone()[0]
                    logger.info(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {version[:50]}...")
                else:
                    result = conn.execute(text("SELECT sqlite_version()"))
                    version = result.fetchone()[0]
                    logger.info(f"‚úÖ SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: –≤–µ—Ä—Å–∏—è {version}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
                    result = conn.execute(text(
                        "SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'nsj_%'"
                    ))
                    tables = [row[0] for row in result.fetchall()]
                    
                    if tables:
                        logger.info(f"üìä –ù–∞–π–¥–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞—Ä–∏—Ñ–æ–≤
                        if 'nsj_tariffs' in tables:
                            result = conn.execute(text("SELECT COUNT(*) FROM nsj_tariffs"))
                            count = result.fetchone()[0]
                            logger.info(f"üìã –ë–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ SQLite: {count}")
                    else:
                        logger.warning("‚ö†Ô∏è –¢–∞—Ä–∏—Ñ–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ SQLite")
                        logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python init_local_tariffs_sqlite.py")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.db_type}: {e}")
            return False
    
    def get_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î"""
        if self.Session:
            return self.Session()
        else:
            raise Exception("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def execute_query(self, query, params=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            with self.engine.connect() as conn:
                if params:
                    result = conn.execute(text(query), params)
                else:
                    result = conn.execute(text(query))
                return result.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
    
    def get_tariff(self, age, gender, term_years):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
        query = """
            SELECT death_rate, disability_rate 
            FROM nsj_tariffs 
            WHERE age = :age AND gender = :gender AND term_years = :term_years AND is_active = 1
        """
        
        try:
            result = self.execute_query(query, {
                'age': age,
                'gender': gender,
                'term_years': term_years
            })
            
            if result:
                return {
                    'death_rate': float(result[0][0]),
                    'disability_rate': float(result[0][1])
                }
            else:
                logger.warning(f"‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω: –≤–æ–∑—Ä–∞—Å—Ç={age}, –ø–æ–ª={gender}, —Å—Ä–æ–∫={term_years}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞: {e}")
            return None
    
    def get_accident_tariff(self, age, gender, term_years):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ù–°"""
        query = """
            SELECT death_rate, traffic_death_rate, injury_rate 
            FROM nsj_accident_tariffs 
            WHERE age = :age AND gender = :gender AND term_years = :term_years AND is_active = 1
        """
        
        try:
            result = self.execute_query(query, {
                'age': age,
                'gender': gender,
                'term_years': term_years
            })
            
            if result:
                return {
                    'death_rate': float(result[0][0]),
                    'traffic_death_rate': float(result[0][1]),
                    'injury_rate': float(result[0][2])
                }
            else:
                logger.warning(f"‚ö†Ô∏è –¢–∞—Ä–∏—Ñ –ù–° –Ω–µ –Ω–∞–π–¥–µ–Ω: –≤–æ–∑—Ä–∞—Å—Ç={age}, –ø–æ–ª={gender}, —Å—Ä–æ–∫={term_years}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –ù–°: {e}")
            return None
    
    def get_critical_tariff(self, age, gender, term_years, region='russia'):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ö–ó"""
        rate_column = 'russia_rate' if region == 'russia' else 'abroad_rate'
        
        query = f"""
            SELECT {rate_column}
            FROM nsj_critical_tariffs 
            WHERE age = :age AND gender = :gender AND term_years = :term_years AND is_active = 1
        """
        
        try:
            result = self.execute_query(query, {
                'age': age,
                'gender': gender,
                'term_years': term_years
            })
            
            if result:
                return {
                    'rate': float(result[0][0]),
                    'region': region
                }
            else:
                logger.warning(f"‚ö†Ô∏è –¢–∞—Ä–∏—Ñ –ö–ó –Ω–µ –Ω–∞–π–¥–µ–Ω: –≤–æ–∑—Ä–∞—Å—Ç={age}, –ø–æ–ª={gender}, —Å—Ä–æ–∫={term_years}, —Ä–µ–≥–∏–æ–Ω={region}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –ö–ó: {e}")
            return None
    
    def check_tables_exist(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        required_tables = ['nsj_tariffs', 'nsj_accident_tariffs', 'nsj_critical_tariffs', 'nsj_risk_rates']
        
        try:
            if self.db_type == "postgresql":
                query = """
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' AND table_name LIKE 'nsj_%'
                """
            else:
                query = """
                    SELECT name 
                    FROM sqlite_master 
                    WHERE type='table' AND name LIKE 'nsj_%'
                """
            
            result = self.execute_query(query)
            existing_tables = [row[0] for row in result]
            
            missing_tables = set(required_tables) - set(existing_tables)
            
            if missing_tables:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
                return False
            else:
                logger.info(f"‚úÖ –í—Å–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã: {', '.join(existing_tables)}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
db_adapter = DatabaseAdapter()

def get_database_adapter():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ –ë–î"""
    if not db_adapter.engine:
        success = db_adapter.initialize()
        if not success:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    return db_adapter
