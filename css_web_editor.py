#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CSS Web Editor - –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-—Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è text.css
–ü—Ä–æ—Å—Ç–æ–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
"""

from flask import Flask, render_template_string, request, jsonify
import re
import os
import json
import shutil
from datetime import datetime

app = Flask(__name__)

# HTML —à–∞–±–ª–æ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üé® CSS Text Editor - Telegram MiniApp</title>
    <style>
        :root {
            --editor-bg: linear-gradient(135deg, #b40037, #002682);
            --panel-bg: rgba(255, 255, 255, 0.1);
            --panel-border: rgba(255, 255, 255, 0.2);
            --input-bg: rgba(255, 255, 255, 0.15);
            --text-primary: #ffffff;
            --text-secondary: #cccccc;
            --success-color: #28a745;
            --error-color: #dc3545;
            --warning-color: #ffc107;
        }

        * { 
            margin: 0; 
            padding: 0; 
            box-sizing: border-box; 
        }
        
        body {
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--editor-bg);
            color: var(--text-primary);
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .header {
            text-align: center;
            padding: 20px;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid var(--panel-border);
        }
        
        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #fff, #ccc);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .header-buttons {
            display: flex;
            justify-content: center;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 15px;
        }
        
        .btn {
            background: linear-gradient(135deg, rgb(180, 0, 55), rgb(0, 40, 130));
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, rgb(152, 164, 174), rgb(118, 143, 146));
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .editor-layout {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 20px;
            min-height: calc(100vh - 200px);
        }
        
        .variables-section {
            background: var(--panel-bg);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
            border: 1px solid var(--panel-border);
            overflow-y: auto;
            max-height: calc(100vh - 200px);
        }
        
        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .preview-section, .info-section {
            background: var(--panel-bg);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid var(--panel-border);
        }
        
        .section-title {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .variable-group {
            margin-bottom: 25px;
            border: 1px solid var(--panel-border);
            border-radius: 10px;
            overflow: hidden;
        }
        
        .group-header {
            background: rgba(0, 0, 0, 0.3);
            padding: 12px 15px;
            font-weight: 600;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .group-content {
            padding: 15px;
        }
        
        .variable-row {
            display: grid;
            grid-template-columns: 150px 1fr auto;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
            padding: 8px;
            border-radius: 6px;
            transition: background 0.2s ease;
        }
        
        .variable-row:hover {
            background: rgba(255, 255, 255, 0.05);
        }
        
        .variable-label {
            font-size: 12px;
            color: var(--text-secondary);
            font-family: 'Consolas', monospace;
            font-weight: 500;
        }
        
        .variable-input {
            padding: 8px 12px;
            border: 1px solid var(--panel-border);
            border-radius: 6px;
            background: var(--input-bg);
            color: var(--text-primary);
            font-size: 13px;
            width: 100%;
            transition: all 0.2s ease;
        }
        
        .variable-input:focus {
            outline: none;
            border-color: rgb(180, 0, 55);
            box-shadow: 0 0 0 2px rgba(180, 0, 55, 0.2);
        }
        
        .color-picker {
            width: 32px;
            height: 32px;
            border: 2px solid var(--panel-border);
            border-radius: 6px;
            cursor: pointer;
            background: transparent;
            transition: transform 0.2s ease;
        }
        
        .color-picker:hover {
            transform: scale(1.1);
        }
        
        .preview-content {
            background: rgba(0, 0, 0, 0.3);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid var(--panel-border);
        }
        
        .preview-item {
            margin-bottom: 12px;
            padding: 8px;
            border-radius: 6px;
            background: rgba(255, 255, 255, 0.05);
        }
        
        .status-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            max-width: 300px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }
        
        .status-toast.show {
            transform: translateX(0);
        }
        
        .status-toast.success { background: var(--success-color); }
        .status-toast.error { background: var(--error-color); }
        .status-toast.warning { background: var(--warning-color); color: #000; }
        
        .file-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .stat-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 6px;
            text-align: center;
        }
        
        .stat-value {
            font-size: 18px;
            font-weight: 700;
            color: rgb(180, 0, 55);
        }
        
        .stat-label {
            font-size: 12px;
            color: var(--text-secondary);
            margin-top: 4px;
        }
        
        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
        @media (max-width: 768px) {
            .editor-layout {
                grid-template-columns: 1fr;
            }
            
            .variable-row {
                grid-template-columns: 1fr;
                gap: 8px;
            }
            
            .variable-label {
                font-size: 11px;
            }
            
            .header-buttons {
                gap: 8px;
            }
            
            .btn {
                padding: 10px 16px;
                font-size: 13px;
            }
        }
        
        @media (max-width: 480px) {
            .container {
                padding: 10px;
            }
            
            .variables-section, .preview-section, .info-section {
                padding: 15px;
            }
            
            .header {
                padding: 15px 10px;
            }
            
            .header h1 {
                font-size: 24px;
            }
        }
        
        /* –°–∫—Ä–æ–ª–ª–±–∞—Ä */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }
    </style>
</head>
<body>
    <!-- –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -->
    <div class="status-toast" id="statusToast"></div>
    
    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
    <div class="header">
        <h1>üé® CSS Text Editor</h1>
        <p>–†–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è Telegram MiniApp</p>
        <div class="header-buttons">
            <button class="btn" onclick="loadCSS()">
                <span id="loadIcon">üìÅ</span> –ó–∞–≥—Ä—É–∑–∏—Ç—å CSS
            </button>
            <button class="btn" onclick="saveCSS()">
                <span id="saveIcon">üíæ</span> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button class="btn btn-secondary" onclick="previewChanges()">
                üëÄ –ü—Ä–µ–≤—å—é
            </button>
            <button class="btn btn-secondary" onclick="resetChanges()">
                üîÑ –°–±—Ä–æ—Å
            </button>
            <button class="btn btn-secondary" onclick="exportSettings()">
                üì§ –≠–∫—Å–ø–æ—Ä—Ç
            </button>
        </div>
    </div>
    
    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
    <div class="container">
        <div class="editor-layout">
            <!-- –†–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö -->
            <div class="variables-section">
                <div class="section-title">
                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                </div>
                <div id="variablesContainer">
                    <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                        <div class="loading"></div>
                        <p style="margin-top: 10px;">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...</p>
                    </div>
                </div>
            </div>
            
            <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å -->
            <div class="sidebar">
                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ -->
                <div class="info-section">
                    <div class="section-title">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                    <div class="file-stats">
                        <div class="stat-item">
                            <div class="stat-value" id="varCount">0</div>
                            <div class="stat-label">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="fileSize">0</div>
                            <div class="stat-label">–ë–∞–π—Ç</div>
                        </div>
                    </div>
                    <div id="fileInfo">
                        <p style="color: var(--text-secondary); font-size: 13px;">
                            –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                        </p>
                    </div>
                </div>
                
                <!-- –ü—Ä–µ–≤—å—é -->
                <div class="preview-section">
                    <div class="section-title">üëÄ –ü—Ä–µ–≤—å—é —Å—Ç–∏–ª–µ–π</div>
                    <div class="preview-content" id="previewContent">
                        <div class="preview-item">
                            <h1 id="previewH1" style="margin:0; font-size: 24px;">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H1</h1>
                        </div>
                        <div class="preview-item">
                            <h2 id="previewH2" style="margin:0; font-size: 20px;">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H2</h2>
                        </div>
                        <div class="preview-item">
                            <p id="previewBody" style="margin:0;">–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç</p>
                        </div>
                        <div class="preview-item">
                            <small id="previewSmall">–ú–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç</small>
                        </div>
                        <div class="preview-item">
                            <button class="btn" id="previewBtn" style="font-size: 14px;">–ö–Ω–æ–ø–∫–∞</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let cssVariables = {};
        let originalCSS = '';
        let isLoading = false;
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        const variableGroups = {
            'üî§ –®—Ä–∏—Ñ—Ç—ã': {
                icon: 'üî§',
                variables: ['text-font-family', 'font-family']
            },
            'üìè –†–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞': {
                icon: 'üìè',
                variables: ['text-size-h1', 'text-size-h2', 'text-size-h3', 'text-size-body', 'text-size-small', 'text-size-tiny']
            },
            'üé® –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞': {
                icon: 'üé®',
                variables: ['text-color-primary', 'text-color-secondary', 'text-color-muted', 'text-color-white']
            }
        };
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ CSS –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        window.addEventListener('DOMContentLoaded', () => {
            loadCSS();
        });
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ CSS —Ñ–∞–π–ª–∞
        async function loadCSS() {
            if (isLoading) return;
            
            isLoading = true;
            const loadIcon = document.getElementById('loadIcon');
            loadIcon.innerHTML = '<span class="loading"></span>';
            
            try {
                const response = await fetch('/load-css');
                const data = await response.json();
                
                if (data.success) {
                    cssVariables = data.variables;
                    originalCSS = data.content;
                    createVariableEditors();
                    updatePreview();
                    updateStats(data.filename, Object.keys(data.variables).length, data.size);
                    showToast('CSS —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ', 'success');
                } else {
                    showToast('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + data.error, 'error');
                }
            } catch (error) {
                showToast('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
            } finally {
                isLoading = false;
                loadIcon.innerHTML = 'üìÅ';
            }
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        function createVariableEditors() {
            const container = document.getElementById('variablesContainer');
            container.innerHTML = '';
            
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
            for (const [groupName, groupData] of Object.entries(variableGroups)) {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'variable-group';
                
                const groupHeader = document.createElement('div');
                groupHeader.className = 'group-header';
                groupHeader.innerHTML = `${groupData.icon} ${groupName}`;
                
                const groupContent = document.createElement('div');
                groupContent.className = 'group-content';
                
                let hasVariables = false;
                
                groupData.variables.forEach(varName => {
                    if (cssVariables[varName]) {
                        const row = createVariableRow(varName, cssVariables[varName]);
                        groupContent.appendChild(row);
                        hasVariables = true;
                    }
                });
                
                if (hasVariables) {
                    groupDiv.appendChild(groupHeader);
                    groupDiv.appendChild(groupContent);
                    container.appendChild(groupDiv);
                }
            }
            
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            const usedVars = Object.values(variableGroups).flatMap(g => g.variables);
            const otherVars = Object.keys(cssVariables).filter(key => !usedVars.includes(key));
            
            if (otherVars.length > 0) {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'variable-group';
                
                const groupHeader = document.createElement('div');
                groupHeader.className = 'group-header';
                groupHeader.innerHTML = 'üîß –î—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ';
                
                const groupContent = document.createElement('div');
                groupContent.className = 'group-content';
                
                otherVars.forEach(varName => {
                    const row = createVariableRow(varName, cssVariables[varName]);
                    groupContent.appendChild(row);
                });
                
                groupDiv.appendChild(groupHeader);
                groupDiv.appendChild(groupContent);
                container.appendChild(groupDiv);
            }
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        function createVariableRow(varName, value) {
            const row = document.createElement('div');
            row.className = 'variable-row';
            
            const isColor = /^(#|rgb|rgba|hsl|hsla)/.test(value.trim());
            
            const label = document.createElement('div');
            label.className = 'variable-label';
            label.textContent = `--${varName}`;
            
            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'variable-input';
            input.value = value;
            input.addEventListener('input', () => updateVariable(varName, input.value));
            
            row.appendChild(label);
            row.appendChild(input);
            
            if (isColor) {
                const colorPicker = document.createElement('input');
                colorPicker.type = 'color';
                colorPicker.className = 'color-picker';
                colorPicker.value = convertToHex(value);
                colorPicker.addEventListener('change', (e) => {
                    input.value = e.target.value;
                    updateVariable(varName, e.target.value);
                });
                row.appendChild(colorPicker);
            } else {
                row.appendChild(document.createElement('div')); // –ü—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            }
            
            return row;
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –≤ hex
        function convertToHex(color) {
            const rgbaMatch = color.match(/rgba?\(([^)]+)\)/);
            if (rgbaMatch) {
                const values = rgbaMatch[1].split(',').map(v => Math.round(parseFloat(v.trim())));
                // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ (0-1), —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 255
                if (values[0] <= 1) {
                    values[0] = Math.round(values[0] * 255);
                    values[1] = Math.round(values[1] * 255);
                    values[2] = Math.round(values[2] * 255);
                }
                return `#${values[0].toString(16).padStart(2, '0')}${values[1].toString(16).padStart(2, '0')}${values[2].toString(16).padStart(2, '0')}`;
            }
            return color.startsWith('#') ? color : '#ffffff';
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        function updateVariable(varName, value) {
            cssVariables[varName] = value;
            updatePreview();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é
        function updatePreview() {
            let cssText = ':root {';
            for (const [key, value] of Object.entries(cssVariables)) {
                cssText += `--${key}: ${value}; `;
            }
            cssText += '}';
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å
            const oldStyle = document.getElementById('previewStyle');
            if (oldStyle) oldStyle.remove();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å
            const style = document.createElement('style');
            style.id = 'previewStyle';
            style.textContent = cssText + `
                #previewH1 { font-size: var(--text-size-h1, 32px); color: var(--text-color-primary, white); font-family: var(--text-font-family, 'Segoe UI'); }
                #previewH2 { font-size: var(--text-size-h2, 24px); color: var(--text-color-primary, white); font-family: var(--text-font-family, 'Segoe UI'); }
                #previewBody { font-size: var(--text-size-body, 16px); color: var(--text-color-secondary, white); font-family: var(--text-font-family, 'Segoe UI'); }
                #previewSmall { font-size: var(--text-size-small, 14px); color: var(--text-color-muted, white); font-family: var(--text-font-family, 'Segoe UI'); }
                #previewBtn { font-size: var(--text-size-body, 16px); color: var(--text-color-primary, white); font-family: var(--text-font-family, 'Segoe UI'); }
            `;
            document.head.appendChild(style);
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSS
        async function saveCSS() {
            const saveIcon = document.getElementById('saveIcon');
            saveIcon.innerHTML = '<span class="loading"></span>';
            
            try {
                const response = await fetch('/save-css', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({variables: cssVariables})
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                } else {
                    showToast('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + data.error, 'error');
                }
            } catch (error) {
                showToast('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
            } finally {
                saveIcon.innerHTML = 'üíæ';
            }
        }
        
        // –ü—Ä–µ–≤—å—é –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        function previewChanges() {
            const cssVars = Object.entries(cssVariables).map(([k,v]) => `--${k}: ${v};`).join(' ');
            
            const previewHTML = `
                <!DOCTYPE html>
                <html lang="ru">
                <head>
                    <title>–ü—Ä–µ–≤—å—é CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</title>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <style>
                        :root { ${cssVars} }
                        body {
                            font-family: var(--text-font-family, 'Segoe UI');
                            background: linear-gradient(135deg, #b40037, #002682);
                            color: var(--text-color-primary, white);
                            padding: 40px;
                            line-height: 1.6;
                        }
                        .container {
                            max-width: 800px;
                            margin: 0 auto;
                            background: rgba(0, 0, 0, 0.3);
                            padding: 40px;
                            border-radius: 15px;
                        }
                        h1 { font-size: var(--text-size-h1, 32px); color: var(--text-color-primary); margin-bottom: 20px; }
                        h2 { font-size: var(--text-size-h2, 24px); color: var(--text-color-primary); margin-bottom: 16px; }
                        h3 { font-size: var(--text-size-h3, 20px); color: var(--text-color-primary); margin-bottom: 12px; }
                        p { font-size: var(--text-size-body, 16px); color: var(--text-color-secondary); margin-bottom: 16px; }
                        small { font-size: var(--text-size-small, 14px); color: var(--text-color-muted); }
                        .btn {
                            background: linear-gradient(135deg, rgb(180, 0, 55), rgb(0, 40, 130));
                            color: var(--text-color-primary);
                            padding: 16px 32px;
                            border: none;
                            border-radius: 12px;
                            font-size: var(--text-size-body);
                            cursor: pointer;
                            margin: 10px 5px;
                            display: inline-block;
                        }
                        .variables-list {
                            background: rgba(0, 0, 0, 0.2);
                            padding: 20px;
                            border-radius: 8px;
                            font-family: 'Consolas', monospace;
                            font-size: 12px;
                            margin-top: 30px;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>üé® –ü—Ä–µ–≤—å—é —Å—Ç–∏–ª–µ–π text.css</h1>
                        <h2>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è</h2>
                        <h3>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è</h3>
                        <p>–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º –∏ –∫—Ä–∞—Å–∏–≤—ã–º.</p>
                        <p><small>–≠—Ç–æ –º–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–¥–ø–∏—Å–µ–π –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π.</small></p>
                        
                        <button class="btn">–ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞</button>
                        <button class="btn">–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞</button>
                        
                        <h3>üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</h3>
                        <div class="variables-list">
${Object.entries(cssVariables).map(([k,v]) => `--${k}: ${v};`).join('<br>')}
                        </div>
                    </div>
                </body>
                </html>
            `;
            
            const newWindow = window.open('', '_blank');
            newWindow.document.write(previewHTML);
            newWindow.document.close();
            
            showToast('üöÄ –ü—Ä–µ–≤—å—é –æ—Ç–∫—Ä—ã—Ç–æ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ', 'success');
        }
        
        // –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
        function resetChanges() {
            if (confirm('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é?')) {
                loadCSS();
                showToast('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã', 'warning');
            }
        }
        
        // –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        function exportSettings() {
            const dataStr = JSON.stringify(cssVariables, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = 'css-variables-' + new Date().toISOString().slice(0,10) + '.json';
            link.click();
            
            showToast('üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        function updateStats(filename, varCount, fileSize) {
            document.getElementById('varCount').textContent = varCount;
            document.getElementById('fileSize').textContent = fileSize || 'N/A';
            document.getElementById('fileInfo').innerHTML = `
                <p style="font-size: 13px; margin-bottom: 8px;">
                    <strong>üìÑ –§–∞–π–ª:</strong> ${filename}
                </p>
                <p style="font-size: 13px; color: var(--success-color);">
                    ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
                </p>
            `;
        }
        
        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        function showToast(message, type = 'success') {
            const toast = document.getElementById('statusToast');
            toast.textContent = message;
            toast.className = `status-toast ${type} show`;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }
    </script>
</body>
</html>
"""

class CSSWebEditor:
    def __init__(self):
        self.css_file_path = self.find_css_file()
        self.css_variables = {}
        self.original_content = ""
        
    def find_css_file(self):
        """–ü–æ–∏—Å–∫ text.css —Ñ–∞–π–ª–∞"""
        possible_paths = [
            "./src/Styles/text.css",
            "./Styles/text.css", 
            "./text.css",
            "../src/Styles/text.css",
            "../../src/Styles/text.css"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω CSS —Ñ–∞–π–ª: {path}")
                return path
                
        print("‚ùå CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
        return None
    
    def parse_css_variables(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        if not self.css_file_path:
            return {}
            
        try:
            with open(self.css_file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                self.original_content = content
                
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ :root
            root_pattern = r':root\s*\{([^}]+)\}'
            root_match = re.search(root_pattern, content, re.DOTALL)
            
            if root_match:
                root_content = root_match.group(1)
                
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                var_pattern = r'--([^:]+):\s*([^;]+);'
                variables = re.findall(var_pattern, root_content)
                
                self.css_variables = {k.strip(): v.strip() for k, v in variables}
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(self.css_variables)}")
                
            return self.css_variables
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSS: {e}")
            return {}
    
    def save_css_variables(self, variables):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        if not self.css_file_path:
            return False
            
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f"{self.css_file_path}.backup_{timestamp}"
            shutil.copy2(self.css_file_path, backup_path)
            print(f"üìÑ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º CSS —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = self.original_content
            root_pattern = r'(:root\s*\{)([^}]+)(\})'
            
            def replace_root(match):
                start = match.group(1)
                end = match.group(3)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                new_vars = []
                for var_name, var_value in variables.items():
                    new_vars.append(f"  --{var_name}: {var_value};")
                
                new_content = "\n" + "\n".join(new_vars) + "\n"
                return start + new_content + end
            
            updated_content = re.sub(root_pattern, replace_root, content, flags=re.DOTALL)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(self.css_file_path, 'w', encoding='utf-8') as file:
                file.write(updated_content)
                
            self.original_content = updated_content
            print(f"‚úÖ CSS —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.css_file_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
editor = CSSWebEditor()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/load-css')
def load_css():
    """–ó–∞–≥—Ä—É–∑–∫–∞ CSS —Ñ–∞–π–ª–∞"""
    variables = editor.parse_css_variables()
    
    if variables:
        file_size = os.path.getsize(editor.css_file_path) if editor.css_file_path else 0
        return jsonify({
            'success': True,
            'variables': variables,
            'content': editor.original_content,
            'filename': os.path.basename(editor.css_file_path) if editor.css_file_path else 'text.css',
            'size': file_size
        })
    else:
        return jsonify({
            'success': False,
            'error': 'CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –±–ª–æ–∫–µ :root'
        })

@app.route('/save-css', methods=['POST'])
def save_css():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSS —Ñ–∞–π–ª–∞"""
    try:
        data = request.get_json()
        variables = data.get('variables', {})
        
        success = editor.save_css_variables(variables)
        
        return jsonify({
            'success': success,
            'error': None if success else '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ CSS Text Editor...")
    print("üìÅ –ü–æ–∏—Å–∫ text.css —Ñ–∞–π–ª–∞...")
    
    if editor.css_file_path:
        print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {editor.css_file_path}")
    else:
        print("‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è")
    
    print("\nüåê –í–µ–±-—Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:")
    print("   http://localhost:5000")
    print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    app.run(debug=True, port=5000, host='0.0.0.0')