# deploy.ps1 - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è RGSZH MiniApp
# –ó–ê–©–ò–¢–ê SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í –ò NGINX –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò

param(
    [switch]$SkipBuild,
    [switch]$SkipCopy,
    [switch]$SkipDeploy,
    [switch]$ForceConfig,  # ‚Üê –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    [switch]$Verbose
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
$VM_USER = "admin"
$VM_HOST = "176.109.110.217"
$DOCKER_REGISTRY = "zerotlt"
$PROJECT_NAME = "rgszh-miniapp"
$SOCKET_URL = "https://rgszh-miniapp.org"

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
$DEPLOY_TAG = (Get-Date -Format "yyyyMMdd-HHmmss")

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Red = "Red"
    Green = "Green"
    Yellow = "Yellow"
    Blue = "Cyan"
    Gray = "Gray"
}

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Color = "White")
    $timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-Log "‚úÖ $Message" -Color $Colors.Green
}

function Write-Error {
    param([string]$Message)
    Write-Log "‚ùå $Message" -Color $Colors.Red
}

function Write-Warning {
    param([string]$Message)
    Write-Log "‚ö†Ô∏è $Message" -Color $Colors.Yellow
}

function Write-Info {
    param([string]$Message)
    Write-Log "‚ÑπÔ∏è $Message" -Color $Colors.Blue
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function Test-Dependencies {
    Write-Log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    $dependencies = @("docker", "scp", "ssh")
    $missing = @()
    
    foreach ($dep in $dependencies) {
        if (-not (Get-Command $dep -ErrorAction SilentlyContinue)) {
            $missing += $dep
        }
    }
    
    if ($missing.Count -gt 0) {
        Write-Error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: $($missing -join ', ')"
        Write-Info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –∏ Git Bash (–∏–ª–∏ WSL) –¥–ª—è scp/ssh"
        exit 1
    }
    
    Write-Success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
function Build-And-Push-Images {
    if ($SkipBuild) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤ (–ø–∞—Ä–∞–º–µ—Ç—Ä -SkipBuild)"
        return
    }
    
    Write-Log "üê≥ –°–±–æ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ (—Ç–µ–≥: $DEPLOY_TAG)..."
    
    try {
        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
        Write-Log "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞..."
        $cmd = "docker system prune -f"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        # –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ç–µ–≥–æ–º
        Write-Log "üì¶ –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
        $cmd = "docker build --no-cache -f Dockerfile.server -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:$DEPLOY_TAG -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:latest ."
        
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞"
        }
        
        Write-Log "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
        $cmd = "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:$DEPLOY_TAG"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        $cmd = "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:latest"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞"
        }
        
        Write-Success "–°–µ—Ä–≤–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–µ–≥: $DEPLOY_TAG)"
        
        # –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ç–µ–≥–æ–º
        Write-Log "üì¶ –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
        $cmd = "docker build --no-cache -f Dockerfile.client --build-arg REACT_APP_SOCKET_URL=`"$SOCKET_URL`" -t ${DOCKER_REGISTRY}/${PROJECT_NAME}:$DEPLOY_TAG -t ${DOCKER_REGISTRY}/${PROJECT_NAME}:latest ."
        
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞"
        }
        
        Write-Log "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
        $cmd = "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}:$DEPLOY_TAG"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        $cmd = "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}:latest"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞"
        }
        
        Write-Success "–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–µ–≥: $DEPLOY_TAG)"
        
    } catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ/–æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞–∑–æ–≤: $_"
        exit 1
    }
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –í–ú –° –ó–ê–©–ò–¢–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô
function Copy-Files-To-VM {
    if ($SkipCopy) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–ø–∞—Ä–∞–º–µ—Ç—Ä -SkipCopy)"
        return
    }
    
    Write-Log "üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –í–ú..."
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –í–°–ï–ì–î–ê –∫–æ–ø–∏—Ä—É–µ–º
    $alwaysCopyFiles = @(
        "docker-compose.yml",
        "Dockerfile.client", 
        "Dockerfile.server",
        ".env"
    )
    
    try {
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        $cmd = "ssh ${VM_USER}@${VM_HOST} 'mkdir -p /home/${VM_USER}/${PROJECT_NAME}'"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        foreach ($file in $alwaysCopyFiles) {
            if (Test-Path $file) {
                Write-Log "üìã –ö–æ–ø–∏—Ä—É–µ–º $file..."
                $cmd = "scp $file ${VM_USER}@${VM_HOST}:/home/${VM_USER}/${PROJECT_NAME}/"
                
                if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
                Invoke-Expression $cmd
                
                if ($LASTEXITCODE -ne 0) {
                    throw "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è $file"
                }
            } else {
                Write-Warning "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            }
        }
        
        # ===== –ó–ê–©–ò–¢–ê NGINX –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====
        Write-Log "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ nginx/default.conf –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        $nginxExists = ssh ${VM_USER}@${VM_HOST} "test -f /home/${VM_USER}/${PROJECT_NAME}/nginx/default.conf && echo 'exists' || echo 'not exists'"
        
        if ($nginxExists -eq "exists" -and -not $ForceConfig) {
            Write-Warning "nginx/default.conf —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ."
            Write-Info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -ForceConfig –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        } else {
            if (Test-Path "nginx/default.conf") {
                Write-Log "üìã –ö–æ–ø–∏—Ä—É–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é nginx –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                $cmd = "ssh ${VM_USER}@${VM_HOST} 'mkdir -p /home/${VM_USER}/${PROJECT_NAME}/nginx'"
                if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
                Invoke-Expression $cmd
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                $cmd = "scp nginx/default.conf ${VM_USER}@${VM_HOST}:/home/${VM_USER}/${PROJECT_NAME}/nginx/"
                if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
                Invoke-Expression $cmd
                
                Write-Success "nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            } else {
                Write-Warning "nginx/default.conf –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ"
            }
        }
        
        # ===== –ó–ê–©–ò–¢–ê SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í =====
        Write-Log "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        $certsExist = ssh ${VM_USER}@${VM_HOST} "test -f /home/${VM_USER}/${PROJECT_NAME}/certs/fullchain.pem && echo 'exists' || echo 'not exists'"
        
        if ($certsExist -eq "exists" -and -not $ForceConfig) {
            Write-Success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã Let's Encrypt –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ù–ï —Ç—Ä–æ–≥–∞–µ–º –∏—Ö!"
            Write-Info "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ certbot"
        } else {
            if (Test-Path "certs") {
                Write-Warning "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ?)"
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é certs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                $cmd = "ssh ${VM_USER}@${VM_HOST} 'mkdir -p /home/${VM_USER}/${PROJECT_NAME}/certs'"
                if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
                Invoke-Expression $cmd
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
                $certFiles = @("privkey.pem", "fullchain.pem")
                foreach ($certFile in $certFiles) {
                    if (Test-Path "certs/$certFile") {
                        Write-Log "üìã –ö–æ–ø–∏—Ä—É–µ–º certs/$certFile..."
                        $cmd = "scp certs/$certFile ${VM_USER}@${VM_HOST}:/home/${VM_USER}/${PROJECT_NAME}/certs/"
                        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
                        Invoke-Expression $cmd
                    }
                }
            } else {
                Write-Info "–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è certs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
            }
        }
        
        Write-Success "–í—Å–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –í–ú"
        
    } catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: $_"
        exit 1
    }
}

# –î–µ–ø–ª–æ–π –Ω–∞ –í–ú
function Deploy-To-VM {
    if ($SkipDeploy) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –Ω–∞ –í–ú (–ø–∞—Ä–∞–º–µ—Ç—Ä -SkipDeploy)"
        return
    }
    
    Write-Log "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É (—Ç–µ–≥: $DEPLOY_TAG)..."
    
    # –°–æ–∑–¥–∞–µ–º bash —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    $scriptContent = @"
#!/bin/bash
set -e

cd /home/${VM_USER}/${PROJECT_NAME}

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose down || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker image rm ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:latest || true
docker image rm ${DOCKER_REGISTRY}/${PROJECT_NAME}:latest || true

echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞..."
docker system prune -f

echo "üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker pull ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:latest
docker pull ${DOCKER_REGISTRY}/${PROJECT_NAME}:latest

echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose up -d --force-recreate

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
sleep 15

echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose ps

echo "üìã –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 —Å—Ç—Ä–æ–∫..."
docker compose logs --tail=30

echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–µ–≥ –æ–±—Ä–∞–∑–æ–≤: $DEPLOY_TAG"
"@
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ Unix –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫
    $tempScriptPath = [System.IO.Path]::GetTempFileName()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å LF –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫
    $scriptBytes = [System.Text.Encoding]::UTF8.GetBytes($scriptContent.Replace("`r`n", "`n"))
    [System.IO.File]::WriteAllBytes($tempScriptPath, $scriptBytes)
    
    try {
        Write-Log "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –í–ú –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è..."
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –í–ú
        $cmd = "scp `"$tempScriptPath`" ${VM_USER}@${VM_HOST}:/tmp/deploy_script.sh"
        if ($Verbose) { Write-Info "–ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –í–ú: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ –í–ú"
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –í–ú
        $cmd = "ssh ${VM_USER}@${VM_HOST} 'chmod +x /tmp/deploy_script.sh && bash /tmp/deploy_script.sh'"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –í–ú: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞ –í–ú"
        }
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å –í–ú
        $cmd = "ssh ${VM_USER}@${VM_HOST} 'rm -f /tmp/deploy_script.sh'"
        Invoke-Expression $cmd
        
        Write-Success "–î–µ–ø–ª–æ–π –Ω–∞ –í–ú –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        
    } catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–∞ –í–ú: $_"
        Write-Info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ssh $VM_USER@$VM_HOST 'cd $PROJECT_NAME && docker compose ps && docker compose logs --tail=50'"
        exit 1
    } finally {
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Remove-Item $tempScriptPath -ErrorAction SilentlyContinue
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function Test-Deployment {
    Write-Log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
    
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Telegram
    Write-Log "üßπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –∫—ç—à Telegram..."
    Write-Info "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Telegram:"
    Write-Info "1. –ó–∞–∫—Ä–æ–π—Ç–µ MiniApp –≤ Telegram"
    Write-Info "2. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à Telegram: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–∞–Ω–Ω—ã–µ –∏ –ø–∞–º—è—Ç—å ‚Üí –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"
    Write-Info "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram"
    Write-Info "4. –û—Ç–∫—Ä–æ–π—Ç–µ MiniApp –∑–∞–Ω–æ–≤–æ"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å—Ç–∞—Ç—É—Å–∞
    Write-Log "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL..."
    $sslCheck = ssh ${VM_USER}@${VM_HOST} "cd ${PROJECT_NAME} && test -f certs/fullchain.pem && echo 'SSL OK' || echo 'NO SSL'"
    if ($sslCheck -eq "SSL OK") {
        Write-Success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ"
    } else {
        Write-Warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
    }
    
    try {
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS
        $response = Invoke-WebRequest -Uri "https://$VM_HOST" -Method GET -TimeoutSec 15 -SkipCertificateCheck -ErrorAction Stop
        
        if ($response.StatusCode -in @(200, 301, 302)) {
            Write-Success "HTTPS —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: https://rgszh-miniapp.org"
        }
    } catch {
        Write-Warning "HTTPS –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: $($_.Exception.Message)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP
        try {
            $response = Invoke-WebRequest -Uri "http://$VM_HOST" -Method GET -TimeoutSec 15 -ErrorAction Stop
            Write-Success "HTTP —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (–¥–æ–ª–∂–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ HTTPS)"
        } catch {
            Write-Warning "HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å"
        }
    }
    
    Write-Info "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
    Write-Info "ssh $VM_USER@$VM_HOST 'cd $PROJECT_NAME && docker compose ps && docker compose logs --tail=50'"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Host ""
    Write-Host "===============================================" -ForegroundColor Magenta
    Write-Host "üöÄ RGSZH MiniApp Deployment Script (PowerShell)" -ForegroundColor Magenta
    Write-Host "üè∑Ô∏è Deploy Tag: $DEPLOY_TAG" -ForegroundColor Magenta
    Write-Host "üîê SSL Protection: ENABLED" -ForegroundColor Green
    Write-Host "===============================================" -ForegroundColor Magenta
    Write-Host ""
    
    $startTime = Get-Date
    
    try {
        Test-Dependencies
        Build-And-Push-Images
        Copy-Files-To-VM
        Deploy-To-VM
        Test-Deployment
        
        $endTime = Get-Date
        $duration = $endTime - $startTime
        
        Write-Host ""
        Write-Host "===============================================" -ForegroundColor Magenta
        Write-Success "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ"
        Write-Info "–¢–µ–≥ –æ–±—Ä–∞–∑–æ–≤: $DEPLOY_TAG"
        Write-Info "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $($duration.Minutes)–º $($duration.Seconds)—Å"
        Write-Info "URL: https://rgszh-miniapp.org"
        Write-Host "===============================================" -ForegroundColor Magenta
        
    } catch {
        Write-Error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $_"
        exit 1
    }
}

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
function Show-Help {
    Write-Host @"
RGSZH MiniApp Deployment Script

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    .\deploy.ps1 [-SkipBuild] [-SkipCopy] [-SkipDeploy] [-ForceConfig] [-Verbose]

–ü–ê–†–ê–ú–ï–¢–†–´:
    -SkipBuild    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É Docker –æ–±—Ä–∞–∑–æ–≤
    -SkipCopy     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –í–ú
    -SkipDeploy   –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π –Ω–∞ –í–ú
    -ForceConfig  –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å nginx –∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    -Verbose      –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥

–ü–†–ò–ú–ï–†–´:
    .\deploy.ps1                         # –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π (–∑–∞—â–∏—Ç–∞ SSL)
    .\deploy.ps1 -SkipBuild             # –¢–æ–ª—å–∫–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–ø–ª–æ–π
    .\deploy.ps1 -ForceConfig           # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –í–°–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    .\deploy.ps1 -Verbose               # –° –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º

–ó–ê–©–ò–¢–ê SSL:
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä–∏–ø—Ç –ù–ï —Ç—Ä–æ–≥–∞–µ—Ç:
    - /nginx/default.conf (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    - /certs/* (SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã Let's Encrypt)
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -ForceConfig —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ!

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    - Docker Desktop
    - Git Bash –∏–ª–∏ WSL (–¥–ª—è scp/ssh –∫–æ–º–∞–Ω–¥)
    - –î–æ—Å—Ç—É–ø –∫ Docker Hub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é zerotlt
    - SSH –¥–æ—Å—Ç—É–ø –∫ –í–ú 176.109.110.217

"@ -ForegroundColor Cyan
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if ($args -contains "--help" -or $args -contains "-h") {
    Show-Help
    exit 0
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
Main