# deploy.ps1 - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è RGSZH MiniApp

param(
    [switch]$SkipBuild,
    [switch]$SkipCopy,
    [switch]$SkipDeploy,
    [switch]$Verbose
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
$VM_USER = "admin"
$VM_HOST = "176.109.110.217"
$DOCKER_REGISTRY = "zerotlt"
$PROJECT_NAME = "rgszh-miniapp"
$SOCKET_URL = "https://rgszh-miniapp.org"

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
$DEPLOY_TAG = (Get-Date -Format "yyyyMMdd-HHmmss")

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Red = "Red"
    Green = "Green"
    Yellow = "Yellow"
    Blue = "Cyan"
    Gray = "Gray"
}

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Color = "White")
    $timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-Log "‚úÖ $Message" -Color $Colors.Green
}

function Write-Error {
    param([string]$Message)
    Write-Log "‚ùå $Message" -Color $Colors.Red
}

function Write-Warning {
    param([string]$Message)
    Write-Log "‚ö†Ô∏è $Message" -Color $Colors.Yellow
}

function Write-Info {
    param([string]$Message)
    Write-Log "‚ÑπÔ∏è $Message" -Color $Colors.Blue
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function Test-Dependencies {
    Write-Log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    $dependencies = @("docker", "scp", "ssh")
    $missing = @()
    
    foreach ($dep in $dependencies) {
        if (-not (Get-Command $dep -ErrorAction SilentlyContinue)) {
            $missing += $dep
        }
    }
    
    if ($missing.Count -gt 0) {
        Write-Error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: $($missing -join ', ')"
        Write-Info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –∏ Git Bash (–∏–ª–∏ WSL) –¥–ª—è scp/ssh"
        exit 1
    }
    
    Write-Success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
function Build-And-Push-Images {
    if ($SkipBuild) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤ (–ø–∞—Ä–∞–º–µ—Ç—Ä -SkipBuild)"
        return
    }
    
    Write-Log "üê≥ –°–±–æ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ (—Ç–µ–≥: $DEPLOY_TAG)..."
    
    try {
        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
        Write-Log "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞..."
        $cmd = "docker system prune -f"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        # –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ç–µ–≥–æ–º
        Write-Log "üì¶ –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
        $cmd = "docker build --no-cache -f Dockerfile.server -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:$DEPLOY_TAG -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:latest ."
        
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞"
        }
        
        Write-Log "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
        $cmd = "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:$DEPLOY_TAG"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        $cmd = "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:latest"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞"
        }
        
        Write-Success "–°–µ—Ä–≤–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–µ–≥: $DEPLOY_TAG)"
        
        # –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ç–µ–≥–æ–º (–ò–°–ü–†–ê–í–õ–ï–ù–ê –û–®–ò–ë–ö–ê –í SOCKET_URL)
        Write-Log "üì¶ –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
        $cmd = "docker build --no-cache -f Dockerfile.client --build-arg REACT_APP_SOCKET_URL=`"$SOCKET_URL`" -t ${DOCKER_REGISTRY}/${PROJECT_NAME}:$DEPLOY_TAG -t ${DOCKER_REGISTRY}/${PROJECT_NAME}:latest ."
        
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞"
        }
        
        Write-Log "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
        $cmd = "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}:$DEPLOY_TAG"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        $cmd = "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}:latest"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞"
        }
        
        Write-Success "–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–µ–≥: $DEPLOY_TAG)"
        
    } catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ/–æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞–∑–æ–≤: $_"
        exit 1
    }
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –í–ú
function Copy-Files-To-VM {
    if ($SkipCopy) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–ø–∞—Ä–∞–º–µ—Ç—Ä -SkipCopy)"
        return
    }
    
    Write-Log "üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –í–ú..."
    
    $files = @(
        "docker-compose.yml",
        "Dockerfile.client", 
        "Dockerfile.server",
        ".env"
    )
    
    try {
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        $cmd = "ssh ${VM_USER}@${VM_HOST} 'mkdir -p /home/${VM_USER}/${PROJECT_NAME}'"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
        Invoke-Expression $cmd
        
        foreach ($file in $files) {
            if (Test-Path $file) {
                Write-Log "üìã –ö–æ–ø–∏—Ä—É–µ–º $file..."
                $cmd = "scp $file ${VM_USER}@${VM_HOST}:/home/${VM_USER}/${PROJECT_NAME}/"
                
                if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º: $cmd" }
                Invoke-Expression $cmd
                
                if ($LASTEXITCODE -ne 0) {
                    throw "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è $file"
                }
            } else {
                Write-Warning "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            }
        }
        
        Write-Success "–í—Å–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –í–ú"
        
    } catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: $_"
        exit 1
    }
}

# –î–µ–ø–ª–æ–π –Ω–∞ –í–ú —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
function Deploy-To-VM {
    if ($SkipDeploy) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –Ω–∞ –í–ú (–ø–∞—Ä–∞–º–µ—Ç—Ä -SkipDeploy)"
        return
    }
    
    Write-Log "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É (—Ç–µ–≥: $DEPLOY_TAG)..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫
    $tempScript = New-TemporaryFile
    $scriptContent = @"
#!/bin/bash
set -e
cd /home/${VM_USER}/${PROJECT_NAME}

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose down || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

echo "üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker image rm ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:latest || true
docker image rm ${DOCKER_REGISTRY}/${PROJECT_NAME}:latest || true
docker image rm ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:$DEPLOY_TAG || true
docker image rm ${DOCKER_REGISTRY}/${PROJECT_NAME}:$DEPLOY_TAG || true

echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞..."
docker system prune -f

echo "üì• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker pull ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:latest
docker pull ${DOCKER_REGISTRY}/${PROJECT_NAME}:latest

echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏..."
docker compose up -d --force-recreate

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
sleep 10

echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose ps

echo "üìã –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å—Ç—Ä–æ–∫..."
docker compose logs --tail=20

echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–µ–≥ –æ–±—Ä–∞–∑–æ–≤: $DEPLOY_TAG"
"@
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å Unix –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫
    [System.IO.File]::WriteAllText($tempScript.FullName, $scriptContent, [System.Text.Encoding]::UTF8)
    
    try {
        Write-Log "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –í–ú –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è..."
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –í–ú
        $cmd = "scp $($tempScript.FullName) ${VM_USER}@${VM_HOST}:/tmp/deploy_script.sh"
        if ($Verbose) { Write-Info "–ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –í–ú: $cmd" }
        Invoke-Expression $cmd
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –í–ú
        $cmd = "ssh ${VM_USER}@${VM_HOST} 'chmod +x /tmp/deploy_script.sh && /tmp/deploy_script.sh'"
        if ($Verbose) { Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –í–ú: $cmd" }
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞ –í–ú"
        }
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å –í–ú
        $cmd = "ssh ${VM_USER}@${VM_HOST} 'rm -f /tmp/deploy_script.sh'"
        Invoke-Expression $cmd
        
        Write-Success "–î–µ–ø–ª–æ–π –Ω–∞ –í–ú –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        
    } catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–∞ –í–ú: $_"
        Write-Info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ssh $VM_USER@$VM_HOST 'cd $PROJECT_NAME && docker compose ps && docker compose logs --tail=50'"
        exit 1
    } finally {
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Remove-Item $tempScript.FullName -ErrorAction SilentlyContinue
    }
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function Test-Deployment {
    Write-Log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
    
    try {
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP
        $response = Invoke-WebRequest -Uri "http://$VM_HOST" -Method GET -TimeoutSec 15 -ErrorAction Stop
        
        if ($response.StatusCode -in @(200, 301, 302)) {
            Write-Success "–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://$VM_HOST (–∫–æ–¥: $($response.StatusCode))"
        } else {
            Write-Warning "–°–∞–π—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º $($response.StatusCode)"
        }
    } catch {
        Write-Warning "HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: $($_.Exception.Message)"
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try {
            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $tcpClient.Connect($VM_HOST, 80)
            $tcpClient.Close()
            Write-Success "TCP –ø–æ—Ä—Ç 80 –æ—Ç–∫—Ä—ã—Ç –Ω–∞ $VM_HOST"
        } catch {
            Write-Warning "TCP –ø–æ—Ä—Ç 80 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $($_.Exception.Message)"
        }
    }
    
    Write-Info "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
    Write-Info "ssh $VM_USER@$VM_HOST 'cd $PROJECT_NAME && docker compose ps && docker compose logs --tail=50'"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Host ""
    Write-Host "===============================================" -ForegroundColor Magenta
    Write-Host "üöÄ RGSZH MiniApp Deployment Script (PowerShell)" -ForegroundColor Magenta
    Write-Host "üè∑Ô∏è Deploy Tag: $DEPLOY_TAG" -ForegroundColor Magenta
    Write-Host "===============================================" -ForegroundColor Magenta
    Write-Host ""
    
    $startTime = Get-Date
    
    try {
        Test-Dependencies
        Build-And-Push-Images
        Copy-Files-To-VM
        Deploy-To-VM
        Test-Deployment
        
        $endTime = Get-Date
        $duration = $endTime - $startTime
        
        Write-Host ""
        Write-Host "===============================================" -ForegroundColor Magenta
        Write-Success "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ"
        Write-Info "–¢–µ–≥ –æ–±—Ä–∞–∑–æ–≤: $DEPLOY_TAG"
        Write-Info "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $($duration.Minutes)–º $($duration.Seconds)—Å"
        Write-Info "URL: http://$VM_HOST"
        Write-Host "===============================================" -ForegroundColor Magenta
        
    } catch {
        Write-Error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $_"
        exit 1
    }
}

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
function Show-Help {
    Write-Host @"
RGSZH MiniApp Deployment Script

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    .\deploy.ps1 [-SkipBuild] [-SkipCopy] [-SkipDeploy] [-Verbose]

–ü–ê–†–ê–ú–ï–¢–†–´:
    -SkipBuild   –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É Docker –æ–±—Ä–∞–∑–æ–≤
    -SkipCopy    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –í–ú
    -SkipDeploy  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π –Ω–∞ –í–ú
    -Verbose     –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥

–ü–†–ò–ú–ï–†–´:
    .\deploy.ps1                        # –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π
    .\deploy.ps1 -SkipBuild            # –¢–æ–ª—å–∫–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–ø–ª–æ–π
    .\deploy.ps1 -SkipCopy -SkipDeploy # –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    .\deploy.ps1 -Verbose              # –° –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    - Docker Desktop
    - Git Bash –∏–ª–∏ WSL (–¥–ª—è scp/ssh –∫–æ–º–∞–Ω–¥)
    - –î–æ—Å—Ç—É–ø –∫ Docker Hub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é zerotlt
    - SSH –¥–æ—Å—Ç—É–ø –∫ –í–ú 176.109.110.217

"@ -ForegroundColor Cyan
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if ($args -contains "--help" -or $args -contains "-h") {
    Show-Help
    exit 0
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
Main