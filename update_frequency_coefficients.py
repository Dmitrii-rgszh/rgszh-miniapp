#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import os

def update_frequency_coefficients():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞–±–ª–∏—Ü–µ Excel"""
    
    db_path = 'miniapp.db'
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    coefficients = [
        ('annual', 1.0000),      # –ï–∂–µ–≥–æ–¥–Ω–æ
        ('semi_annual', 0.5100), # –†–∞–∑ –≤ –ø–æ–ª–≥–æ–¥–∞  
        ('quarterly', 0.2575),   # –ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ
        ('monthly', 0.0867)      # –ï–∂–µ–º–µ—Å—è—á–Ω–æ
    ]
    
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏...")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS justincase_frequency_coefficients (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                payment_frequency VARCHAR(20) NOT NULL UNIQUE,
                coefficient REAL NOT NULL
            )
        """)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("DELETE FROM justincase_frequency_coefficients")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        for freq, coeff in coefficients:
            cursor.execute("""
                INSERT INTO justincase_frequency_coefficients (payment_frequency, coefficient)
                VALUES (?, ?)
            """, (freq, coeff))
            print(f"   {freq}: {coeff}")
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT * FROM justincase_frequency_coefficients ORDER BY payment_frequency")
        rows = cursor.fetchall()
        
        print(f"\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:")
        for row in rows:
            print(f"   ID {row[0]}: {row[1]} = {row[2]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        if conn:
            conn.close()

def check_tariffs_table():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ –±–∞–∑–µ"""
    
    db_path = 'miniapp.db'
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–∞—Ä–∏—Ñ–æ–≤
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='justincase_tariffs'")
        if not cursor.fetchone():
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='justincase_base_tariffs'")
            if not cursor.fetchone():
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            else:
                table_name = 'justincase_base_tariffs'
        else:
            table_name = 'justincase_tariffs'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–∞—Ä–∏—Ñ–æ–≤
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        
        if count == 0:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(f"SELECT age, gender, term_years FROM {table_name} WHERE age=30 AND gender='m' LIMIT 5")
        test_rows = cursor.fetchall()
        
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –∑–∞–ø–∏—Å–µ–π")
        if test_rows:
            print(f"   –ù–∞–π–¥–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ 30, –ø–æ–ª m:")
            for row in test_rows:
                print(f"     –í–æ–∑—Ä–∞—Å—Ç: {row[0]}, –ü–æ–ª: {row[1]}, –°—Ä–æ–∫: {row[2]} –ª–µ—Ç")
        else:
            print(f"   ‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ 30, –ø–æ–ª m –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute(f"SELECT DISTINCT age, gender FROM {table_name} ORDER BY age, gender LIMIT 10")
            available = cursor.fetchall()
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–æ–ª—ã:")
            for row in available:
                print(f"     –í–æ–∑—Ä–∞—Å—Ç: {row[0]}, –ü–æ–ª: {row[1]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
        return False
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    print("üîß === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• ===\n")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    if update_frequency_coefficients():
        print("\n" + "="*50 + "\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ—ã
        check_tariffs_table()
    
    print("\nüèÅ –ì–æ—Ç–æ–≤–æ!")
