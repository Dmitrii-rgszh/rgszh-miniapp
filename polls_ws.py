# polls_ws.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

from flask_socketio import emit, join_room, leave_room
from poll_manager import poll_manager
import logging

logger = logging.getLogger("polls_ws")

def register_poll_ws(socketio):
    
    @socketio.on('connect')
    def on_connect():
        logger.info(f"üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {request.sid}")
    
    @socketio.on('disconnect')
    def on_disconnect():
        logger.info(f"üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {request.sid}")
    
    @socketio.on('joinPoll')
    def on_join(_data=None):
        logger.info(f"üë• –ö–ª–∏–µ–Ω—Ç {request.sid} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –æ–ø—Ä–æ—Å—É")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É –æ–ø—Ä–æ—Å–∞
        join_room('poll_room')
        
        # –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        opts = poll_manager.snapshot()
        total = sum(o["votes"] for o in opts)
        
        logger.info(f"üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {total} –≥–æ–ª–æ—Å–æ–≤")
        emit('pollResults', {"options": opts, "total": total})
    
    @socketio.on('newVote')
    def on_new_vote(data):
        logger.info(f"üó≥Ô∏è –ü–æ–ª—É—á–µ–Ω –≥–æ–ª–æ—Å –æ—Ç {request.sid}: {data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å
        idx = data.get('index') if isinstance(data, dict) else data
        
        if isinstance(idx, int) and poll_manager.vote(idx):
            logger.info(f"‚úÖ –ì–æ–ª–æ—Å —É—á—Ç–µ–Ω –¥–ª—è –æ–ø—Ü–∏–∏ {idx}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            opts = poll_manager.snapshot()
            total = sum(o["votes"] for o in opts)
            
            # ‚úÖ –í–ê–ñ–ù–û: –†–∞—Å—Å—ã–ª–∞–µ–º –í–°–ï–ú –∫–ª–∏–µ–Ω—Ç–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ, –≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            socketio.emit('pollResults', {"options": opts, "total": total}, room='poll_room')
            
            logger.info(f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–æ—Å–ª–∞–Ω—ã –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º: {total} –≥–æ–ª–æ—Å–æ–≤")
        else:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≥–æ–ª–æ—Å–∞: {idx}")
            emit('error', {"message": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≥–æ–ª–æ—Å–∞"})
    
    @socketio.on('resetPoll')
    def on_reset(_data=None):
        logger.info(f"üîÑ –°–±—Ä–æ—Å –æ–ø—Ä–æ—Å–∞ –æ—Ç {request.sid}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        poll_manager.reset()
        
        # ‚úÖ –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –≥–æ–≤–æ—Ä–∏–º –≤—Å–µ–º –æ —Å–±—Ä–æ—Å–µ
        socketio.emit('pollReset', room='poll_room')
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ (–ø—É—Å—Ç—ã–µ) —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        opts = poll_manager.snapshot()
        total = sum(o["votes"] for o in opts)
        socketio.emit('pollResults', {"options": opts, "total": total}, room='poll_room')
        
        logger.info("üì° –°–±—Ä–æ—Å —Ä–∞–∑–æ—Å–ª–∞–Ω –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º")
    
    @socketio.on('error')
    def on_error(error):
        logger.error(f"‚ùå Socket.IO –æ—à–∏–±–∫–∞ –æ—Ç {request.sid}: {error}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    @socketio.on('ping')
    def on_ping(data):
        logger.info(f"üèì Ping –æ—Ç {request.sid}")
        emit('pong', {'timestamp': data.get('timestamp')})

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è HTTP API)
def broadcast_poll_update(socketio):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    try:
        opts = poll_manager.snapshot()
        total = sum(o["votes"] for o in opts)
        
        socketio.emit('pollResults', {"options": opts, "total": total}, room='poll_room')
        logger.info(f"üì° Broadcast: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º ({total} –≥–æ–ª–æ—Å–æ–≤)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ broadcast: {e}")

def broadcast_poll_reset(socketio):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–±—Ä–æ—Å –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    try:
        socketio.emit('pollReset', room='poll_room')
        
        opts = poll_manager.snapshot()
        total = sum(o["votes"] for o in opts)
        socketio.emit('pollResults', {"options": opts, "total": total}, room='poll_room')
        
        logger.info("üì° Broadcast: —Å–±—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ broadcast reset: {e}")




