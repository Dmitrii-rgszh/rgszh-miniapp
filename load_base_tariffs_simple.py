#!/usr/bin/env python3
# load_base_tariffs_simple.py - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤

import pandas as pd
import psycopg2
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    "user": "postgres",
    "password": "secret", 
            "host": "176.108.243.189",
    "port": 1112,
    "dbname": "postgres"
}

def create_base_tariffs_table(cursor):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É base_tariffs –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    create_table_sql = """
    CREATE TABLE IF NOT EXISTS base_tariffs (
        id SERIAL PRIMARY KEY,
        payment_period INTEGER NOT NULL,
        insured_age INTEGER NOT NULL,
        gender VARCHAR(10) NOT NULL,
        death_lp DECIMAL(10, 6) NOT NULL,
        disability_lp DECIMAL(10, 6) NOT NULL,
        death_accident DECIMAL(10, 6) NOT NULL,
        death_transport DECIMAL(10, 6) NOT NULL,
        trauma DECIMAL(10, 6) NOT NULL,
        kz_russia_premium DECIMAL(12, 2) NOT NULL,
        kz_foreign_premium DECIMAL(12, 2) NOT NULL,
        discount_kv DECIMAL(10, 6) NOT NULL,
        loading DECIMAL(10, 6) NOT NULL,
        loading_kz DECIMAL(10, 6) NOT NULL,
        interest_rate DECIMAL(10, 6) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    CREATE INDEX IF NOT EXISTS idx_base_tariffs_age_gender ON base_tariffs(insured_age, gender);
    CREATE INDEX IF NOT EXISTS idx_base_tariffs_period ON base_tariffs(payment_period);
    """
    
    try:
        cursor.execute(create_table_sql)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ base_tariffs —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False

def clean_csv_data(df):
    """–û—á–∏—â–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV"""
    logger.info("–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–π
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ CSV: –ü–µ—Ä–∏–æ–¥;–í–æ–∑—Ä–∞—Å—Ç;–ü–æ–ª;–°–º–µ—Ä—Ç—å –õ–ü;–ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å;–°–º–µ—Ä—Ç—å –ù–°;–°–º–µ—Ä—Ç—å –î–¢–ü;–¢—Ä–∞–≤–º–∞;–ö–ó –†–§;–ö–ó –ó–∞—Ä—É–±–µ–∂;–î–∏—Å–∫–æ–Ω—Ç;–ù–∞–≥—Ä—É–∑–∫–∞;–ù–∞–≥—Ä—É–∑–∫–∞ –ö–ó;i
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—è—Ö (–∏–Ω–¥–µ–∫—Å—ã 1 –∏ 2)
    df = df.dropna(subset=[df.columns[1], df.columns[2]])
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç (–∏–Ω–¥–µ–∫—Å 1)
    df.iloc[:, 1] = pd.to_numeric(df.iloc[:, 1], errors='coerce')
    df = df.dropna(subset=[df.columns[1]])
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ (–∏–Ω–¥–µ–∫—Å—ã 3-8, 10-12)
    percentage_indices = [3, 4, 5, 6, 7, 10, 11, 12]
    for idx in percentage_indices:
        if idx < len(df.columns):
            # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ % –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ
            df.iloc[:, idx] = df.iloc[:, idx].astype(str).str.replace('%', '').str.replace(',', '.')
            df.iloc[:, idx] = pd.to_numeric(df.iloc[:, idx], errors='coerce')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç (–∏–Ω–¥–µ–∫—Å—ã 8, 9)
    money_indices = [8, 9]
    for idx in money_indices:
        if idx < len(df.columns):
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            df.iloc[:, idx] = df.iloc[:, idx].astype(str).str.replace(' ', '').str.replace(',', '.')
            df.iloc[:, idx] = pd.to_numeric(df.iloc[:, idx], errors='coerce')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü (–∏–Ω–¥–µ–∫—Å 13) - –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
    if len(df.columns) > 13:
        df.iloc[:, 13] = df.iloc[:, 13].astype(str).str.replace(',', '.')
        df.iloc[:, 13] = pd.to_numeric(df.iloc[:, 13], errors='coerce')
    
    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(df)}")
    return df

def load_data_to_database(df, cursor, conn):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    insert_sql = """
    INSERT INTO base_tariffs (
        payment_period, insured_age, gender, death_lp, disability_lp,
        death_accident, death_transport, trauma, kz_russia_premium,
        kz_foreign_premium, discount_kv, loading, loading_kz, interest_rate
    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """
    
    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("DELETE FROM base_tariffs")
    logger.info("–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    records_count = 0
    for _, row in df.iterrows():
        try:
            values = (
                int(row.iloc[0]),      # –ü–µ—Ä–∏–æ–¥ —É–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏–∏
                int(row.iloc[1]),      # –í–æ–∑—Ä–∞—Å—Ç
                str(row.iloc[2]),      # –ü–æ–ª
                float(row.iloc[3]),    # –°–º–µ—Ä—Ç—å –õ–ü
                float(row.iloc[4]),    # –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                float(row.iloc[5]),    # –°–º–µ—Ä—Ç—å –ù–°
                float(row.iloc[6]),    # –°–º–µ—Ä—Ç—å –î–¢–ü
                float(row.iloc[7]),    # –¢—Ä–∞–≤–º–∞
                float(row.iloc[8]),    # –ö–ó –†–§
                float(row.iloc[9]),    # –ö–ó –ó–∞—Ä—É–±–µ–∂
                float(row.iloc[10]),   # –î–∏—Å–∫–æ–Ω—Ç –∫ –ö–í
                float(row.iloc[11]),   # –ù–∞–≥—Ä—É–∑–∫–∞
                float(row.iloc[12]),   # –ù–∞–≥—Ä—É–∑–∫–∞ –ö–ó
                float(row.iloc[13])    # i
            )
            cursor.execute(insert_sql, values)
            records_count += 1
            
            if records_count % 100 == 0:
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {records_count}")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫–∏ {records_count + 1}: {e}")
            continue
    
    conn.commit()
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {records_count}")
    return records_count

def verify_data_loaded(cursor):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
    try:
        cursor.execute("SELECT COUNT(*) FROM base_tariffs")
        count = cursor.fetchone()[0]
        logger.info(f"‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ base_tariffs –∑–∞–ø–∏—Å–µ–π: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
        cursor.execute("SELECT MIN(insured_age), MAX(insured_age) FROM base_tariffs")
        age_range = cursor.fetchone()
        logger.info(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–æ–≤: {age_range[0]} - {age_range[1]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—ã
        cursor.execute("SELECT gender, COUNT(*) FROM base_tariffs GROUP BY gender")
        genders = cursor.fetchall()
        logger.info(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É: {dict(genders)}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    csv_path = Path("–ë–∞–∑–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã.csv")
    
    if not csv_path.exists():
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if not create_base_tariffs_table(cursor):
            return False
        
        # –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        logger.info(f"–ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞: {csv_path}")
        df = pd.read_csv(csv_path, sep=';', encoding='cp1251', encoding_errors='replace')
        logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ CSV: {len(df)}")
        
        # –í—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = clean_csv_data(df)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
        records_count = load_data_to_database(df, cursor, conn)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        verify_data_loaded(cursor)
        
        cursor.close()
        conn.close()
        
        logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö!") 