#!/usr/bin/env python3
# debug_justincase.py
# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å JustInCase –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º

import os
import sys
import logging

print("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê JUSTINCASE –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê ===")
print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
print("\nüìÇ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:")
required_files = [
    'justincase_calculator.py',
    'justincase_routes.py',
    'server.py'
]

for file in required_files:
    exists = os.path.exists(file)
    size = os.path.getsize(file) if exists else 0
    print(f"  {'‚úÖ' if exists else '‚ùå'} {file} ({size} bytes)")

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç justincase_calculator
print("\nüîÑ –¢–ï–°–¢–ò–†–£–ï–ú –ò–ú–ü–û–†–¢ JUSTINCASE_CALCULATOR:")
try:
    from justincase_calculator import JustincaseCalculatorComplete
    print("  ‚úÖ JustincaseCalculatorComplete –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    try:
        calculator = JustincaseCalculatorComplete()
        print("  ‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        try:
            info = calculator.get_calculator_info()
            print(f"  ‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {info['name']}")
            print(f"     –í–µ—Ä—Å–∏—è: {info['version']}")
            print(f"     –ê–∫—Ç—É–∞—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {info['features']['actuarial_tables']}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ: {e}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
        print(f"     –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        
except ImportError as e:
    print(f"  ‚ùå ImportError: {e}")
    print(f"     –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
except Exception as e:
    print(f"  ‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print(f"     –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
    import traceback
    traceback.print_exc()

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç justincase_routes
print("\nüîÑ –¢–ï–°–¢–ò–†–£–ï–ú –ò–ú–ü–û–†–¢ JUSTINCASE_ROUTES:")
try:
    from justincase_routes import register_justincase_routes, justincase_bp
    print("  ‚úÖ justincase_routes –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    print(f"  ‚úÖ Blueprint justincase_bp –Ω–∞–π–¥–µ–Ω: {justincase_bp}")
    print(f"  ‚úÖ –§—É–Ω–∫—Ü–∏—è register_justincase_routes –Ω–∞–π–¥–µ–Ω–∞: {register_justincase_routes}")
except ImportError as e:
    print(f"  ‚ùå ImportError: {e}")
except Exception as e:
    print(f"  ‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    import traceback
    traceback.print_exc()

# 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤
print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ –ú–ê–†–®–†–£–¢–û–í:")
try:
    from flask import Flask
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    test_app = Flask(__name__)
    print("  ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    from justincase_routes import register_justincase_routes
    
    with test_app.app_context():
        result = register_justincase_routes(test_app)
        print(f"  {'‚úÖ' if result else '‚ùå'} –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        routes = []
        for rule in test_app.url_map.iter_rules():
            if '/api/proxy/calculator/save' in rule.rule or '/api/justincase' in rule.rule:
                routes.append(f"{rule.methods} {rule.rule}")
        
        print(f"  üìç –ù–∞–π–¥–µ–Ω–æ {len(routes)} API –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
        for route in routes:
            print(f"     - {route}")
            
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à –ø—Ä–æ–±–ª–µ–º–Ω—ã–π endpoint
        has_main_endpoint = any('/api/proxy/calculator/save' in rule.rule for rule in test_app.url_map.iter_rules())
        print(f"  {'‚úÖ' if has_main_endpoint else '‚ùå'} –û—Å–Ω–æ–≤–Ω–æ–π endpoint /api/proxy/calculator/save –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {has_main_endpoint}")
        
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    import traceback
    traceback.print_exc()

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
print("\nüîß –ü–†–û–í–ï–†–Ø–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø:")
try:
    # –≠–º—É–ª–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–∞–∫ –≤ server.py
    JUSTINCASE_AVAILABLE = False
    JUSTINCASE_ERROR = None
    
    try:
        from justincase_routes import register_justincase_routes
        JUSTINCASE_AVAILABLE = True
        JUSTINCASE_ERROR = None
        print("  ‚úÖ JUSTINCASE_AVAILABLE = True")
    except ImportError as e:
        JUSTINCASE_AVAILABLE = False
        JUSTINCASE_ERROR = str(e)
        print(f"  ‚ùå JUSTINCASE_AVAILABLE = False")
        print(f"     JUSTINCASE_ERROR = {JUSTINCASE_ERROR}")
    except Exception as e:
        JUSTINCASE_AVAILABLE = False
        JUSTINCASE_ERROR = str(e)
        print(f"  ‚ùå JUSTINCASE_AVAILABLE = False")
        print(f"     JUSTINCASE_ERROR = {JUSTINCASE_ERROR}")
        
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")

# 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç
print("\nüßÆ –¢–ï–°–¢–ò–†–£–ï–ú –ü–†–û–°–¢–û–ô –†–ê–°–ß–ï–¢:")
try:
    from justincase_calculator import JustincaseCalculatorComplete
    
    calculator = JustincaseCalculatorComplete()
    
    test_data = {
        'birthDate': '1990-01-01',
        'gender': 'male',
        'insuranceInfo': 'yes',
        'insuranceTerm': '5',
        'insuranceSum': '1000000',
        'insuranceFrequency': '–ï–∂–µ–≥–æ–¥–Ω–æ',
        'accidentPackage': False,
        'criticalPackage': False,
        'sportPackage': False
    }
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, errors = calculator.validate_input_data(test_data)
    print(f"  {'‚úÖ' if is_valid else '‚ùå'} –í–∞–ª–∏–¥–∞—Ü–∏—è: {is_valid}")
    if errors:
        print(f"     –û—à–∏–±–∫–∏: {errors}")
    
    if is_valid:
        # –†–∞—Å—á–µ—Ç
        result = calculator.calculate_full_program(test_data)
        premium = result.get('annualPremium', 0)
        print(f"  ‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: –ø—Ä–µ–º–∏—è {premium:,} —Ä—É–±.")
    
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
    import traceback
    traceback.print_exc()

print("\nüéØ === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===")
print("–ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –≤—ã—à–µ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –Ω–æ endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç,")
print("–ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
print("1. –ö–æ–Ω—Ñ–ª–∏–∫—Ç–µ –∏–º–µ–Ω –º–∞—Ä—à—Ä—É—Ç–æ–≤")
print("2. –ü–æ—Ä—è–¥–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ server.py")
print("3. –ü—Ä–æ–±–ª–µ–º–∞—Ö —Å CORS")
print("4. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")

print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é")
print("2. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞")
print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏")
print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ /api/justincase/status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")