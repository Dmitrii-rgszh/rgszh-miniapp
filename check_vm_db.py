#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –í–ú
"""

import sqlite3
import os

def check_local_db():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists('miniapp.db'):
        print("‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö miniapp.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    conn = sqlite3.connect('miniapp.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = cursor.fetchall()
    
    print("üìä –õ–û–ö–ê–õ–¨–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–•:")
    print("=" * 50)
    for table in tables:
        table_name = table[0]
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        print(f"  üìã {table_name}: {count:,} –∑–∞–ø–∏—Å–µ–π")
    
    conn.close()

def check_tariff_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    conn = sqlite3.connect('miniapp.db')
    cursor = conn.cursor()
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏/–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    tariff_tables = []
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND (name LIKE '%tariff%' OR name LIKE '%coefficient%' OR name LIKE '%actuarial%')")
    tables = cursor.fetchall()
    
    print("\nüéØ –¢–ê–†–ò–§–ù–´–ï –¢–ê–ë–õ–ò–¶–´:")
    print("=" * 50)
    
    for table in tables:
        table_name = table[0]
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        
        print(f"\nüìã {table_name}: {count:,} –∑–∞–ø–∏—Å–µ–π")
        print("   –ö–æ–ª–æ–Ω–∫–∏:", ", ".join([col[1] for col in columns]))
        
        if count > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
            samples = cursor.fetchall()
            for i, sample in enumerate(samples):
                print(f"   –ü—Ä–∏–º–µ—Ä {i+1}: {sample}")
    
    conn.close()

if __name__ == "__main__":
    print("üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –î–õ–Ø –í–ú")
    print("=" * 60)
    
    check_local_db()
    check_tariff_structure()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
