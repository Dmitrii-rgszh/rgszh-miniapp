# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π"
"""

import requests
import json

def test_corporate_coefficients():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏ email"""
    
    base_url = "http://localhost:4000/api/justincase/calculate"
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    base_data = {
        "age": 35,
        "gender": "m",
        "term_years": 15,
        "sum_insured": 1000000,
        "include_accident": True,
        "include_critical_illness": True,
        "critical_illness_type": "rf",
        "payment_frequency": "annual"
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ email —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    test_emails = [
        ("test@rgsl.ru", "–†–ì–°–õ (+5%)"),
        ("employee@vtb.ru", "–í–¢–ë (+20%)"),
        ("user@gmail.com", "–í–Ω–µ—à–Ω–∏–π –¥–æ–º–µ–Ω (+30%/+35%)"),
        ("", "–ë–µ–∑ email (+30%/+35%)"),
        ("invalid-email", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (+30%/+35%)")
    ]
    
    print("=" * 80)
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–• –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í")
    print("=" * 80)
    print()
    
    results = []
    
    for email, description in test_emails:
        test_data = base_data.copy()
        test_data["email"] = email
        
        try:
            response = requests.post(base_url, json=test_data, headers={"Content-Type": "application/json"})
            
            if response.status_code == 200:
                result = response.json()
                if result.get("success"):
                    data = result["data"]
                    corporate_coeffs = data["calculation_details"]["corporate_coefficients"]
                    
                    results.append({
                        "email": email,
                        "description": description,
                        "base_coefficient": corporate_coeffs["base_coefficient"],
                        "critical_coefficient": corporate_coeffs["critical_coefficient"],
                        "base_premium": data["base_premium"],
                        "accident_premium": data["accident_premium"],
                        "critical_illness_premium": data["critical_illness_premium"],
                        "final_premium": data["final_premium"]
                    })
                    
                    print(f"‚úÖ {description}")
                    print(f"   Email: {email or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                    print(f"   –ë–∞–∑–æ–≤—ã–µ —Ä–∏—Å–∫–∏: {corporate_coeffs['base_coefficient']:.2f} (+{(corporate_coeffs['base_coefficient']-1)*100:.0f}%)")
                    print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {corporate_coeffs['critical_coefficient']:.2f} (+{(corporate_coeffs['critical_coefficient']-1)*100:.0f}%)")
                    print(f"   –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {data['final_premium']:,.2f} —Ä—É–±.")
                    print()
                else:
                    print(f"‚ùå {description}: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    print()
            else:
                print(f"‚ùå {description}: HTTP {response.status_code}")
                print()
                
        except Exception as e:
            print(f"‚ùå {description}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
            print()
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if len(results) >= 2:
        print("=" * 80)
        print("üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        print(f"{'–î–æ–º–µ–Ω':<20} {'–ö–æ—ç—Ñ—Ñ.–±–∞–∑–∞':<12} {'–ö–æ—ç—Ñ—Ñ.–ö–ó':<12} {'–ë–∞–∑–æ–≤–∞—è':<12} {'–ù–°':<12} {'–ö–ó':<12} {'–ò—Ç–æ–≥–æ':<12}")
        print("-" * 92)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω)
        base_result = results[0]
        for result in results:
            domain = result["email"].split("@")[-1] if "@" in result["email"] else result["email"] or "–ù–µ—Ç"
            print(f"{domain:<20} {result['base_coefficient']:<12.2f} {result['critical_coefficient']:<12.2f} "
                  f"{result['base_premium']:<12.2f} {result['accident_premium']:<12.2f} "
                  f"{result['critical_illness_premium']:<12.2f} {result['final_premium']:<12.2f}")
        
        print("-" * 92)
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ
        min_premium = min(r["final_premium"] for r in results)
        print("\nüìà –†–ê–ó–ù–ò–¶–ê –í –°–¢–û–ò–ú–û–°–¢–ò:")
        for result in results:
            domain = result["email"].split("@")[-1] if "@" in result["email"] else result["email"] or "–ù–µ—Ç"
            diff_abs = result["final_premium"] - min_premium
            diff_pct = (diff_abs / min_premium * 100) if min_premium > 0 else 0
            print(f"   {domain}: +{diff_abs:,.2f} —Ä—É–±. (+{diff_pct:.1f}%)")
    
    print("\n" + "=" * 80)
    print("üìã –í–´–í–û–î–´:")
    print("=" * 80)
    print("‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –†–∞–∑–Ω—ã–µ –¥–æ–º–µ–Ω—ã –ø–æ–ª—É—á–∞—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏/—Å–∫–∏–¥–∫–∏")
    print("‚úÖ –ö–ó –∏–º–µ–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –¥–æ–º–µ–Ω–æ–≤")
    print("üéâ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("=" * 80)

if __name__ == "__main__":
    test_corporate_coefficients()
