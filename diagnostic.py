#!/usr/bin/env python3
# diagnostic.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º

import os
import sys
import psutil
import requests
from pathlib import Path

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    
    env_vars = [
        'SQLALCHEMY_DATABASE_URI',
        'DATABASE_URL', 
        'FLASK_PORT',
        'FLASK_ENV'
    ]
    
    for var in env_vars:
        value = os.getenv(var)
        if value:
            # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏ –≤ URL
            if 'postgresql://' in str(value):
                masked = value.split('@')[1] if '@' in value else value
                print(f"  ‚úÖ {var}: postgresql://***@{masked}")
            else:
                print(f"  ‚úÖ {var}: {value}")
        else:
            print(f"  ‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")

def check_ports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤:")
    
    ports_to_check = [3000, 4000, 5000, 5432, 1112]
    
    for port in ports_to_check:
        connections = [conn for conn in psutil.net_connections() 
                      if conn.laddr.port == port and conn.status == 'LISTEN']
        
        if connections:
            for conn in connections:
                try:
                    process = psutil.Process(conn.pid)
                    print(f"  ‚úÖ –ü–æ—Ä—Ç {port}: {process.name()} (PID: {conn.pid})")
                except:
                    print(f"  ‚úÖ –ü–æ—Ä—Ç {port}: –ó–∞–Ω—è—Ç (PID: {conn.pid})")
        else:
            print(f"  ‚ùå –ü–æ—Ä—Ç {port}: –°–≤–æ–±–æ–¥–µ–Ω")

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    
    files_to_check = [
        'server.py',
        'requirements.txt',
        '.env',
        'assessment_routes.py',
        'db_saver.py',
        'assessment_schema.sql',
        'assessment_questions.sql',
        'src/config.js',
        'src/setupProxy.js'
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"  ‚úÖ {file_path}: {size} –±–∞–π—Ç")
        else:
            print(f"  ‚ùå {file_path}: –ù–ï –ù–ê–ô–î–ï–ù")

def test_server_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:")
    
    urls_to_test = [
        'http://localhost:4000/api/health',
        'http://localhost:4000/api/questionnaire/1',
        'http://localhost:5000/api/health',  # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤—Å–µ –µ—â–µ –Ω–∞ 5000
        'http://localhost:5000/api/questionnaire/1'
    ]
    
    for url in urls_to_test:
        try:
            response = requests.get(url, timeout=5)
            print(f"  ‚úÖ {url}: {response.status_code}")
            if response.status_code == 200:
                print(f"     –û—Ç–≤–µ—Ç: {response.text[:100]}...")
        except requests.exceptions.ConnectionError:
            print(f"  ‚ùå {url}: CONNECTION REFUSED")
        except requests.exceptions.Timeout:
            print(f"  ‚è∞ {url}: TIMEOUT")
        except Exception as e:
            print(f"  ‚ùå {url}: {e}")

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:")
    
    try:
        import psycopg2
        
        db_uri = os.getenv('SQLALCHEMY_DATABASE_URI') or os.getenv('DATABASE_URL')
        if not db_uri:
            print("  ‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î")
            return
            
        # –ü–∞—Ä—Å–∏–º URI
        if db_uri.startswith('postgresql://'):
            print(f"  üìç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {db_uri.split('@')[1] if '@' in db_uri else '–ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î'}")
            
            try:
                conn = psycopg2.connect(db_uri)
                cursor = conn.cursor()
                cursor.execute('SELECT version();')
                version = cursor.fetchone()[0]
                print(f"  ‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω: {version[:50]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã assessment
                cursor.execute("""
                    SELECT table_name FROM information_schema.tables 
                    WHERE table_schema = 'public' AND table_name LIKE 'assessment%';
                """)
                tables = cursor.fetchall()
                if tables:
                    print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü—ã assessment –Ω–∞–π–¥–µ–Ω—ã: {[t[0] for t in tables]}")
                else:
                    print("  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã assessment –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                cursor.close()
                conn.close()
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        
    except ImportError:
        print("  ‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Telegram MiniApp")
    print("=" * 50)
    
    check_environment()
    check_files()
    check_ports()
    check_database_connection()
    test_server_connection()
    
    print("\n" + "=" * 50)
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ server.py –∑–∞–ø—É—â–µ–Ω: python server.py")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ë–î")
    print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("4. –û–±–Ω–æ–≤–∏—Ç–µ setupProxy.js –Ω–∞ –ø–æ—Ä—Ç 4000")

if __name__ == "__main__":
    main()