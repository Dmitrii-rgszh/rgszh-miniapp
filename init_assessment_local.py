#!/usr/bin/env python3
# init_assessment_local.py - –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Assessment –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

import logging
import psycopg2

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Assessment –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            user="postgres",
            password="secret",
            database="miniapp"
        )
        
        conn.autocommit = True
        cur = conn.cursor()
        
        logger.info("üîÑ Initializing assessment database...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
        logger.info("üìã Creating questionnaire tables...")
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS questionnaires (
                id SERIAL PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                questions_count INTEGER DEFAULT 0,
                max_time_minutes INTEGER,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS questions (
                id SERIAL PRIMARY KEY,
                questionnaire_id INTEGER REFERENCES questionnaires(id) ON DELETE CASCADE,
                question_order INTEGER NOT NULL,
                question_text TEXT NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS question_options (
                id SERIAL PRIMARY KEY,
                question_id INTEGER REFERENCES questions(id) ON DELETE CASCADE,
                option_order INTEGER NOT NULL,
                option_text TEXT NOT NULL,
                option_type VARCHAR(50) DEFAULT 'executor',
                score_value INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        logger.info("‚úÖ Questionnaire tables created/verified")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        cur.execute("SELECT COUNT(*) FROM questionnaires WHERE id = 1")
        questionnaire_exists = cur.fetchone()[0] > 0
        
        if not questionnaire_exists:
            logger.info("üìù Populating assessment questionnaire...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫
            cur.execute("""
                INSERT INTO questionnaires (id, title, description, questions_count, max_time_minutes) 
                VALUES (1, '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', 
                       '–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–∏—Ç—É–∞—Ü–∏–∏.',
                       25, 30)
                ON CONFLICT (id) DO NOTHING
            """)
            
            # –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
            try:
                with open('assessment_questions.sql', 'r', encoding='utf-8') as f:
                    questions_sql = f.read()
                
                logger.info("üìù Adding assessment questions...")
                cur.execute(questions_sql)
                logger.info("‚úÖ Assessment questions added")
                
            except FileNotFoundError:
                logger.error("‚ùå assessment_questions.sql not found!")
                return False
                
        else:
            logger.info("‚ÑπÔ∏è Questionnaire data already exists")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cur.execute("SELECT COUNT(*) FROM questionnaires WHERE id = 1")
        questionnaire_count = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM questions WHERE questionnaire_id = 1")
        questions_count = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM question_options WHERE question_id IN (SELECT id FROM questions WHERE questionnaire_id = 1)")
        options_count = cur.fetchone()[0]
        
        if questionnaire_count > 0:
            logger.info("üéâ Assessment database initialized successfully!")
            logger.info(f"   üìã Questionnaires: {questionnaire_count}")
            logger.info(f"   ‚ùì Questions: {questions_count}")
            logger.info(f"   üìù Options: {options_count}")
            
            if questions_count > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                cur.execute("""
                    SELECT q.question_text, COUNT(qo.id) as options_count
                    FROM questions q
                    LEFT JOIN question_options qo ON q.id = qo.question_id
                    WHERE q.questionnaire_id = 1 AND q.question_order = 1
                    GROUP BY q.id, q.question_text
                """)
                
                first_question = cur.fetchone()
                if first_question:
                    logger.info(f"   üìã First question: {first_question[0][:50]}...")
                    logger.info(f"   üìù Options for first question: {first_question[1]}")
                    
            return True
        else:
            logger.error("‚ùå Assessment database initialization incomplete")
            return False
        
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå Error initializing assessment database: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        exit(1)
