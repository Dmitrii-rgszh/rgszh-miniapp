# tariffs.py
# –ú–æ–¥—É–ª—å —Ç–∞—Ä–∏—Ñ–æ–≤ –ù–°, –ö–ó –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç

"""
–¢–∞—Ä–∏—Ñ—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–π –ø–æ –Ω–µ—Å—á–∞—Å—Ç–Ω—ã–º —Å–ª—É—á–∞—è–º (–ù–°) –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º (–ö–ó)
–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∑—è—Ç—ã –∏–∑ Excel —Ñ–∞–π–ª–∞ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.xlsm"
"""

# ===== –¢–ê–†–ò–§–´ –ù–ï–°–ß–ê–°–¢–ù–´–• –°–õ–£–ß–ê–ï–í (–ù–°) =====
# –¢–∞—Ä–∏—Ñ—ã —É–∫–∞–∑–∞–Ω—ã –Ω–∞ 1000 —Ä—É–±–ª–µ–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã
ACCIDENT_TARIFFS = {
    'death_accident': 0.0011213,      # –ù–° —Å–º–µ—Ä—Ç—å: 1.1213 / 1000
    'death_transport': 0.0002807,     # –ù–° —Å–º–µ—Ä—Ç—å –æ—Ç –î–¢–ü: 0.2807 / 1000  
    'trauma_accident': 0.0018341,     # –ù–° —Ç—Ä–∞–≤–º–∞: 1.8341 / 1000
}

# ===== –¢–ê–†–ò–§–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ó–ê–ë–û–õ–ï–í–ê–ù–ò–ô (–ö–ó) =====
# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö (–Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã)
CRITICAL_ILLNESS_TARIFFS = {
    'russia': 0.0,        # –õ–µ—á–µ–Ω–∏–µ –≤ –†–§ - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–∏–º–µ—Ä–µ
    'abroad': 54094.74    # –õ–µ—á–µ–Ω–∏–µ –∑–∞ —Ä—É–±–µ–∂–æ–º - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
}

# ===== –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ =====
SPORT_COEFFICIENT = 1.1              # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∑–∞–Ω—è—Ç–∏–π —Å–ø–æ—Ä—Ç–æ–º (+10%)
DISABILITY_RATE = 0.20               # –ü—Ä–µ–º–∏—è –ø–æ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ (20% –æ—Ç –∂–∏–∑–Ω–∏)

# ===== –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –†–ê–°–ß–ï–¢–ê =====
CALCULATION_PARAMETERS = {
    'guaranteed_rate': 0.08,          # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 8%
    'commission_rate': 0.30,          # –ö–æ–º–∏—Å—Å–∏—è: 30%
    'load_rate': 0.05,                # –ù–∞–≥—Ä—É–∑–∫–∞: 5%
}

# ===== –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø =====
LIMITS = {
    'min_insurance_sum': 1000000,     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞
    'max_insurance_sum': 100000000,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞
    'min_insurance_term': 1,          # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
    'max_insurance_term': 30,         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
    'min_age': 18,                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    'max_age': 70                     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
}

def get_accident_tariff(accident_type: str) -> float:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ù–° –ø–æ —Ç–∏–ø—É
    
    Args:
        accident_type: –¢–∏–ø –ù–° ('death_accident', 'death_transport', 'trauma_accident')
        
    Returns:
        float: –¢–∞—Ä–∏—Ñ –ù–° –Ω–∞ 1000 —Ä—É–±–ª–µ–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã
    """
    return ACCIDENT_TARIFFS.get(accident_type, 0.0)

def get_critical_illness_tariff(treatment_region: str) -> float:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ö–ó –ø–æ —Ä–µ–≥–∏–æ–Ω—É –ª–µ—á–µ–Ω–∏—è
    
    Args:
        treatment_region: –†–µ–≥–∏–æ–Ω –ª–µ—á–µ–Ω–∏—è ('russia', 'abroad')
        
    Returns:
        float: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ —Ç–∞—Ä–∏—Ñ–∞ –ö–ó –≤ —Ä—É–±–ª—è—Ö
    """
    return CRITICAL_ILLNESS_TARIFFS.get(treatment_region, 0.0)

def calculate_accident_premium(insurance_sum: int, frequency_coeff: float, sport_included: bool = False) -> dict:
    """
    –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –ù–°
    
    Args:
        insurance_sum: –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞
        frequency_coeff: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
        sport_included: –í–∫–ª—é—á–µ–Ω –ª–∏ —Å–ø–æ—Ä—Ç-–ø–∞–∫–µ—Ç
        
    Returns:
        dict: –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –ù–°
    """
    # –†–∞—Å—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∏–¥—É –ù–°
    accident_death = frequency_coeff * ACCIDENT_TARIFFS['death_accident'] * insurance_sum
    accident_transport = frequency_coeff * ACCIDENT_TARIFFS['death_transport'] * insurance_sum
    accident_trauma = frequency_coeff * ACCIDENT_TARIFFS['trauma_accident'] * insurance_sum
    
    total_accident_premium = accident_death + accident_transport + accident_trauma
    
    # –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    sport_coeff = SPORT_COEFFICIENT if sport_included else 1.0
    if sport_included:
        total_accident_premium *= sport_coeff
    
    return {
        'accident_death': round(accident_death, 2),
        'accident_transport': round(accident_transport, 2),
        'accident_trauma': round(accident_trauma, 2),
        'subtotal': round(accident_death + accident_transport + accident_trauma, 2),
        'sport_coefficient': sport_coeff,
        'sport_markup': round((sport_coeff - 1) * 100, 1),
        'total_accident_premium': round(total_accident_premium, 2),
        'frequency_coefficient': frequency_coeff
    }

def calculate_critical_illness_premium(treatment_region: str, frequency_coeff: float) -> dict:
    """
    –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –ö–ó
    
    Args:
        treatment_region: –†–µ–≥–∏–æ–Ω –ª–µ—á–µ–Ω–∏—è
        frequency_coeff: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
        
    Returns:
        dict: –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –ö–ó
    """
    base_tariff = get_critical_illness_tariff(treatment_region)
    critical_premium = base_tariff * frequency_coeff
    
    return {
        'base_tariff': base_tariff,
        'treatment_region': treatment_region,
        'frequency_coefficient': frequency_coeff,
        'critical_premium': round(critical_premium, 2)
    }

def validate_insurance_sum(insurance_sum: int) -> tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã
    
    Args:
        insurance_sum: –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        tuple: (is_valid, error_message)
    """
    if insurance_sum < LIMITS['min_insurance_sum']:
        return False, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {LIMITS['min_insurance_sum']:,} —Ä—É–±"
    elif insurance_sum > LIMITS['max_insurance_sum']:
        return False, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {LIMITS['max_insurance_sum']:,} —Ä—É–±"
    return True, ""

def validate_insurance_term(term: int) -> tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
    
    Args:
        term: –°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        tuple: (is_valid, error_message)
    """
    if term < LIMITS['min_insurance_term']:
        return False, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è: {LIMITS['min_insurance_term']} –ª–µ—Ç"
    elif term > LIMITS['max_insurance_term']:
        return False, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è: {LIMITS['max_insurance_term']} –ª–µ—Ç"
    return True, ""

def validate_age(age: int) -> tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    
    Args:
        age: –í–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        tuple: (is_valid, error_message)
    """
    if age < LIMITS['min_age']:
        return False, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {LIMITS['min_age']} –ª–µ—Ç"
    elif age > LIMITS['max_age']:
        return False, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {LIMITS['max_age']} –ª–µ—Ç"
    return True, ""

def get_all_tariffs_info() -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
    
    Returns:
        dict: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö
    """
    return {
        'accident_tariffs': ACCIDENT_TARIFFS.copy(),
        'critical_illness_tariffs': CRITICAL_ILLNESS_TARIFFS.copy(),
        'coefficients': {
            'sport': SPORT_COEFFICIENT,
            'disability_rate': DISABILITY_RATE
        },
        'calculation_parameters': CALCULATION_PARAMETERS.copy(),
        'limits': LIMITS.copy(),
        'source': 'Excel —Ñ–∞–π–ª "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.xlsm"'
    }

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–±–∞–≥–∞
if __name__ == "__main__":
    print("üîç === –¢–ï–°–¢ –ú–û–î–£–õ–Ø –¢–ê–†–ò–§–û–í ===")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –ù–°
    print("\nüí• –¢–∞—Ä–∏—Ñ—ã –ù–° (–Ω–∞ 1000 —Ä—É–± —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã):")
    for accident_type, tariff in ACCIDENT_TARIFFS.items():
        print(f"   {accident_type}: {tariff:.7f}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –ö–ó
    print("\nüè• –¢–∞—Ä–∏—Ñ—ã –ö–ó (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã):")
    for region, tariff in CRITICAL_ILLNESS_TARIFFS.items():
        print(f"   {region}: {tariff:,.2f} —Ä—É–±")
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ù–°
    print("\nüßÆ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ù–° (—Å—É–º–º–∞: 2,000,000 —Ä—É–±, —á–∞—Å—Ç–æ—Ç–∞: 1.04):")
    accident_result = calculate_accident_premium(2000000, 1.04, sport_included=True)
    for key, value in accident_result.items():
        if isinstance(value, float):
            print(f"   {key}: {value:,.2f}")
        else:
            print(f"   {key}: {value}")
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ö–ó
    print("\nüßÆ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ö–ó (—Ä–µ–≥–∏–æ–Ω: abroad, —á–∞—Å—Ç–æ—Ç–∞: 1.04):")
    critical_result = calculate_critical_illness_premium('abroad', 1.04)
    for key, value in critical_result.items():
        if isinstance(value, float) and key != 'frequency_coefficient':
            print(f"   {key}: {value:,.2f}")
        else:
            print(f"   {key}: {value}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    print("\nüìã –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
    for limit_name, limit_value in LIMITS.items():
        if 'sum' in limit_name:
            print(f"   {limit_name}: {limit_value:,}")
        else:
            print(f"   {limit_name}: {limit_value}")