# email_sender.py - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó EXCEL –í–õ–û–ñ–ï–ù–ò–ô

import logging
import requests
import json
from datetime import datetime
from typing import Dict, Any, Optional
from sqlalchemy import text

logger = logging.getLogger("email_sender")

def get_candidate_from_db(candidate_id: int) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ assessment_candidates
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        from db_saver import db
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –ë–î
        query = text("""
            SELECT 
                id, surname, first_name, patronymic, full_name,
                total_score, percentage,
                innovator_score, optimizer_score, executor_score,
                transcription, completion_time_minutes, created_at
            FROM assessment_candidates 
            WHERE id = :candidate_id
            LIMIT 1
        """)
        
        result = db.session.execute(query, {"candidate_id": candidate_id})
        row = result.fetchone()
        
        if not row:
            logger.error(f"‚ùå Candidate with ID {candidate_id} not found in database")
            return None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        candidate_data = {
            "id": row.id,
            "surname": row.surname,
            "first_name": row.first_name,
            "patronymic": row.patronymic or "",
            "full_name": row.full_name,
            "total_score": row.total_score,
            "percentage": float(row.percentage) if row.percentage else 0.0,
            "innovator_score": row.innovator_score,
            "optimizer_score": row.optimizer_score,
            "executor_score": row.executor_score,
            "transcription": row.transcription or "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞",
            "completion_time_minutes": row.completion_time_minutes or 0,
            "created_at": row.created_at
        }
        
        logger.info(f"‚úÖ Retrieved candidate data for {candidate_data['full_name']}")
        return candidate_data
        
    except Exception as e:
        logger.error(f"‚ùå Error getting candidate from database: {e}")
        return None

def process_new_candidate_notification(candidate_data: Dict[str, Any]) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π)
    
    Args:
        candidate_data: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'id' –∏–ª–∏ –≤—Å–µ –ø–æ–ª—è)
    
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ ID, –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        if 'id' in candidate_data and len(candidate_data) <= 3:
            candidate_id = candidate_data['id']
            logger.info(f"üìã Getting full candidate data from DB for ID: {candidate_id}")
            full_candidate_data = get_candidate_from_db(candidate_id)
            if not full_candidate_data:
                logger.error(f"‚ùå Could not get candidate data from DB for ID: {candidate_id}")
                return False
            candidate_data = full_candidate_data
        
        logger.info(f"üìß Preparing notification for candidate: {candidate_data.get('full_name', 'Unknown')}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
        subject = f"–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—à–µ–ª –æ–ø—Ä–æ—Å - {candidate_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_at = candidate_data.get('created_at')
        if isinstance(created_at, str):
            date_str = created_at
        elif hasattr(created_at, 'strftime'):
            date_str = created_at.strftime('%d.%m.%Y %H:%M')
        else:
            date_str = str(created_at) if created_at else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        body_lines = [
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!",
            "",
            "–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:",
            "",
            "=== –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===",
            f"ID –≤ –ë–î: {candidate_data.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–§–ò–û: {candidate_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            "",
            "=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–¶–ï–ù–ö–ò ===",
            f"–û–±—â–∏–π –±–∞–ª–ª: {candidate_data.get('total_score', 0)} –∏–∑ 50",
            f"–ü—Ä–æ—Ü–µ–Ω—Ç: {candidate_data.get('percentage', 0)}%",
            "",
            "=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===",
            f"–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {candidate_data.get('completion_time_minutes', 0)} –º–∏–Ω—É—Ç",
            f"–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {date_str}",
            "",
            "=== –†–ê–°–®–ò–§–†–û–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===",
            f"{candidate_data.get('transcription', '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–∞')}",
            "",
            "---",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ MiniApp Telegram",
            "",
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å",
            "—Ñ—É–Ω–∫—Ü–∏–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã."
        ]
        
        body = "\r\n".join(body_lines)
        
        # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–†–û–°–¢–û–ï EMAIL –ë–ï–ó –í–õ–û–ñ–ï–ù–ò–ô
        try:
            from server import send_email
            success = send_email(subject, body)
            logger.info(f"üìß Email notification: {'‚úÖ SUCCESS' if success else '‚ùå FAILED'}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –û–î–ò–ù –†–ê–ó
            log_notification_attempt(candidate_data, success)
            
            return success
            
        except ImportError as e:
            logger.error(f"‚ùå Cannot import send_email function: {e}")
            # Fallback - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            fallback_notification_log(candidate_data)
            return True
        
    except Exception as e:
        logger.error(f"‚ùå Error in process_new_candidate_notification: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        fallback_notification_log(candidate_data)
        return False

def format_candidate_for_email(candidate_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    
    Args:
        candidate_data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
    Returns:
        Dict: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å full_name, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if candidate_data.get('full_name'):
            full_name = candidate_data['full_name']
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            full_name = f"{candidate_data.get('surname', '')} {candidate_data.get('first_name', '')} {candidate_data.get('patronymic', '')}".strip()
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        formatted_data = {
            "id": candidate_data.get("id"),
            "full_name": full_name,
            "surname": candidate_data.get("surname", ""),
            "first_name": candidate_data.get("first_name", ""),
            "patronymic": candidate_data.get("patronymic", ""),
            "total_score": candidate_data.get("total_score", 0),
            "percentage": candidate_data.get("percentage", 0),
            "innovator_score": candidate_data.get("innovator_score", 0),
            "optimizer_score": candidate_data.get("optimizer_score", 0),
            "executor_score": candidate_data.get("executor_score", 0),
            "transcription": candidate_data.get("transcription", ""),
            "completion_time_minutes": candidate_data.get("completion_time_minutes", 0),
            "created_at": candidate_data.get("created_at", datetime.now())
        }
        
        return formatted_data
        
    except Exception as e:
        logger.error(f"‚ùå Error formatting candidate data: {e}")
        return candidate_data

def log_notification_attempt(candidate_data: Dict[str, Any], success: bool) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –û–î–ò–ù –†–ê–ó
    
    Args:
        candidate_data: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ candidate_data —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(candidate_data, dict):
            candidate_name = candidate_data.get("full_name", "Unknown")
        else:
            candidate_name = str(candidate_data)
        logger.info(f"üìä Notification attempt: {status} for candidate {candidate_name}")
        
    except Exception as e:
        logger.error(f"‚ùå Error logging notification attempt: {e}")

def fallback_notification_log(candidate_data: Dict[str, Any]) -> None:
    """
    –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
    –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    
    Args:
        candidate_data: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    """
    try:
        logger.info("üìù FALLBACK: Logging candidate data instead of email")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ candidate_data —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(candidate_data, dict):
            logger.info(f"üìã Candidate: {candidate_data.get('full_name', 'Unknown')}")
            logger.info(f"üéØ Score: {candidate_data.get('total_score', 0)} ({candidate_data.get('percentage', 0)}%)")
            logger.info(f"‚è±Ô∏è Time: {candidate_data.get('completion_time_minutes', 0)} minutes")
        else:
            logger.info(f"üìã Candidate data: {str(candidate_data)}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in fallback notification: {e}")

# –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ë–ï–ó –†–ï–ö–£–†–°–ò–ò
def notify_new_candidate(candidate_data: Dict[str, Any]) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
    –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç process_new_candidate_notification –±–µ–∑ —Ü–∏–∫–ª–æ–≤
    
    Args:
        candidate_data: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        formatted_data = format_candidate_for_email(candidate_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        return process_new_candidate_notification(formatted_data)
        
    except Exception as e:
        logger.error(f"‚ùå Critical error in notify_new_candidate: {e}")
        return False