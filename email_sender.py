# email_sender.py - –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)

import logging
import requests
import json
from datetime import datetime
from typing import Dict, Any, Optional

logger = logging.getLogger("email_sender")

def process_new_candidate_notification(candidate_data: Dict[str, Any]) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    
    Args:
        candidate_data: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤–∫–ª—é—á–∞—è:
            - full_name: –ø–æ–ª–Ω–æ–µ –∏–º—è
            - surname: —Ñ–∞–º–∏–ª–∏—è
            - first_name: –∏–º—è
            - patronymic: –æ—Ç—á–µ—Å—Ç–≤–æ
            - total_score: –æ–±—â–∏–π –±–∞–ª–ª
            - percentage: –ø—Ä–æ—Ü–µ–Ω—Ç
            - innovator_score: –±–∞–ª–ª –∏–Ω–Ω–æ–≤–∞—Ç–æ—Ä–∞
            - optimizer_score: –±–∞–ª–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
            - executor_score: –±–∞–ª–ª –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            - transcription: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            - completion_time_minutes: –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            - created_at: –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        logger.info(f"üìß Preparing notification for candidate: {candidate_data.get('full_name', 'Unknown')}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
        subject = f"–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—à–µ–ª assessment - {candidate_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        body_lines = [
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!",
            "",
            "–í —Å–∏—Å—Ç–µ–º–µ assessment –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç:",
            "",
            f"–§–ò–û: {candidate_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–û–±—â–∏–π –±–∞–ª–ª: {candidate_data.get('total_score', 0)}",
            f"–ü—Ä–æ—Ü–µ–Ω—Ç: {candidate_data.get('percentage', 0)}%",
            "",
            "–ë–∞–ª–ª—ã –ø–æ —Ç–∏–ø–∞–º:",
            f"‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ç–æ—Ä: {candidate_data.get('innovator_score', 0)}",
            f"‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä: {candidate_data.get('optimizer_score', 0)}",
            f"‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {candidate_data.get('executor_score', 0)}",
            "",
            f"–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {candidate_data.get('completion_time_minutes', 0)} –º–∏–Ω—É—Ç",
            f"–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {candidate_data.get('created_at', datetime.now()).strftime('%d.%m.%Y %H:%M')}",
            "",
            "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:",
            f"{candidate_data.get('transcription', '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–∞')[:200]}...",
            "",
            "---",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã Assessment"
        ]
        
        body = "\r\n".join(body_lines)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        email_payload = {
            "subject": subject,
            "body": body
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
        success = send_assessment_notification(email_payload)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log_notification_attempt(candidate_data, success)
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not success:
            fallback_notification_log(candidate_data)
            return True  # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–ª–∏
            
        return success
        
    except Exception as e:
        logger.error(f"‚ùå Error in process_new_candidate_notification: {e}")
        fallback_notification_log(candidate_data)
        return False

def send_assessment_notification(payload: Dict[str, str]) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    
    Args:
        payload: –°–ª–æ–≤–∞—Ä—å —Å subject –∏ body
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π assessment
        api_url = "http://localhost:4000/api/proxy/assessment/send_manager"
        
        logger.info(f"üìÆ Sending assessment notification to: {api_url}")
        
        response = requests.post(
            api_url,
            headers={"Content-Type": "application/json"},
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            logger.info("‚úÖ Assessment notification sent successfully")
            return True
        else:
            logger.error(f"‚ùå Failed to send notification. Status: {response.status_code}, Response: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        logger.error("‚ùå Timeout while sending assessment notification")
        return False
    except requests.exceptions.ConnectionError:
        logger.error("‚ùå Connection error while sending assessment notification")
        return False
    except Exception as e:
        logger.error(f"‚ùå Unexpected error sending assessment notification: {e}")
        return False

def format_candidate_for_email(candidate_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    
    Args:
        candidate_data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
    Returns:
        Dict: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        formatted_data = {
            "full_name": candidate_data.get("full_name", 
                f"{candidate_data.get('surname', '')} {candidate_data.get('first_name', '')} {candidate_data.get('patronymic', '')}".strip()),
            "surname": candidate_data.get("surname", ""),
            "first_name": candidate_data.get("first_name", ""),
            "patronymic": candidate_data.get("patronymic", ""),
            "total_score": candidate_data.get("total_score", 0),
            "percentage": candidate_data.get("percentage", 0),
            "innovator_score": candidate_data.get("innovator_score", 0),
            "optimizer_score": candidate_data.get("optimizer_score", 0),
            "executor_score": candidate_data.get("executor_score", 0),
            "transcription": candidate_data.get("transcription", ""),
            "completion_time_minutes": candidate_data.get("completion_time_minutes", 0),
            "created_at": candidate_data.get("created_at", datetime.now())
        }
        
        return formatted_data
        
    except Exception as e:
        logger.error(f"‚ùå Error formatting candidate data: {e}")
        return candidate_data

def log_notification_attempt(candidate_data: Dict[str, Any], success: bool) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    Args:
        candidate_data: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ candidate_data —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(candidate_data, dict):
            candidate_name = candidate_data.get("full_name", "Unknown")
        else:
            candidate_name = str(candidate_data)
        logger.info(f"üìä Notification attempt: {status} for candidate {candidate_name}")
        
    except Exception as e:
        logger.error(f"‚ùå Error logging notification attempt: {e}")

def fallback_notification_log(candidate_data: Dict[str, Any]) -> None:
    """
    –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
    –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    
    Args:
        candidate_data: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    """
    try:
        logger.info("üìù FALLBACK: Logging candidate data instead of email")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ candidate_data —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(candidate_data, dict):
            logger.info(f"üìã Candidate: {candidate_data.get('full_name', 'Unknown')}")
            logger.info(f"üéØ Score: {candidate_data.get('total_score', 0)} ({candidate_data.get('percentage', 0)}%)")
            logger.info(f"‚è±Ô∏è Time: {candidate_data.get('completion_time_minutes', 0)} minutes")
        else:
            logger.info(f"üìã Candidate data: {str(candidate_data)}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in fallback notification: {e}")

# –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ë–ï–ó –†–ï–ö–£–†–°–ò–ò
def notify_new_candidate(candidate_data: Dict[str, Any]) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
    –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç process_new_candidate_notification –±–µ–∑ —Ü–∏–∫–ª–æ–≤
    
    Args:
        candidate_data: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        formatted_data = format_candidate_for_email(candidate_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        return process_new_candidate_notification(formatted_data)
        
    except Exception as e:
        logger.error(f"‚ùå Critical error in notify_new_candidate: {e}")
        return False