#!/usr/bin/env python3
# server_debug.py
# –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è

import os
import sys
import logging

print("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–í–ï–†–ù–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
print(f"üì¶ Python executable: {sys.executable}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python path
print(f"\nüìö Python path:")
for i, path in enumerate(sys.path):
    print(f"  {i}: {path}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
print(f"\nüåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
env_vars = ['PYTHONPATH', 'PATH', 'FLASK_PORT', 'FLASK_ENV']
for var in env_vars:
    value = os.environ.get(var, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
    print(f"  {var}: {value}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
print(f"\nüìÇ –§–ê–ô–õ–´ –í –¢–ï–ö–£–©–ï–ô –î–ò–†–ï–ö–¢–û–†–ò–ò:")
files_to_check = [
    'server.py',
    'justincase_calculator.py', 
    'justincase_routes.py',
    'care_future_models.py',
    'care_future_routes.py'
]

for file in files_to_check:
    if os.path.exists(file):
        size = os.path.getsize(file)
        print(f"  ‚úÖ {file} ({size} bytes)")
    else:
        print(f"  ‚ùå {file} –û–¢–°–£–¢–°–¢–í–£–ï–¢")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
print(f"\nüîÑ –¢–ï–°–¢–ò–†–£–ï–ú –ò–ú–ü–û–†–¢–´ –ü–û –ü–û–†–Ø–î–ö–£:")

# 1. –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
print("1. –ë–∞–∑–æ–≤—ã–µ Python –º–æ–¥—É–ª–∏:")
try:
    import logging, datetime, typing
    from flask import Flask, Blueprint
    print("  ‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")

# 2. JustInCase Calculator
print("2. justincase_calculator:")
try:
    from justincase_calculator import JustincaseCalculatorComplete
    print("  ‚úÖ JustincaseCalculatorComplete –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
    calculator = JustincaseCalculatorComplete()
    print("  ‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
    import traceback
    traceback.print_exc()

# 3. JustInCase Routes  
print("3. justincase_routes:")
try:
    from justincase_routes import register_justincase_routes, justincase_bp
    print("  ‚úÖ justincase_routes –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ routes: {e}")
    import traceback
    traceback.print_exc()

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
print("4. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:")
required_modules = ['logging', 'datetime', 'typing', 'math']
for module in required_modules:
    try:
        __import__(module)
        print(f"  ‚úÖ {module}")
    except ImportError:
        print(f"  ‚ùå {module} –û–¢–°–£–¢–°–¢–í–£–ï–¢")

# 5. –≠–º—É–ª–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–∞–∫ –≤ server.py
print("\nüöÄ –≠–ú–£–õ–ò–†–£–ï–ú –ò–ú–ü–û–†–¢ –ö–ê–ö –í SERVER.PY:")
JUSTINCASE_AVAILABLE = False
JUSTINCASE_ERROR = None

try:
    print("  üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º justincase_routes...")
    from justincase_routes import register_justincase_routes
    JUSTINCASE_AVAILABLE = True
    JUSTINCASE_ERROR = None
    print("  ‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    JUSTINCASE_AVAILABLE = False
    JUSTINCASE_ERROR = str(e)
    print(f"  ‚ùå ImportError: {e}")
except Exception as e:
    JUSTINCASE_AVAILABLE = False
    JUSTINCASE_ERROR = str(e)
    print(f"  ‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()

print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
print(f"  JUSTINCASE_AVAILABLE = {JUSTINCASE_AVAILABLE}")
print(f"  JUSTINCASE_ERROR = {JUSTINCASE_ERROR}")

# 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
print(f"\nüß™ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø FLASK –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:")
try:
    from flask import Flask
    test_app = Flask(__name__)
    print("  ‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    
    if JUSTINCASE_AVAILABLE:
        with test_app.app_context():
            result = register_justincase_routes(test_app)
            print(f"  ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
            route_count = 0
            proxy_route_found = False
            
            for rule in test_app.url_map.iter_rules():
                if '/api/' in rule.rule:
                    route_count += 1
                    if '/api/proxy/calculator/save' in rule.rule:
                        proxy_route_found = True
            
            print(f"  üìç –ù–∞–π–¥–µ–Ω–æ API –º–∞—Ä—à—Ä—É—Ç–æ–≤: {route_count}")
            print(f"  {'‚úÖ' if proxy_route_found else '‚ùå'} /api/proxy/calculator/save –Ω–∞–π–¥–µ–Ω: {proxy_route_found}")
    else:
        print("  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ - JUSTINCASE_AVAILABLE = False")
        
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    import traceback
    traceback.print_exc()

print(f"\nüéØ === –î–ò–ê–ì–ù–û–ó ===")
if JUSTINCASE_AVAILABLE:
    print("‚úÖ –ú–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
    print("  - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª–µ–π Python")
    print("  - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    print("  - –ü—Ä–æ–±–ª–µ–º–∞—Ö —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –º–∞—Ä—à—Ä—É—Ç–æ–≤")
else:
    print("‚ùå –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–±–ª–µ–º–∞ –≤:")
    print("  - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö")
    print("  - –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö")
    print("  - –ü—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø—É—Ç—è–º–∏ –∏–º–ø–æ—Ä—Ç–∞")
    print(f"  - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {JUSTINCASE_ERROR}")

print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
print("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python server_debug.py")
print("3. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–æ–π")
print("4. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è")