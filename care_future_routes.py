# care_future_routes.py - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï —Ä–æ—É—Ç—ã —Å –ª–æ–≥–∏–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

from flask import Blueprint, request, jsonify
from datetime import datetime, date
import logging
from typing import Dict, Any
import uuid

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
try:
    from care_future_employees_models import (
        NSJRiskRatesByTerm, 
        NSJCashbackRates, 
        EmployeesCalculatorEngine,
        NSJCalculationResult
    )
    # –¢–∞–∫–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤—ã–∫—É–ø–Ω—ã—Ö —Å—É–º–º
    from care_future_models import NSJRedemptionRates
    EMPLOYEES_LOGIC_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError as e:
    EMPLOYEES_LOGIC_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    class MockModel:
        @classmethod
        def get_rates_for_term(cls, *args): return None
        @classmethod
        def get_cashback_for_term(cls, *args): return 0.63
        @classmethod
        def get_available_terms(cls, *args): return list(range(5, 21))
    
    NSJRiskRatesByTerm = NSJCashbackRates = MockModel
    EmployeesCalculatorEngine = object
    NSJCalculationResult = object

# –°–æ–∑–¥–∞–µ–º Blueprint (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
care_future_bp = Blueprint('care_future', __name__, url_prefix='/api/care-future')

# =============================================================================
# –û–°–ù–û–í–ù–´–ï ENDPOINTS –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï)
# =============================================================================

@care_future_bp.route('/calculate', methods=['POST', 'OPTIONS'])
def calculate():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω —Å –ª–æ–≥–∏–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)"""
    logger.info("üßÆ Care Future Calculator: Starting calculation (employees logic)")
    
    if request.method == "OPTIONS":
        return '', 200
    
    if not EMPLOYEES_LOGIC_AVAILABLE:
        return jsonify({
            'success': False,
            'error': '–õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        }), 503
    
    try:
        data = request.get_json()
        logger.info(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['birthDate', 'gender', 'contractTerm', 'calculationType', 'inputAmount']
        for field in required_fields:
            if field not in data:
                return jsonify({
                    'success': False,
                    'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}'
                }), 400
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        try:
            birth_date = datetime.strptime(data['birthDate'], '%Y-%m-%d').date()
        except ValueError:
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD'
            }), 400
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        calculator = EmployeesCalculatorEngine()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        validation_errors = calculator.validate_input(
            birth_date=birth_date,
            gender=data['gender'],
            contract_term=int(data['contractTerm']),
            calculation_type=data['calculationType'],
            input_amount=int(data['inputAmount'])
        )
        
        if validation_errors:
            return jsonify({
                'success': False,
                'errors': validation_errors
            }), 400
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞
        income_level = data.get('incomeLevel', 'low')  # 'low' –∏–ª–∏ 'high'
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
        result = calculator.calculate(
            birth_date=birth_date,
            gender=data['gender'],
            contract_term=int(data['contractTerm']),
            calculation_type=data['calculationType'],
            input_amount=int(data['inputAmount']),
            email=data.get('email'),
            income_level=income_level
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å–æ —Å—Ç–∞—Ä—ã–º API
        response_data = {
            'success': True,
            'calculationId': result.calculation_uuid,
            'programType': 'employees',
            'excelVersion': result.excel_version,
            
            'inputParameters': {
                'birthDate': result.birth_date.isoformat(),
                'gender': result.gender,
                'contractTerm': result.contract_term,
                'calculationType': result.calculation_type,
                'inputAmount': result.input_amount,
                'email': result.email,
                'incomeLevel': income_level,
                'ageAtStart': result.age_at_start,
                'ageAtEnd': result.age_at_end
            },
            
            'results': {
                'premiumAmount': result.premium_amount,
                'insuranceSum': result.insurance_sum,
                'accumulatedCapital': result.accumulated_capital,
                'formedCapital': result.formed_capital,
                'programIncome': result.program_income,
                'taxDeduction': result.tax_deduction,
                'cashbackCoefficient': result.cashback_coefficient,
                'insuranceSumSurvival': result.insurance_sum_survival,
                'insuranceSumDeath': result.insurance_sum_death
            },
            
            'redemptionValues': result.redemption_values,
            'calculatedAt': datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result.calculation_uuid}")
        return jsonify(response_data)
        
    except ValueError as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 400
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@care_future_bp.route('/config', methods=['GET'])
def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)"""
    try:
        if not EMPLOYEES_LOGIC_AVAILABLE:
            # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            config_data = {
                'success': True,
                'programType': 'employees',
                'programName': '–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
                'available': False,
                'constraints': {
                    'minAge': 18,
                    'maxAge': 63,
                    'availableTerms': list(range(5, 21)),
                    'minPremium': 100000,
                    'maxPremium': 50000000,
                    'minInsuranceSum': 500000,
                    'maxInsuranceSum': 100000000
                },
                'error': '–õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            }
            return jsonify(config_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–æ–∫–∏ –∏–∑ –ë–î
        available_terms = NSJRiskRatesByTerm.get_available_terms('employees')
        
        config_data = {
            'success': True,
            'programType': 'employees',
            'programName': '–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
            'excelVersion': 'v.1.15',
            'available': True,
            
            'constraints': {
                'minAge': 18,
                'maxAge': 63,
                'availableTerms': available_terms or list(range(5, 21)),
                'minPremium': 100000,
                'maxPremium': 50000000,
                'minInsuranceSum': 500000,
                'maxInsuranceSum': 100000000
            },
            
            'features': {
                'supportsTaxCalculation': True,
                'supportsRedemptionCalculation': True,
                'supportsIncomeLevel': True,
                'hasCashbackCoefficients': True
            },
            
            'calculationTypes': [
                {
                    'value': 'from_premium',
                    'label': '–û—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞',
                    'description': '–†–∞—Å—á–µ—Ç –∏—Å—Ö–æ–¥—è –∏–∑ –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞'
                },
                {
                    'value': 'from_sum',
                    'label': '–û—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã',
                    'description': '–†–∞—Å—á–µ—Ç –∏—Å—Ö–æ–¥—è –∏–∑ –∂–µ–ª–∞–µ–º–æ–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã'
                }
            ],
            
            'incomelevels': [
                {
                    'value': 'low',
                    'label': '–î–æ 5 –º–ª–Ω —Ä—É–±/–≥–æ–¥',
                    'taxRate': '13%',
                    'description': '–î–æ—Ö–æ–¥ –¥–æ 5 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π –≤ –≥–æ–¥'
                },
                {
                    'value': 'high',
                    'label': '–°–≤—ã—à–µ 5 –º–ª–Ω —Ä—É–±/–≥–æ–¥',
                    'taxRate': '15%',
                    'description': '–î–æ—Ö–æ–¥ —Å–≤—ã—à–µ 5 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π –≤ –≥–æ–¥'
                }
            ]
        }
        
        return jsonify(config_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
        }), 500

@care_future_bp.route('/redemption', methods=['POST'])
def calculate_redemption():
    """–†–∞—Å—á–µ—Ç –≤—ã–∫—É–ø–Ω—ã—Ö —Å—É–º–º (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)"""
    try:
        data = request.get_json()
        
        contract_term = int(data['contractTerm'])
        premium_amount = int(data['premiumAmount'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—ã–∫—É–ø–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ä–æ–∫–∞
        redemption_rates = NSJRedemptionRates.query.filter_by(
            contract_term=contract_term,
            program_type='employees'  # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        ).all()
       
        if not redemption_rates:
            return jsonify({
                'success': False,
                'error': f'–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—ã–∫—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å—Ä–æ–∫–∞ {contract_term} –ª–µ—Ç'
            }), 404
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∫—É–ø–Ω—ã–µ —Å—É–º–º—ã
        redemption_values = []
        for year in range(1, contract_term + 1):
            coefficient_record = NSJRedemptionRates.query.filter_by(
                contract_year=year,
                contract_term=contract_term,
                program_type='employees'  # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            ).first()
            
            coefficient = float(coefficient_record.redemption_coefficient) if coefficient_record else 0.0
            paid_premiums = premium_amount * year
            redemption_amount = int(paid_premiums * coefficient)
            
            redemption_values.append({
                'year': year,
                'paidPremiums': paid_premiums,
                'coefficient': coefficient,
                'redemptionAmount': redemption_amount
            })
        
        response_data = {
            'success': True,
            'programType': 'employees',
            'contractTerm': contract_term,
            'premiumAmount': premium_amount,
            'redemptionValues': redemption_values
        }
        
        return jsonify(response_data)
        
    except ValueError:
        return jsonify({
            'success': False,
            'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'
        }), 400
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–∫—É–ø–Ω—ã—Ö —Å—É–º–º: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–∫—É–ø–Ω—ã—Ö —Å—É–º–º'
        }), 500

# =============================================================================
# –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï ENDPOINTS (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï)
# =============================================================================

@care_future_bp.route('/status', methods=['GET'])
def get_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)"""
    try:
        if not EMPLOYEES_LOGIC_AVAILABLE:
            return jsonify({
                'success': False,
                'available': False,
                'programType': 'employees',
                'error': '–õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'suggestion': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        risk_rates_count = NSJRiskRatesByTerm.query.filter_by(
            program_type='employees',
            is_active=True
        ).count()
        
        cashback_rates_count = NSJCashbackRates.query.filter_by(
            program_type='employees',
            is_active=True
        ).count()
        
        redemption_rates_count = NSJRedemptionRates.query.filter_by(
            program_type='employees',
            is_active=True
        ).count()
        
        available_terms = NSJRiskRatesByTerm.get_available_terms('employees')
        
        status_data = {
            'success': True,
            'available': True,
            'programType': 'employees',
            'programName': '–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
            'excelVersion': 'v.1.15',
            
            'database': {
                'riskRatesCount': risk_rates_count,
                'cashbackRatesCount': cashback_rates_count,
                'redemptionRatesCount': redemption_rates_count,
                'availableTerms': available_terms,
                'dataIntegrity': {
                    'riskRatesOK': risk_rates_count >= 16,  # –û–∂–∏–¥–∞–µ–º 16 —Å—Ä–æ–∫–æ–≤ (5-20)
                    'cashbackRatesOK': cashback_rates_count >= 16,
                    'redemptionRatesOK': redemption_rates_count > 100  # –ú–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –≥–æ–¥–∞–º
                }
            },
            
            'endpoints': {
                'calculate': '/api/care-future/calculate',
                'config': '/api/care-future/config',
                'redemption': '/api/care-future/redemption',
                'status': '/api/care-future/status'
            },
            
            'features': {
                'calculationEngine': 'EmployeesCalculatorEngine',
                'excelVersion': 'v.1.15',
                'supportedCalculationTypes': ['from_premium', 'from_sum'],
                'supportedIncomelevels': ['low', 'high'],
                'lastUpdate': datetime.now().isoformat()
            }
        }
        
        return jsonify(status_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({
            'success': False,
            'available': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã'
        }), 500

@care_future_bp.route('/validate-age', methods=['POST'])
def validate_age():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API)"""
    try:
        data = request.get_json()
        birth_date = datetime.strptime(data['birthDate'], '%Y-%m-%d').date()
        
        today = date.today()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        
        is_valid = 18 <= age <= 63
        
        return jsonify({
            'success': True,
            'age': age,
            'isValid': is_valid,
            'constraints': {
                'minAge': 18,
                'maxAge': 63,
                'programType': 'employees'
            }
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞'
        }), 400

@care_future_bp.route('/validate-amount', methods=['POST'])  
def validate_amount():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API)"""
    try:
        data = request.get_json()
        amount = int(data['amount'])
        calculation_type = data['calculationType']
        
        if calculation_type == 'from_premium':
            is_valid = 100000 <= amount <= 50000000
            constraints = {'min': 100000, 'max': 50000000, 'type': 'premium'}
        else:  # from_sum
            is_valid = 500000 <= amount <= 100000000
            constraints = {'min': 500000, 'max': 100000000, 'type': 'insurance_sum'}
        
        return jsonify({
            'success': True,
            'amount': amount,
            'isValid': is_valid,
            'constraints': constraints,
            'programType': 'employees'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã'
        }), 400

# =============================================================================
# LEGACY ENDPOINTS (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# =============================================================================

@care_future_bp.route('/legacy-status', methods=['GET'])
def legacy_status():
    """Legacy endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å—Ç–∞—Ä—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    return jsonify({
        'success': True,
        'message': '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
        'programType': 'employees',
        'version': 'v.1.15',
        'legacy': True,
        'recommendedEndpoint': '/api/care-future/status'
    })

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö
# =============================================================================

@care_future_bp.errorhandler(404)
def not_found(error):
    return jsonify({
        'success': False,
        'error': 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        'programType': 'employees',
        'availableEndpoints': [
            '/api/care-future/calculate',
            '/api/care-future/config', 
            '/api/care-future/status'
        ]
    }), 404

@care_future_bp.errorhandler(500)
def internal_error(error):
    return jsonify({
        'success': False,
        'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        'programType': 'employees'
    }), 500

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def register_care_future_routes(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    app.register_blueprint(care_future_bp)
    logger.info("‚úÖ Care Future routes (employees logic) registered")

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
@care_future_bp.before_request
def before_request():
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info(f"üåê {request.method} {request.path} - Care Future API Request (employees logic)")

"""
–ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ô –í–ï–†–°–ò–ò:

1. ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
2. ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Å—Ç–∞—Ä—ã–µ endpoints (/api/care-future/*)
3. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–æ—Ö–æ–¥–∞ (incomeLevel)
4. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
5. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
6. ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–∞—Ä–æ–≥–æ API

–ù–û–í–´–ï –ü–û–õ–Ø –í –û–¢–í–ï–¢–ê–•:
- formedCapital - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
- cashbackCoefficient - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—ç—à–±—ç–∫–∞
- incomeLevel - —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞

–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨:
- –í—Å–µ —Å—Ç–∞—Ä—ã–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç
- –§—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∫–æ–¥
- –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–µ–∑ breaking changes
"""