# care_future_routes_updated.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ä–∞—Å—á–µ—Ç–æ–≤

import os
import logging
from datetime import datetime, date
from typing import Dict, Any, List, Optional
from flask import Blueprint, request, jsonify, current_app
from sqlalchemy.exc import SQLAlchemyError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
from care_future_calculator_fixed import NSJCalculatorFixed

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
from care_future_models import (
    NSJDataManager, NSJCalculations,
    CalculationInput, CalculationResult,
    NSJRiskRates, NSJRedemptionRates, NSJCalculatorSettings
)
from db_saver import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("care_future_routes_updated")

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ
care_future_bp = Blueprint('care_future', __name__, url_prefix='/api/care-future')

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def safe_get_json():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
        content_type = request.content_type
        logger.info(f"üìã Content-Type: {content_type}")
        
        if not content_type or 'application/json' not in content_type:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Content-Type: {content_type}")
            return None, "Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å application/json"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not request.data:
            logger.error("‚ùå –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
            return None, "–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            data = request.get_json(force=True)
            if data is None:
                logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")
                return None, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ"
            
            logger.info(f"üì• JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {list(data.keys()) if isinstance(data, dict) else type(data)}")
            return data, None
            
        except Exception as json_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_error}")
            return None, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(json_error)}"
            
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è JSON: {e}")
        return None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

# =============================================================================
# –û–°–ù–û–í–ù–´–ï API ENDPOINTS
# =============================================================================

@care_future_bp.route('/calculate', methods=['POST', 'OPTIONS'])
def calculate_insurance():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ù–°–ñ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    """
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight
    if request.method == "OPTIONS":
        return '', 200
    
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º JSON
        data, error = safe_get_json()
        if error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è JSON: {error}")
            return jsonify({
                'success': False,
                'error': error
            }), 400
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: {data}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['birthDate', 'gender', 'contractTerm', 'calculationType', 'inputAmount']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            return jsonify({
                'success': False,
                'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {", ".join(missing_fields)}'
            }), 400
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        try:
            birth_date = datetime.strptime(data['birthDate'], '%Y-%m-%d').date()
        except (ValueError, TypeError) as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birthDate']}")
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD'
            }), 400
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            calculation_input = CalculationInput(
                birth_date=birth_date,
                gender=data['gender'],
                contract_term=int(data['contractTerm']),
                calculation_type=data['calculationType'],
                input_amount=int(data['inputAmount']),
                email=data.get('email'),
                calculation_date=date.today()
            )
        except (ValueError, TypeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ä–∞—Å—á–µ—Ç–∞: {str(e)}'
            }), 400
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
        logger.info(f"üßÆ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º...")
        calculator = NSJCalculatorFixed()
        result = calculator.calculate(calculation_input)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'success': True,
            'calculationId': result.calculation_uuid,
            'inputParameters': {
                'birthDate': calculation_input.birth_date.isoformat(),
                'gender': calculation_input.gender,
                'contractTerm': calculation_input.contract_term,
                'calculationType': calculation_input.calculation_type,
                'inputAmount': calculation_input.input_amount,
                'email': calculation_input.email,
                'ageAtStart': result.age_at_start,
                'ageAtEnd': result.age_at_end
            },
            'results': {
                'premiumAmount': result.premium_amount,
                'insuranceSum': result.insurance_sum,
                'accumulatedCapital': result.accumulated_capital,
                'programIncome': result.program_income,
                'taxDeduction': result.tax_deduction
            },
            'redemptionValues': result.redemption_values,
            'calculatedAt': datetime.now().isoformat(),
            'version': 'fixed_v1.15'  # –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        }
        
        logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result.calculation_uuid}")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø—Ä–µ–º–∏—è={result.premium_amount:,}, —Å—É–º–º–∞={result.insurance_sum:,}, –¥–æ—Ö–æ–¥={result.program_income:,}")
        
        return jsonify(response_data)
        
    except ValueError as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 400
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ'
        }), 500

@care_future_bp.route('/config', methods=['GET'])
def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config_data = {
            'contractTerms': list(range(5, 21)),  # 5-20 –ª–µ—Ç
            'ageRange': {
                'min': 18,
                'max': 63
            },
            'amountLimits': {
                'premium': {
                    'min': 100000,
                    'max': 50000000
                },
                'sum': {
                    'min': 500000,
                    'max': 100000000
                }
            },
            'calculationTypes': ['from_premium', 'from_sum'],
            'genders': ['male', 'female'],
            'currency': 'RUB',
            'version': 'fixed_v1.15'
        }
        
        response_data = {
            'success': True,
            'config': config_data
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
        }), 500

@care_future_bp.route('/validate-amount', methods=['POST', 'OPTIONS'])
def validate_amount():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    if request.method == "OPTIONS":
        return '', 200
    
    try:
        data, error = safe_get_json()
        if error:
            return jsonify({
                'success': False,
                'error': error
            }), 400
        
        amount = int(data.get('amount', 0))
        calc_type = data.get('calculationType', 'from_premium')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤
        if calc_type == 'from_premium':
            if amount < 100000:
                return jsonify({
                    'success': False,
                    'error': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –≤–∑–Ω–æ—Å: 100,000 —Ä—É–±.'
                }), 400
            if amount > 50000000:
                return jsonify({
                    'success': False,
                    'error': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –≤–∑–Ω–æ—Å: 50,000,000 —Ä—É–±.'
                }), 400
        else:  # from_sum
            if amount < 500000:
                return jsonify({
                    'success': False,
                    'error': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: 500,000 —Ä—É–±.'
                }), 400
            if amount > 100000000:
                return jsonify({
                    'success': False,
                    'error': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: 100,000,000 —Ä—É–±.'
                }), 400
        
        return jsonify({
            'success': True,
            'valid': True
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
        }), 500

@care_future_bp.route('/admin/status', methods=['GET'])
def admin_status():
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        calculator = NSJCalculatorFixed()
        test_input = CalculationInput(
            birth_date=date(1990, 1, 1),
            gender='male',
            contract_term=5,
            calculation_type='from_premium',
            input_amount=960000
        )
        
        try:
            test_result = calculator.calculate(test_input)
            calculator_status = 'working'
            calculator_error = None
        except Exception as e:
            calculator_status = 'error'
            calculator_error = str(e)
        
        response_data = {
            'success': True,
            'status': {
                'database': 'connected',
                'calculator': calculator_status,
                'version': 'fixed_v1.15',
                'excel_logic': 'implemented'
            },
            'calculator_error': calculator_error,
            'stats': {
                'available_terms': list(range(5, 21)),
                'calculations_count': NSJCalculations.query.count() if calculator_status == 'working' else 0
            },
            'endpoints': {
                'calculate': '/api/care-future/calculate',
                'config': '/api/care-future/config',
                'validateAmount': '/api/care-future/validate-amount',
                'adminStatus': '/api/care-future/admin/status'
            }
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã'
        }), 500

@care_future_bp.route('/calculation/<uuid:calculation_id>', methods=['GET'])
def get_calculation(calculation_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ ID"""
    try:
        calculation = NSJCalculations.query.filter_by(
            calculation_uuid=str(calculation_id)
        ).first()
        
        if not calculation:
            return jsonify({
                'success': False,
                'error': '–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
        
        response_data = {
            'success': True,
            'calculation': calculation.to_dict(include_redemption=True)
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞'
        }), 500

@care_future_bp.route('/calculations/by-email/<email>', methods=['GET'])
def get_calculations_by_email(email):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ email"""
    try:
        limit = request.args.get('limit', 10, type=int)
        
        calculations = NSJCalculations.query.filter_by(
            email=email
        ).order_by(NSJCalculations.created_at.desc()).limit(limit).all()
        
        response_data = {
            'success': True,
            'calculations': [calc.to_dict() for calc in calculations],
            'count': len(calculations)
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤'
        }), 500

@care_future_bp.route('/test-excel-logic', methods=['GET'])
def test_excel_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ Excel —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        calculator = NSJCalculatorFixed()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel (–º—É–∂—á–∏–Ω–∞ 60 –ª–µ—Ç, —Å—Ä–æ–∫ 9 –ª–µ—Ç, –ø—Ä–µ–º–∏—è 100,000)
        test_input = CalculationInput(
            birth_date=date(1965, 4, 1),  # –≤–æ–∑—Ä–∞—Å—Ç 60 –ª–µ—Ç
            gender='male',
            contract_term=9,
            calculation_type='from_premium',
            input_amount=100000,
            email='test@example.com'
        )
        
        result = calculator.calculate(test_input)
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞
        expected_values = {
            'insurance_sum': 1467000,  # C16 –∏–∑ Excel
            'accumulated_capital': 900000,  # C12 –∏–∑ Excel (100000 * 9)
            'program_income_approx': 567000,  # C13 –∏–∑ Excel (–ø—Ä–∏–º–µ—Ä–Ω–æ)
            'tax_deduction': 117000  # C14 –∏–∑ Excel (–¥–ª—è –¥–æ—Ö–æ–¥–∞ –¥–æ 5 –º–ª–Ω)
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        accuracy = {}
        accuracy['insurance_sum'] = abs(result.insurance_sum - expected_values['insurance_sum']) < 1000
        accuracy['accumulated_capital'] = result.accumulated_capital == expected_values['accumulated_capital']
        accuracy['program_income'] = abs(result.program_income - expected_values['program_income_approx']) < 10000
        accuracy['tax_deduction'] = result.tax_deduction == expected_values['tax_deduction']
        
        all_accurate = all(accuracy.values())
        
        response_data = {
            'success': True,
            'test_passed': all_accurate,
            'calculation_uuid': result.calculation_uuid,
            'results': {
                'calculated': {
                    'insurance_sum': result.insurance_sum,
                    'accumulated_capital': result.accumulated_capital,
                    'program_income': result.program_income,
                    'tax_deduction': result.tax_deduction
                },
                'expected': expected_values,
                'accuracy': accuracy
            },
            'redemption_values_count': len(result.redemption_values),
            'message': '–õ–æ–≥–∏–∫–∞ Excel —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞!' if all_accurate else '–ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å Excel'
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Excel –ª–æ–≥–∏–∫–∏: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}'
        }), 500

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö
# =============================================================================

@care_future_bp.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    return jsonify({
        'success': False,
        'error': 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
    }), 404

@care_future_bp.errorhandler(405)
def method_not_allowed(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 405 –æ—à–∏–±–æ–∫"""
    return jsonify({
        'success': False,
        'error': '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω'
    }), 405

@care_future_bp.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error}")
    return jsonify({
        'success': False,
        'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }), 500

# =============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BLUEPRINT
# =============================================================================

def init_care_future_routes(app):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è routes –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Blueprint
        app.register_blueprint(care_future_bp)
        
        logger.info("‚úÖ Care Future routes —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
        with app.app_context():
            try:
                calculator = NSJCalculatorFixed()
                test_input = CalculationInput(
                    birth_date=date(1990, 1, 1),
                    gender='male',
                    contract_term=5,
                    calculation_type='from_premium',
                    input_amount=960000
                )
                
                test_result = calculator.calculate(test_input)
                logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ: {test_result.calculation_uuid}")
                logger.info(f"üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
                logger.info(f"  - POST /api/care-future/calculate (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)")
                logger.info(f"  - GET  /api/care-future/test-excel-logic")
                logger.info(f"  - GET  /api/care-future/admin/status")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
                return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Care Future routes: {e}")
        return False

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ
    from flask import Flask
    from db_saver import init_db
    
    app = Flask(__name__)
    init_db(app)
    init_care_future_routes(app)
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Care Future API...")
    
    with app.test_client() as client:
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        response = client.get('/api/care-future/config')
        print(f"Config test: {response.status_code}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        response = client.get('/api/care-future/admin/status')
        print(f"Status test: {response.status_code}")
        
        # –¢–µ—Å—Ç Excel –ª–æ–≥–∏–∫–∏
        response = client.get('/api/care-future/test-excel-logic')
        print(f"Excel logic test: {response.status_code}")
        
        if response.status_code == 200:
            result = response.get_json()
            print(f"Excel logic passed: {result.get('test_passed', False)}")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞
        test_data = {
            'birthDate': '1990-01-01',
            'gender': 'male',
            'contractTerm': 5,
            'calculationType': 'from_premium',
            'inputAmount': 960000
        }
        
        response = client.post('/api/care-future/calculate', json=test_data)
        print(f"Calculate test: {response.status_code}")
        
        if response.status_code == 200:
            print("üéâ –í—Å–µ API —Ç–µ—Å—Ç—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø—Ä–æ–π–¥–µ–Ω—ã!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.get_json()}")