# care_future_routes.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π JSON

import os
import logging
from datetime import datetime, date
from typing import Dict, Any, List, Optional
from flask import Blueprint, request, jsonify, current_app
from sqlalchemy.exc import SQLAlchemyError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥–µ–ª–∏ –∏ –∫–ª–∞—Å—Å—ã
from care_future_models import (
    NSJCalculator, NSJDataManager, NSJCalculations,
    CalculationInput, CalculationResult,
    NSJRiskRates, NSJRedemptionRates, NSJCalculatorSettings
)
from db_saver import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("care_future_routes")

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ
care_future_bp = Blueprint('care_future', __name__, url_prefix='/api/care-future')

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def safe_get_json():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
        content_type = request.content_type
        logger.info(f"üìã Content-Type: {content_type}")
        
        if not content_type or 'application/json' not in content_type:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Content-Type: {content_type}")
            return None, "Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å application/json"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not request.data:
            logger.error("‚ùå –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
            return None, "–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            data = request.get_json(force=True)
            if data is None:
                logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")
                return None, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ"
            
            logger.info(f"üì• JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {list(data.keys()) if isinstance(data, dict) else type(data)}")
            return data, None
            
        except Exception as json_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_error}")
            return None, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(json_error)}"
            
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è JSON: {e}")
        return None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

# =============================================================================
# –û–°–ù–û–í–ù–´–ï API ENDPOINTS
# =============================================================================

@care_future_bp.route('/calculate', methods=['POST', 'OPTIONS'])
def calculate_insurance():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ù–°–ñ
    
    –û–∂–∏–¥–∞–µ—Ç JSON:
    {
        "email": "client@example.com",
        "birthDate": "1990-01-15",
        "gender": "male",
        "contractTerm": 5,
        "calculationType": "from_premium",
        "inputAmount": 960000
    }
    """
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight
    if request.method == "OPTIONS":
        return '', 200
        
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º JSON
        data, error = safe_get_json()
        if error:
            return jsonify({
                'success': False,
                'error': error
            }), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['birthDate', 'gender', 'contractTerm', 'calculationType', 'inputAmount']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            return jsonify({
                'success': False,
                'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {", ".join(missing_fields)}'
            }), 400
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            birth_date = datetime.strptime(data['birthDate'], '%Y-%m-%d').date()
        except ValueError:
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD'
            }), 400
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        calculation_input = CalculationInput(
            birth_date=birth_date,
            gender=data['gender'],
            contract_term=int(data['contractTerm']),
            calculation_type=data['calculationType'],
            input_amount=int(data['inputAmount']),
            email=data.get('email'),
            calculation_date=date.today()
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calculator = NSJCalculator()
        result = calculator.calculate(calculation_input)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'success': True,
            'calculationId': result.calculation_uuid,
            'inputParameters': {
                'birthDate': calculation_input.birth_date.isoformat(),
                'gender': calculation_input.gender,
                'contractTerm': calculation_input.contract_term,
                'calculationType': calculation_input.calculation_type,
                'inputAmount': calculation_input.input_amount,
                'email': calculation_input.email,
                'ageAtStart': result.age_at_start,
                'ageAtEnd': result.age_at_end
            },
            'results': {
                'premiumAmount': result.premium_amount,
                'insuranceSum': result.insurance_sum,
                'accumulatedCapital': result.accumulated_capital,
                'programIncome': result.program_income,
                'taxDeduction': result.tax_deduction
            },
            'redemptionValues': result.redemption_values,
            'calculatedAt': datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result.calculation_uuid}")
        return jsonify(response_data)
        
    except ValueError as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 400
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@care_future_bp.route('/config', methods=['GET'])
def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    try:
        config_data = NSJDataManager.get_calculator_info()
        
        response_data = {
            'success': True,
            'config': config_data
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
        }), 500

@care_future_bp.route('/validate-age', methods=['POST', 'OPTIONS'])
def validate_age():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight
    if request.method == "OPTIONS":
        return '', 200
        
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º JSON
        data, error = safe_get_json()
        if error:
            return jsonify({
                'success': False,
                'error': error
            }), 400
        
        if 'birthDate' not in data:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'
            }), 400
        
        try:
            birth_date = datetime.strptime(data['birthDate'], '%Y-%m-%d').date()
        except ValueError:
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã'
            }), 400
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        today = date.today()
        age = today.year - birth_date.year
        if today.month < birth_date.month or (today.month == birth_date.month and today.day < birth_date.day):
            age -= 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        age_limits = NSJDataManager.get_age_ranges()
        is_valid = age_limits['min_age'] <= age <= age_limits['max_age']
        
        response_data = {
            'success': True,
            'age': age,
            'isValid': is_valid,
            'limits': age_limits
        }
        
        if not is_valid:
            response_data['message'] = f"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {age_limits['min_age']} –¥–æ {age_limits['max_age']} –ª–µ—Ç"
        
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞: {age} –ª–µ—Ç, –≤–∞–ª–∏–¥–µ–Ω: {is_valid}")
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞'
        }), 500

@care_future_bp.route('/validate-amount', methods=['POST', 'OPTIONS'])
def validate_amount():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight
    if request.method == "OPTIONS":
        return '', 200
        
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º JSON
        data, error = safe_get_json()
        if error:
            return jsonify({
                'success': False,
                'error': error
            }), 400
        
        if 'amount' not in data or 'type' not in data:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞ –∏–ª–∏ —Ç–∏–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
            }), 400
        
        amount = int(data['amount'])
        validation_type = data['type']  # 'premium' –∏–ª–∏ 'insurance_sum'
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã
        amount_limits = NSJDataManager.get_amount_ranges()
        
        if validation_type == 'premium':
            min_amount = amount_limits['min_premium']
            max_amount = amount_limits['max_premium']
            amount_name = '—Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞'
        else:
            min_amount = amount_limits['min_insurance_sum']
            max_amount = amount_limits['max_insurance_sum']
            amount_name = '—Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã'
        
        is_valid = min_amount <= amount <= max_amount
        
        response_data = {
            'success': True,
            'amount': amount,
            'isValid': is_valid,
            'limits': {
                'min': min_amount,
                'max': max_amount,
                'type': validation_type
            }
        }
        
        if not is_valid:
            response_data['message'] = f"–°—É–º–º–∞ {amount_name} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {min_amount:,} –¥–æ {max_amount:,} —Ä—É–±–ª–µ–π"
        
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã: {amount:,} —Ä—É–±., —Ç–∏–ø: {validation_type}, –≤–∞–ª–∏–¥–µ–Ω: {is_valid}")
        return jsonify(response_data)
        
    except ValueError:
        return jsonify({
            'success': False,
            'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã'
        }), 400
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã'
        }), 500

# =============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS
# =============================================================================

@care_future_bp.route('/calculation/<uuid:calculation_id>', methods=['GET'])
def get_calculation(calculation_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ ID"""
    try:
        calculation = NSJCalculations.query.filter_by(
            calculation_uuid=str(calculation_id)
        ).first()
        
        if not calculation:
            return jsonify({
                'success': False,
                'error': '–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
        
        response_data = {
            'success': True,
            'calculation': calculation.to_dict()
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞'
        }), 500

@care_future_bp.route('/calculations/by-email/<email>', methods=['GET'])
def get_calculations_by_email(email):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ email"""
    try:
        limit = request.args.get('limit', 10, type=int)
        
        calculations = NSJCalculations.query.filter_by(
            email=email
        ).order_by(NSJCalculations.created_at.desc()).limit(limit).all()
        
        response_data = {
            'success': True,
            'calculations': [calc.to_dict() for calc in calculations],
            'count': len(calculations)
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤'
        }), 500

@care_future_bp.route('/redemption-preview', methods=['POST', 'OPTIONS'])
def get_redemption_preview():
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–∫—É–ø–Ω—ã—Ö —Å—É–º–º"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight
    if request.method == "OPTIONS":
        return '', 200
        
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º JSON
        data, error = safe_get_json()
        if error:
            return jsonify({
                'success': False,
                'error': error
            }), 400
        
        contract_term = int(data['contractTerm'])
        premium_amount = int(data['premiumAmount'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—ã–∫—É–ø–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ä–æ–∫–∞
        redemption_rates = NSJRedemptionRates.query.filter_by(
            contract_term=contract_term
        ).all()
       
        if not redemption_rates:
            return jsonify({
                'success': False,
                'error': f'–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—ã–∫—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å—Ä–æ–∫–∞ {contract_term} –ª–µ—Ç'
            }), 404
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∫—É–ø–Ω—ã–µ —Å—É–º–º—ã
        redemption_values = []
        for year in range(1, contract_term + 1):
            coefficient = NSJRedemptionRates.get_coefficient(year, contract_term)
            paid_premiums = premium_amount * year
            redemption_amount = int(paid_premiums * coefficient)
            
            redemption_values.append({
                'year': year,
                'paidPremiums': paid_premiums,
                'coefficient': coefficient,
                'redemptionAmount': redemption_amount
            })
        
        response_data = {
            'success': True,
            'contractTerm': contract_term,
            'premiumAmount': premium_amount,
            'redemptionValues': redemption_values
        }
        
        return jsonify(response_data)
        
    except ValueError:
        return jsonify({
            'success': False,
            'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'
        }), 400
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–∫—É–ø–Ω—ã—Ö —Å—É–º–º: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–∫—É–ø–Ω—ã—Ö —Å—É–º–º'
        }), 500

# =============================================================================
# –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï ENDPOINTS
# =============================================================================

@care_future_bp.route('/admin/status', methods=['GET'])
def get_system_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    try:
        validation = NSJDataManager.validate_database()
        
        response_data = {
            'success': True,
            'database': validation,
            'endpoints': {
                'calculate': '/api/care-future/calculate',
                'config': '/api/care-future/config',
                'validateAge': '/api/care-future/validate-age',
                'validateAmount': '/api/care-future/validate-amount',
                'redemptionPreview': '/api/care-future/redemption-preview'
            }
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã'
        }), 500

@care_future_bp.route('/admin/test-calculation', methods=['POST', 'OPTIONS'])
def test_calculation():
    """–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üåê ‚ûú %s %s", request.method, request.path)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight
    if request.method == "OPTIONS":
        return '', 200
        
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'birthDate': '1990-01-01',
            'gender': 'male',
            'contractTerm': 5,
            'calculationType': 'from_premium',
            'inputAmount': 960000,
            'email': 'test@example.com'
        }
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if request.content_length and request.content_length > 0:
            data, error = safe_get_json()
            if not error and data:
                test_data.update(data)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        logger.info(f"üß™ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: {test_data}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        with current_app.test_request_context(
            '/api/care-future/calculate',
            json=test_data,
            method='POST',
            content_type='application/json'
        ):
            response = calculate_insurance()
            return response
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}'
        }), 500

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö
# =============================================================================

@care_future_bp.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    return jsonify({
        'success': False,
        'error': 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
    }), 404

@care_future_bp.errorhandler(405)
def method_not_allowed(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 405 –æ—à–∏–±–æ–∫"""
    return jsonify({
        'success': False,
        'error': '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω'
    }), 405

@care_future_bp.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error}")
    return jsonify({
        'success': False,
        'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }), 500

# =============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BLUEPRINT
# =============================================================================

def init_care_future_routes(app):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è routes –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Blueprint
        app.register_blueprint(care_future_bp)
        
        logger.info("‚úÖ Care Future routes –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        with app.app_context():
            validation = NSJDataManager.validate_database()
            if validation['status'] == 'error':
                logger.error(f"‚ùå –û—à–∏–±–∫–∏ –≤ –ë–î –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {validation['errors']}")
            else:
                logger.info(f"‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ: {validation['stats']}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Care Future routes: {e}")
        return False

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ
    from flask import Flask
    from db_saver import init_db
    
    app = Flask(__name__)
    init_db(app)
    init_care_future_routes(app)
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Care Future API...")
    
    with app.test_client() as client:
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        response = client.get('/api/care-future/config')
        print(f"Config test: {response.status_code}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        response = client.get('/api/care-future/admin/status')
        print(f"Status test: {response.status_code}")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞
        test_data = {
            'birthDate': '1990-01-01',
            'gender': 'male',
            'contractTerm': 5,
            'calculationType': 'from_premium',
            'inputAmount': 960000
        }
        
        response = client.post('/api/care-future/calculate', json=test_data)
        print(f"Calculate test: {response.status_code}")
        
        if response.status_code == 200:
            print("üéâ –í—Å–µ API —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.get_json()}")