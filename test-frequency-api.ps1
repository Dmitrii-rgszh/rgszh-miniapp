#!/usr/bin/env pwsh
# –¢–µ—Å—Ç API —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏

param(
    [string]$VmIp = "176.108.243.189"
)

Write-Host "üß™ === –¢–ï–°–¢ API –° –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê–ú–ò –ü–ï–†–ò–û–î–ò–ß–ù–û–°–¢–ò ===" -ForegroundColor Green
Write-Host "   –í–ú: $VmIp" -ForegroundColor Yellow
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
$infoUrl = "https://${VmIp}/api/justincase/info"
Write-Host "üì° –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API: $infoUrl" -ForegroundColor Cyan

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ
[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}

try {
    $response = Invoke-RestMethod -Uri $infoUrl -TimeoutSec 10 -SkipCertificateCheck
    Write-Host "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
    Write-Host "   –ù–∞–∑–≤–∞–Ω–∏–µ: $($response.data.name)" -ForegroundColor Yellow
    Write-Host "   –í–µ—Ä—Å–∏—è: $($response.data.version)" -ForegroundColor Yellow
} catch {
    Write-Host "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É $VmIp" -ForegroundColor Yellow
    return
}

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
$testData = @{
    age = 30
    gender = "m"
    term_years = 10
    sum_insured = 2000000
    include_accident = $true
    include_critical_illness = $true
    critical_illness_type = "rf"
}

# –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
$frequencies = @(
    @{ key = "annual"; name = "–ï–∂–µ–≥–æ–¥–Ω–æ"; expected_coeff = 1.0000; payments = 1 },
    @{ key = "semi_annual"; name = "–ü–æ–ª—É–≥–æ–¥–∏–µ"; expected_coeff = 0.5100; payments = 2 },
    @{ key = "quarterly"; name = "–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ"; expected_coeff = 0.2575; payments = 4 },
    @{ key = "monthly"; name = "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"; expected_coeff = 0.0867; payments = 12 }
)

$calcUrl = "https://${VmIp}/api/justincase/calculate"
$results = @{}

Write-Host ""
Write-Host "üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—è–º–∏..." -ForegroundColor Cyan
Write-Host "   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:" -ForegroundColor Yellow
Write-Host "     –í–æ–∑—Ä–∞—Å—Ç: $($testData.age) –ª–µ—Ç" -ForegroundColor Gray
Write-Host "     –ü–æ–ª: $($testData.gender)" -ForegroundColor Gray
Write-Host "     –°—Ä–æ–∫: $($testData.term_years) –ª–µ—Ç" -ForegroundColor Gray
Write-Host "     –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: $($testData.sum_insured.ToString('N0')) —Ä—É–±" -ForegroundColor Gray
Write-Host "     –ù–°: $($testData.include_accident)" -ForegroundColor Gray
Write-Host "     –ö–ó: $($testData.include_critical_illness)" -ForegroundColor Gray
Write-Host ""

foreach ($freq in $frequencies) {
    $testRequest = $testData.Clone()
    $testRequest.payment_frequency = $freq.key
    
    Write-Host "   üìä –¢–µ—Å—Ç: $($freq.name)" -ForegroundColor White
    Write-Host "      –û–∂–∏–¥–∞–µ–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: $($freq.expected_coeff)" -ForegroundColor Gray
    Write-Host "      –ü–ª–∞—Ç–µ–∂–µ–π –≤ –≥–æ–¥: $($freq.payments)" -ForegroundColor Gray
    
    try {
        $result = Invoke-RestMethod -Uri $calcUrl -Method POST -Body ($testRequest | ConvertTo-Json) -ContentType "application/json" -TimeoutSec 15 -SkipCertificateCheck
        
        if ($result.success) {
            $results[$freq.key] = $result.data
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Ç–µ–ø–µ—Ä—å final_premium —ç—Ç–æ —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            $payment_amount = $result.data.final_premium
            $annual_total = $result.data.total_annual_premium
            $coefficient = $result.data.frequency_coefficient
            $per_payment_coeff = $result.data.per_payment_coefficient
            $payments_per_year = $result.data.payments_per_year
            
            Write-Host "      ‚úÖ –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω" -ForegroundColor Green
            Write-Host "         üí∞ –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: $($payment_amount.ToString('N2')) —Ä—É–±" -ForegroundColor Green
            Write-Host "         üìÖ –û–±—â–∞—è –≥–æ–¥–æ–≤–∞—è —Å—É–º–º–∞: $($annual_total.ToString('N2')) —Ä—É–±" -ForegroundColor Green
            Write-Host "         üî¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã: $coefficient" -ForegroundColor Green
            Write-Host "         üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞—Ç–µ–∂–∞: $per_payment_coeff" -ForegroundColor Green
            Write-Host "         üóìÔ∏è  –ü–ª–∞—Ç–µ–∂–µ–π –≤ –≥–æ–¥: $payments_per_year" -ForegroundColor Green
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∏—Å–∫–∞–º –∑–∞ –æ–¥–∏–Ω –ø–ª–∞—Ç–µ–∂
            if ($result.data.per_payment_breakdown) {
                $ppb = $result.data.per_payment_breakdown
                Write-Host "         üìã –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Ä–∏—Å–∫–∞–º:" -ForegroundColor Cyan
                Write-Host "           –°–º–µ—Ä—Ç—å: $($ppb.death.ToString('N2')) —Ä—É–±" -ForegroundColor Gray
                Write-Host "           –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: $($ppb.disability.ToString('N2')) —Ä—É–±" -ForegroundColor Gray
                Write-Host "           –ù–°: $($ppb.accident.ToString('N2')) —Ä—É–±" -ForegroundColor Gray
                Write-Host "           –ö–ó: $($ppb.critical.ToString('N2')) —Ä—É–±" -ForegroundColor Gray
            }
            
            # –ì–æ–¥–æ–≤—ã–µ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            if ($result.data.annual_breakdown) {
                $abr = $result.data.annual_breakdown
                Write-Host "         üìÖ –ì–æ–¥–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ —Ä–∏—Å–∫–∞–º:" -ForegroundColor Cyan
                Write-Host "           –°–º–µ—Ä—Ç—å: $($abr.death.ToString('N2')) —Ä—É–±" -ForegroundColor Gray
                Write-Host "           –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: $($abr.disability.ToString('N2')) —Ä—É–±" -ForegroundColor Gray
                Write-Host "           –ù–°: $($abr.accident.ToString('N2')) —Ä—É–±" -ForegroundColor Gray
                Write-Host "           –ö–ó: $($abr.critical.ToString('N2')) —Ä—É–±" -ForegroundColor Gray
            }
            
        } else {
            Write-Host "      ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: $($result.message)" -ForegroundColor Red
        }
    } catch {
        Write-Host "      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host ""
}

# –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
if ($results.Count -gt 0) {
    Write-Host "üìä === –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===" -ForegroundColor Green
    Write-Host ""
    
    $header = "{0,-15} {1,-8} {2,-10} {3,-15} {4,-15} {5,-10}" -f "–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", "–ö–æ—ç—Ñ—Ñ.", "–ü–ª–∞—Ç–µ–∂–µ–π", "–ó–∞ –ø–ª–∞—Ç–µ–∂", "–ì–æ–¥–æ–≤–∞—è", "–î–æ–ø–ª–∞—Ç–∞"
    Write-Host $header -ForegroundColor Yellow
    Write-Host ("-" * 80) -ForegroundColor Gray
    
    $baseAnnual = if ($results.annual) { $results.annual.total_annual_premium } else { 0 }
    
    foreach ($freq in $frequencies) {
        if ($results[$freq.key]) {
            $r = $results[$freq.key]
            $payment_amount = $r.final_premium  # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            $annual_total = $r.total_annual_premium  # –ì–æ–¥–æ–≤–∞—è —Å—É–º–º–∞
            $coefficient = $r.frequency_coefficient
            $payments = $r.payments_per_year
            $markup = if ($baseAnnual -gt 0) { (($annual_total / $baseAnnual - 1) * 100) } else { 0 }
            
            $row = "{0,-15} {1,-8:F4} {2,-10} {3,-15:N0} {4,-15:N0} {5,-10:F1}%" -f $freq.name, $coefficient, $payments, $payment_amount, $annual_total, $markup
            Write-Host $row -ForegroundColor White
        }
    }
    
    Write-Host ("-" * 80) -ForegroundColor Gray
}

Write-Host ""
Write-Host "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Green
