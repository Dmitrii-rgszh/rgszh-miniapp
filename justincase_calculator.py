# justincase_calculator.py
# –ú–û–î–£–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏

import logging
from datetime import datetime, date
from typing import Dict, Any, List, Tuple

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from frequency_coefficients import (
    get_frequency_coefficient, 
    calculate_frequency_premium,
    get_frequency_info
)
from tariffs import (
    calculate_accident_premium,
    calculate_critical_illness_premium,
    validate_insurance_sum,
    validate_insurance_term,
    validate_age,
    get_all_tariffs_info
)
from actuarial_tables import (
    get_life_tariff,
    calculate_life_premium,
    calculate_disability_premium
)

logger = logging.getLogger(__name__)

class JustincaseCalculatorComplete:
    """
    –ú–û–î–£–õ–¨–ù–´–ô –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤, —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –∞–∫—Ç—É–∞—Ä–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    """
    
    def __init__(self):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–û–î–£–õ–¨–ù–û–ì–û –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π'")
        
        # –í–µ—Ä—Å–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        self.version = "v3.0 MODULAR ARCHITECTURE + FIXED COEFFICIENTS"
        self.name = "JustInCase Calculator MODULAR"
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö —Å—É–º–º
        self.MIN_INSURANCE_SUM = 1_000_000
        self.MAX_INSURANCE_SUM = 100_000_000
        
    def get_calculator_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ"""
        return {
            'name': self.name,
            'version': self.version,
            'description': '–ú–æ–¥—É–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –∏–∑ Excel',
            'architecture': 'modular',
            'modules': {
                'frequency_coefficients': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–µ–π',
                'tariffs': '–¢–∞—Ä–∏—Ñ—ã –ù–°, –ö–ó –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è',
                'actuarial_tables': '–ê–∫—Ç—É–∞—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –°–ë–°–ñ'
            },
            'features': {
                'corrected_frequency_coefficients': True,
                'sbszh_actuarial_tables': True,
                'accident_insurance': True,
                'critical_illness': True,
                'sport_coefficient': True,
                'modular_design': True,
                'recommended_sum_calculation': True
            },
            'limits': {
                'min_sum': self.MIN_INSURANCE_SUM,
                'max_sum': self.MAX_INSURANCE_SUM,
                'min_age': 18,
                'max_age': 80,
                'min_term': 1,
                'max_term': 30
            },
            'frequency_info': get_frequency_info(),
            'tariffs_info': get_all_tariffs_info()
        }
    
    def calculate_age(self, birth_date_str: str) -> int:
        """–†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        try:
            birth_date = datetime.strptime(birth_date_str, '%Y-%m-%d').date()
            today = date.today()
            age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
            return age
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
            return 30
    
    def calculate_recommended_sum(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–∑ Excel
        """
        try:
            logger.info("üí∞ === –†–ê–°–ß–ï–¢ –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ù–û–ô –°–¢–†–ê–•–û–í–û–ô –°–£–ú–ú–´ ===")
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ Excel
            COEFFICIENTS = {
                'breadwinner': {
                    'yes': 3.0,  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü
                    'not_breadwinner': 1.0,  # –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä–º–∏–ª—å—Ü–µ–º
                    'no': {  # –ù–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü - –ø–æ –¥–æ–ª–µ –¥–æ—Ö–æ–¥–∞
                        '–¥–æ 10%': 1.0,
                        '10-24%': 1.4,
                        '25-49%': 1.8,
                        '50-74%': 2.2,
                        '75-89%': 2.6,
                        '–ë–æ–ª–µ–µ 90%': 3.0
                    }
                },
                'children': {
                    '0': 1.0,
                    '1': 1.25,
                    '2': 1.40625,
                    '3 –∏ –±–æ–ª–µ–µ': 1.5234375
                },
                'relatives_care': {
                    'yes': 1.3,
                    'no': 1.0
                },
                'max_sum_by_age': {  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫ —Å—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–æ–º—É –¥–æ—Ö–æ–¥—É
                    '–¥–æ 34': 10,
                    '35-44': 8,
                    '45-49': 7,
                    '50-54': 6,
                    '55-59': 5,
                    '60 –∏ —Å—Ç–∞—Ä—à–µ': 3
                }
            }
            
            # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
            MIN_SUM = self.MIN_INSURANCE_SUM
            ROUND_TO = 100_000
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–±–æ—Ç–∞
            has_job = data.get('hasJob', 'no')
            if has_job == 'no':
                logger.info(f"   –ù–µ—Ç —Ä–∞–±–æ—Ç—ã -> —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {MIN_SUM:,}")
                return MIN_SUM
            
            # 2. –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞
            try:
                income_2022 = int(str(data.get('income2022', '0')).replace('.', '').replace(' ', ''))
                income_2023 = int(str(data.get('income2023', '0')).replace('.', '').replace(' ', ''))
                income_2024 = int(str(data.get('income2024', '0')).replace('.', '').replace(' ', ''))
                
                # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å—Ç–∏–ø–µ–Ω–¥–∏—è —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—á–µ—Ç–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
                if has_job == 'student':
                    scholarship = int(str(data.get('scholarship', '0')).replace('.', '').replace(' ', ''))
                    avg_income = (income_2022 + income_2023 + income_2024 + scholarship) / 4
                    logger.info(f"   –†–∞—Å—á–µ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: ({income_2022} + {income_2023} + {income_2024} + {scholarship}) / 4 = {avg_income:,.0f}")
                else:
                    avg_income = (income_2022 + income_2023 + income_2024) / 3
                    logger.info(f"   –†–∞—Å—á–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ: ({income_2022} + {income_2023} + {income_2024}) / 3 = {avg_income:,.0f}")
                
                logger.info(f"   –°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥: {avg_income:,.0f} —Ä—É–±.")
                
            except Exception as e:
                logger.error(f"   –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞: {e}")
                return MIN_SUM
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä–º–∏–ª—å—Ü–∞
            breadwinner_status = data.get('breadwinnerStatus', 'no')
            if breadwinner_status == 'yes':
                breadwinner_coeff = COEFFICIENTS['breadwinner']['yes']
            elif breadwinner_status == 'not_breadwinner':
                breadwinner_coeff = COEFFICIENTS['breadwinner']['not_breadwinner']
            else:  # 'no' - –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü
                income_share = data.get('incomeShare', '25-49%')
                breadwinner_coeff = COEFFICIENTS['breadwinner']['no'].get(income_share, 1.8)
            
            logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä–º–∏–ª—å—Ü–∞: {breadwinner_coeff}")
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
            children_count = data.get('childrenCount', '0')
            children_coeff = COEFFICIENTS['children'].get(children_count, 1.0)
            logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ–π ({children_count}): {children_coeff}")
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
            special_care = data.get('specialCareRelatives', 'no')
            relatives_coeff = COEFFICIENTS['relatives_care'].get(special_care, 1.0)
            logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤: {relatives_coeff}")
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
            unsecured_loans = int(str(data.get('unsecuredLoans', '0')).replace('.', '').replace(' ', ''))
            logger.info(f"   –ù–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: {unsecured_loans:,} —Ä—É–±.")
            
            # 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ö–æ–≤—É—é —Å—É–º–º—É
            calculated_sum = avg_income * breadwinner_coeff * children_coeff * relatives_coeff + unsecured_loans
            logger.info(f"   –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {calculated_sum:,.0f} —Ä—É–±.")
            logger.info(f"   –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞: {avg_income:,.0f} √ó {breadwinner_coeff} √ó {children_coeff} √ó {relatives_coeff} + {unsecured_loans} = {calculated_sum:,.0f}")
            
            # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            age = self.calculate_age(data.get('birthDate'))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É
            if age <= 34:
                age_group = '–¥–æ 34'
            elif age <= 44:
                age_group = '35-44'
            elif age <= 49:
                age_group = '45-49'
            elif age <= 54:
                age_group = '50-54'
            elif age <= 59:
                age_group = '55-59'
            else:
                age_group = '60 –∏ —Å—Ç–∞—Ä—à–µ'
            
            age_coeff = COEFFICIENTS['max_sum_by_age'][age_group]
            max_sum = avg_income * age_coeff
            logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {age} ({age_group}): {max_sum:,.0f} —Ä—É–±.")
            
            # 7. –ë–µ—Ä–µ–º –º–∏–Ω–∏–º—É–º –∏–∑ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π
            recommended_sum = min(calculated_sum, max_sum)
            logger.info(f"   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ (–¥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è): {recommended_sum:,.0f} —Ä—É–±.")
            
            # 8. –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 100 000
            rounded_sum = round(recommended_sum / ROUND_TO) * ROUND_TO
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
            if rounded_sum < MIN_SUM:
                rounded_sum = MIN_SUM
            
            logger.info(f"   ‚úÖ –ò–¢–û–ì–û–í–ê–Ø —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {rounded_sum:,} —Ä—É–±.")
            
            return rounded_sum
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã: {e}")
            return self.MIN_INSURANCE_SUM  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def validate_input_data(self, data: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        errors = []
        
        try:
            # –í–æ–∑—Ä–∞—Å—Ç
            age = self.calculate_age(data['birthDate'])
            is_valid, error = validate_age(age)
            if not is_valid:
                errors.append(error)
            
            # –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ –∏ —Å—Ä–æ–∫ (–µ—Å–ª–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ)
            if data.get('insuranceInfo') == 'yes':
                # –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞
                sum_str = str(data.get('insuranceSum', '')).replace(' ', '').replace(',', '')
                try:
                    insurance_sum = int(sum_str)
                    is_valid, error = validate_insurance_sum(insurance_sum)
                    if not is_valid:
                        errors.append(error)
                except ValueError:
                    errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞")
                
                # –°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
                try:
                    term = int(data.get('insuranceTerm', 1))
                    is_valid, error = validate_insurance_term(term)
                    if not is_valid:
                        errors.append(error)
                except ValueError:
                    errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è")
            
            return len(errors) == 0, errors
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False, ["–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"]
    
    def calculate_base_premium(self, age: int, gender: str, term: int, insurance_sum: int, frequency: str) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π –ø—Ä–µ–º–∏–∏ (—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏ + –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å) —á–µ—Ä–µ–∑ –º–æ–¥—É–ª–∏"""
        try:
            # 1. –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å –∞–∫—Ç—É–∞—Ä–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            life_result = calculate_life_premium(age, gender, term, insurance_sum)
            life_premium = life_result['life_premium']
            
            # 2. –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å –∞–∫—Ç—É–∞—Ä–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            disability_result = calculate_disability_premium(life_premium)
            disability_premium = disability_result['disability_premium']
            
            # 3. –û–±—â–∞—è –±–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã
            base_premium_annual = life_premium + disability_premium
            
            # 4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            frequency_result = calculate_frequency_premium(base_premium_annual, frequency)
            total_base_premium = frequency_result['total_premium']
            freq_coeff = frequency_result['coefficient']
            
            logger.info(f"üí∞ –ú–û–î–£–õ–¨–ù–ê–Ø –±–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è:")
            logger.info(f"   –í–æ–∑—Ä–∞—Å—Ç: {age}, –ø–æ–ª: {gender}, —Å—Ä–æ–∫: {term} –ª–µ—Ç")
            logger.info(f"   –¢–∞—Ä–∏—Ñ –∂–∏–∑–Ω–∏: {life_result['life_tariff']}")
            logger.info(f"   –ü—Ä–µ–º–∏—è –∂–∏–∑–Ω–∏: {life_premium:.2f} —Ä—É–±")
            logger.info(f"   –ü—Ä–µ–º–∏—è –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: {disability_premium:.2f} —Ä—É–±")
            logger.info(f"   –ì–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {base_premium_annual:.2f} —Ä—É–±")
            logger.info(f"   –ö–æ—ç—Ñ—Ñ. —á–∞—Å—Ç–æ—Ç—ã ({frequency}): {freq_coeff}")
            logger.info(f"   –ò–¢–û–ì–û –±–∞–∑–æ–≤–∞—è: {total_base_premium:.2f} —Ä—É–±")
            
            return {
                'life_premium': round(life_premium, 2),
                'disability_premium': round(disability_premium, 2),
                'base_premium': round(total_base_premium, 2),
                'frequency_coefficient': freq_coeff,
                'life_tariff': life_result['life_tariff'],
                'annual_before_frequency': round(base_premium_annual, 2),
                'frequency_details': frequency_result
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–π –ø—Ä–µ–º–∏–∏: {e}")
            raise
    
    def calculate_accident_premium_wrapper(self, insurance_sum: int, frequency: str, sport_included: bool = False) -> Dict[str, Any]:
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏ –ù–° —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å —Ç–∞—Ä–∏—Ñ–æ–≤"""
        try:
            freq_coeff = get_frequency_coefficient(frequency)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
            result = calculate_accident_premium(insurance_sum, freq_coeff, sport_included)
            
            logger.info(f"üí• –ú–û–î–£–õ–¨–ù–ê–Ø –ø—Ä–µ–º–∏—è –ù–°:")
            logger.info(f"   –°–º–µ—Ä—Ç—å –æ—Ç –ù–°: {result['accident_death']:.2f} —Ä—É–±")
            logger.info(f"   –°–º–µ—Ä—Ç—å –æ—Ç –î–¢–ü: {result['accident_transport']:.2f} —Ä—É–±") 
            logger.info(f"   –¢—Ä–∞–≤–º–∞: {result['accident_trauma']:.2f} —Ä—É–±")
            logger.info(f"   –ö–æ—ç—Ñ—Ñ. —á–∞—Å—Ç–æ—Ç—ã: {freq_coeff}")
            if sport_included:
                logger.info(f"   –°–ø–æ—Ä—Ç –∫–æ—ç—Ñ—Ñ: {result['sport_coefficient']} (+{result['sport_markup']}%)")
            logger.info(f"   –ò–¢–û–ì–û –ù–°: {result['total_accident_premium']:.2f} —Ä—É–±")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏ –ù–°: {e}")
            raise
    
    def calculate_critical_illness_premium_wrapper(self, treatment_region: str, frequency: str) -> Dict[str, Any]:
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏ –ö–ó —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å —Ç–∞—Ä–∏—Ñ–æ–≤"""
        try:
            freq_coeff = get_frequency_coefficient(frequency)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
            result = calculate_critical_illness_premium(treatment_region, freq_coeff)
            
            logger.info(f"üè• –ú–û–î–£–õ–¨–ù–ê–Ø –ø—Ä–µ–º–∏—è –ö–ó:")
            logger.info(f"   –†–µ–≥–∏–æ–Ω: {treatment_region}")
            logger.info(f"   –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: {result['base_tariff']:.2f} —Ä—É–±")
            logger.info(f"   –ö–æ—ç—Ñ—Ñ. —á–∞—Å—Ç–æ—Ç—ã: {freq_coeff}")
            logger.info(f"   –ò–¢–û–ì–û –ö–ó: {result['critical_premium']:.2f} —Ä—É–±")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏ –ö–ó: {e}")
            raise
    
    def calculate_full_program(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ú–û–î–£–õ–¨–ù–û–ô –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        try:
            logger.info("üöÄ –ú–û–î–£–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏")
            
            # 1. –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            age = self.calculate_age(data['birthDate'])
            gender = data['gender']
            frequency = data.get('insuranceFrequency', '–ï–∂–µ–≥–æ–¥–Ω–æ')
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ
            if data.get('insuranceInfo') != 'yes':
                return {
                    'success': False,
                    'error': '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ',
                    'calculator_version': self.version
                }
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
            insurance_sum = int(str(data['insuranceSum']).replace(' ', '').replace(',', ''))
            insurance_term = int(data['insuranceTerm'])
            
            # 4. –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å
            base_result = self.calculate_base_premium(age, gender, insurance_term, insurance_sum, frequency)
            
            # 5. –ü—Ä–µ–º–∏—è –ù–° —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
            accident_result = {'total_accident_premium': 0}
            if data.get('accidentPackage', False):
                sport_included = data.get('sportPackage', False)
                accident_result = self.calculate_accident_premium_wrapper(insurance_sum, frequency, sport_included)
            
            # 6. –ü—Ä–µ–º–∏—è –ö–ó —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
            critical_result = {'critical_premium': 0}
            if data.get('criticalPackage', False):
                treatment_region = data.get('treatmentRegion', 'russia')
                critical_result = self.calculate_critical_illness_premium_wrapper(treatment_region, frequency)
            
            # 7. –û–±—â–∞—è –≥–æ–¥–æ–≤–∞—è –ø—Ä–µ–º–∏—è
            annual_premium = (
                base_result['base_premium'] + 
                accident_result['total_accident_premium'] + 
                critical_result['critical_premium']
            )
            
            logger.info(f"üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ú–û–î–£–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
            logger.info(f"   –ë–∞–∑–æ–≤–∞—è: {base_result['base_premium']:,.2f} —Ä—É–±")
            logger.info(f"   –ù–°: {accident_result['total_accident_premium']:,.2f} —Ä—É–±")
            logger.info(f"   –ö–ó: {critical_result['critical_premium']:,.2f} —Ä—É–±")
            logger.info(f"   –ò–¢–û–ì–û: {annual_premium:,.2f} —Ä—É–±")
            logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã ({frequency}): {base_result['frequency_coefficient']}")
            
            # 8. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'success': True,
                'calculator_version': self.version,
                'architecture': 'modular',
                'frequency_coefficient': base_result['frequency_coefficient'],
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                'basePremium': base_result['base_premium'],
                'accidentPremium': accident_result['total_accident_premium'],
                'criticalPremium': critical_result['critical_premium'],
                'annualPremium': round(annual_premium, 2),
                
                # –î–µ—Ç–∞–ª–∏ –±–∞–∑–æ–≤–æ–π –ø—Ä–µ–º–∏–∏
                'lifePremium': base_result['life_premium'],
                'disabilityPremium': base_result['disability_premium'],
                'lifeTariff': base_result['life_tariff'],
                
                # –î–µ—Ç–∞–ª–∏ –ù–°
                'accidentDetails': accident_result if data.get('accidentPackage', False) else None,
                
                # –î–µ—Ç–∞–ª–∏ –ö–ó
                'criticalDetails': critical_result if data.get('criticalPackage', False) else None,
                
                # –î–µ—Ç–∞–ª–∏ –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
                'moduleDetails': {
                    'frequency_details': base_result.get('frequency_details'),
                    'base_before_frequency': base_result['annual_before_frequency']
                },
                
                # –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                'inputParameters': {
                    'age': age,
                    'gender': gender,
                    'insuranceSum': insurance_sum,
                    'insuranceTerm': insurance_term,
                    'frequency': frequency,
                    'accidentPackage': data.get('accidentPackage', False),
                    'criticalPackage': data.get('criticalPackage', False),
                    'sportPackage': data.get('sportPackage', False),
                    'treatmentRegion': data.get('treatmentRegion', 'russia')
                }
            }
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'calculator_version': self.version
            }

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
if __name__ == "__main__":
    print("üîç === –¢–ï–°–¢ –ú–û–î–£–õ–¨–ù–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    calculator = JustincaseCalculatorComplete()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
    info = calculator.get_calculator_info()
    print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ:")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
    print(f"   –í–µ—Ä—Å–∏—è: {info['version']}")
    print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {info['architecture']}")
    
    print(f"\nüß© –ú–æ–¥—É–ª–∏:")
    for module, description in info['modules'].items():
        print(f"   {module}: {description}")
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã
    print(f"\nüí∞ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã:")
    test_recommended_data = {
        'birthDate': '1978-01-01',
        'hasJob': 'yes',
        'income2022': '1500000',
        'income2023': '1500000',
        'income2024': '2000000',
        'breadwinnerStatus': 'no',
        'incomeShare': '25-49%',
        'childrenCount': '3 –∏ –±–æ–ª–µ–µ',
        'specialCareRelatives': 'yes',
        'unsecuredLoans': '0'
    }
    
    recommended_sum = calculator.calculate_recommended_sum(test_recommended_data)
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {recommended_sum:,} —Ä—É–±.")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    test_data = {
        'birthDate': '1990-01-01',
        'gender': 'male',
        'insuranceInfo': 'yes',
        'insuranceTerm': '10',
        'insuranceSum': '2000000',
        'insuranceFrequency': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
        'accidentPackage': True,
        'criticalPackage': True,
        'treatmentRegion': 'abroad',
        'sportPackage': False
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç
    print(f"\nüßÆ –¢–µ—Å—Ç –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:")
    result = calculator.calculate_full_program(test_data)
    
    if result['success']:
        print(f"   ‚úÖ –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω")
        print(f"   –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {result['basePremium']:,.2f} —Ä—É–±")
        print(f"   –ù–° –ø—Ä–µ–º–∏—è: {result['accidentPremium']:,.2f} —Ä—É–±")
        print(f"   –ö–ó –ø—Ä–µ–º–∏—è: {result['criticalPremium']:,.2f} —Ä—É–±")
        print(f"   –ò–¢–û–ì–û: {result['annualPremium']:,.2f} —Ä—É–±")
        print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã: {result['frequency_coefficient']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")