# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–π –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ JustInCase
"""

import logging
import sqlite3
from decimal import Decimal, ROUND_HALF_UP
from typing import Dict, Any, Optional
import os

logger = logging.getLogger(__name__)

class JustInCaseCalculator:
    def __init__(self):
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite —Ñ–∞–π–ª miniapp.db
        self.db_path = 'miniapp.db'
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._diagnose_database()
        
        logger.info(f"üóÑÔ∏è JustInCaseCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ë–î: {self.db_path}")
    
    def _diagnose_database(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not os.path.exists(self.db_path):
                logger.error(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.db_path}")
                return
            
            file_size = os.path.getsize(self.db_path) / 1024 / 1024  # MB
            logger.info(f"üìä –†–∞–∑–º–µ—Ä –ë–î: {file_size:.2f} MB")
            
            conn = self.connect()
            if conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                tables = cursor.fetchall()
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                for table_name in ['nsj_tariffs', 'nsj_accident_tariffs', 'nsj_critical_tariffs', 'justincase_frequency_coefficients']:
                    try:
                        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                        count = cursor.fetchone()[0]
                        logger.info(f"üìä {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                    except sqlite3.OperationalError:
                        logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
                conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ë–î: {e}")
    
    def validate_input_data(self, data: Dict[str, Any]) -> tuple[bool, Dict[str, str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        errors = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['age', 'gender', 'term_years', 'sum_insured']
        for field in required_fields:
            if field not in data or data[field] is None:
                errors[field] = f"–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
        if 'age' in data:
            try:
                age = int(data['age'])
                if age < 18 or age > 65:
                    errors['age'] = "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 65 –ª–µ—Ç"
            except (ValueError, TypeError):
                errors['age'] = "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–∞
        if 'gender' in data:
            gender = data['gender']
            if gender not in ['m', 'f', '–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']:
                errors['gender'] = "–ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'm', 'f', '–ú—É–∂—Å–∫–æ–π' –∏–ª–∏ '–ñ–µ–Ω—Å–∫–∏–π'"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
        if 'term_years' in data:
            try:
                term = int(data['term_years'])
                if term < 1 or term > 30:
                    errors['term_years'] = "–°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 30 –ª–µ—Ç"
            except (ValueError, TypeError):
                errors['term_years'] = "–°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã
        if 'sum_insured' in data:
            try:
                sum_insured = int(data['sum_insured'])
                if sum_insured < 100000:
                    errors['sum_insured'] = "–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100,000 —Ä—É–±."
            except (ValueError, TypeError):
                errors['sum_insured'] = "–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        
        return len(errors) == 0, errors
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path, check_same_thread=False)
            conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏
            return conn
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
    
    def get_base_tariff(self, age: int, gender: str, term_years: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
        conn = self.connect()
        if not conn:
            return None
            
        try:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –ù–°–ñ
            cursor.execute("""
                SELECT death_rate, disability_rate
                FROM nsj_tariffs
                WHERE age = ? AND gender = ? AND term_years = ?
            """, (age, gender, term_years))
            
            base_result = cursor.fetchone()
            if not base_result:
                logger.warning(f"–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {age}, –ø–æ–ª–∞ {gender}, —Å—Ä–æ–∫–∞ {term_years} –ª–µ—Ç")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –ù–°
            cursor.execute("""
                SELECT death_rate, traffic_death_rate, injury_rate
                FROM nsj_accident_tariffs
                WHERE age = ? AND gender = ? AND term_years = ?
            """, (age, gender, term_years))
            
            accident_result = cursor.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –ö–ó
            cursor.execute("""
                SELECT region, rate
                FROM nsj_critical_tariffs
                WHERE age = ? AND gender = ? AND term_years = ?
            """, (age, gender, term_years))
            
            critical_results = cursor.fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'death_rate': float(base_result[0]),
                'disability_rate': float(base_result[1]),
                'accident_death_rate': float(accident_result[0]) if accident_result else 0.0,
                'traffic_death_rate': float(accident_result[1]) if accident_result else 0.0,
                'injury_rate': float(accident_result[2]) if accident_result else 0.0,
                'critical_illness_rf_fee': 0.0,
                'critical_illness_abroad_fee': 0.0,
                'coefficient_i': 0.08  # –ë–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ—ã –ö–ó
            for critical in critical_results:
                if critical[0] == 'russia':
                    result['critical_illness_rf_fee'] = float(critical[1])
                elif critical[0] == 'abroad':
                    result['critical_illness_abroad_fee'] = float(critical[1])
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {e}")
            return None
        finally:
            cursor.close()
            conn.close()
    
    def get_frequency_coefficient(self, payment_frequency: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã –≤—ã–ø–ª–∞—Ç"""
        conn = self.connect()
        if not conn:
            return 1.0
            
        try:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT coefficient 
                FROM justincase_frequency_coefficients
                WHERE payment_frequency = ?
            """, (payment_frequency,))
            
            result = cursor.fetchone()
            return float(result[0]) if result else 1.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã: {e}")
            return 1.0
        finally:
            cursor.close()
            conn.close()
    
    def get_corporate_coefficients(self, email: str) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–µ–Ω–∞ email
        
        Returns:
            dict: {
                'base_coefficient': float,     # –î–ª—è –±–∞–∑–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤ (—Å–º–µ—Ä—Ç—å, –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –ù–°)
                'critical_coefficient': float  # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
            }
        """
        if not email or '@' not in email:
            # –ï—Å–ª–∏ email –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π - –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É
            return {
                'base_coefficient': 1.30,     # +30% –¥–ª—è –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤ –∫—Ä–æ–º–µ –ö–ó
                'critical_coefficient': 1.35  # +35% –¥–ª—è –ö–ó
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω
        domain = email.lower().split('@')[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–µ–Ω–∞
        if domain == 'rgsl.ru':
            # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –†–ì–°–õ - —Å–∫–∏–¥–∫–∞ 5%
            return {
                'base_coefficient': 1.05,     # +5% –¥–ª—è –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤
                'critical_coefficient': 1.05  # +5% –¥–ª—è –ö–ó
            }
        elif domain == 'vtb.ru':
            # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –í–¢–ë - –Ω–∞—Ü–µ–Ω–∫–∞ 20%
            return {
                'base_coefficient': 1.20,     # +20% –¥–ª—è –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤
                'critical_coefficient': 1.20  # +20% –¥–ª—è –ö–ó
            }
        else:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
            return {
                'base_coefficient': 1.30,     # +30% –¥–ª—è –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤ –∫—Ä–æ–º–µ –ö–ó
                'critical_coefficient': 1.35  # +35% –¥–ª—è –ö–ó
            }
    
    def calculate_premium(self, 
                         age: int, 
                         gender: str, 
                         term_years: int, 
                         sum_insured: float,
                         include_accident: bool = True,
                         include_critical_illness: bool = True,
                         critical_illness_type: str = 'rf',
                         payment_frequency: str = 'annual',
                         email: str = None) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏
        
        Args:
            age: –í–æ–∑—Ä–∞—Å—Ç –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ
            gender: –ü–æ–ª (m/f)
            term_years: –°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –≤ –≥–æ–¥–∞—Ö
            sum_insured: –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞
            include_accident: –í–∫–ª—é—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–µ—Å—á–∞—Å—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è
            include_critical_illness: –í–∫–ª—é—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
            critical_illness_type: –¢–∏–ø –ö–ó ('rf' - –†–§, 'abroad' - –∑–∞—Ä—É–±–µ–∂)
            payment_frequency: –ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç (annual, semi_annual, quarterly, monthly)
            email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
            tariff = self.get_base_tariff(age, gender, term_years)
            if not tariff:
                return {
                    'success': False,
                    'error': f'–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {age}, –ø–æ–ª–∞ {gender}, —Å—Ä–æ–∫–∞ {term_years} –ª–µ—Ç'
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã (–∏–∑ –ë–î –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –∫–∞–∫ –≥–æ–¥–æ–≤–æ–π)
            coeff_raw = self.get_frequency_coefficient(payment_frequency)
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –≥–æ–¥
            payments_map = {
                'annual': 1,
                'semi_annual': 2,
                'quarterly': 4,
                'monthly': 12
            }
            payments_per_year = payments_map.get(payment_frequency, 1)
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ –≥–æ–¥–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            if coeff_raw > 1.0:
                # –ü—Ä–∏—à—ë–ª –≥–æ–¥–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.02, 1.03, 1.04)
                per_payment_coeff = coeff_raw / payments_per_year
                freq_coeff = coeff_raw
            else:
                # –ü—Ä–∏—à—ë–ª –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.51, 0.2575, 0.0867)
                per_payment_coeff = coeff_raw
                freq_coeff = per_payment_coeff * payments_per_year
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ email
            corporate_coeffs = self.get_corporate_coefficients(email)
            logger.info(f"üìß Email: {email}, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {corporate_coeffs}")
            
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è –ø–æ —Å–º–µ—Ä—Ç–∏ –∏ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            death_premium = sum_insured * tariff['death_rate'] * corporate_coeffs['base_coefficient']
            disability_premium = sum_insured * tariff['disability_rate'] * corporate_coeffs['base_coefficient']
            base_premium = death_premium + disability_premium
            
            # –ü—Ä–µ–º–∏—è –ø–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º (–§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –°–£–ú–ú–ê)
            critical_premium = 0
            if include_critical_illness:
                if critical_illness_type == 'abroad':
                    critical_premium = tariff['critical_illness_abroad_fee'] * corporate_coeffs['critical_coefficient']
                else:
                    critical_premium = tariff['critical_illness_rf_fee'] * corporate_coeffs['critical_coefficient']
            
            # –ü—Ä–µ–º–∏—è –ø–æ –Ω–µ—Å—á–∞—Å—Ç–Ω–æ–º—É —Å–ª—É—á–∞—é
            accident_premium = 0
            if include_accident:
                # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–∏—Å–∫–∏ –ù–°
                total_accident_rate = (tariff['accident_death_rate'] + 
                                     tariff['traffic_death_rate'] + 
                                     tariff['injury_rate'])
                accident_premium = sum_insured * total_accident_rate * corporate_coeffs['base_coefficient']
            
            # –û–±—â–∞—è –ø—Ä–µ–º–∏—è –¥–æ —É—á—ë—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã (–≥–æ–¥–æ–≤–∞—è –±–∞–∑–∞)
            total_annual_premium = base_premium + critical_premium + accident_premium

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã –ø–æ-—Ä–∏—Å–∫–æ–≤–æ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            def q2(x: float) -> float:
                return float(Decimal(str(x)).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP))

            # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—É–∂–µ —Å —É—á–µ—Ç–æ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)
            death_premium_base = sum_insured * tariff['death_rate'] * corporate_coeffs['base_coefficient']
            disability_premium_base = sum_insured * tariff['disability_rate'] * corporate_coeffs['base_coefficient']

            # –ü–µ—Ä-–ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Å—É–º–º—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∏—Å–∫—É
            per_payment = {
                'death': q2(death_premium_base * per_payment_coeff),
                'disability': q2(disability_premium_base * per_payment_coeff),
                'accident': q2(accident_premium * per_payment_coeff),
                'critical': q2(critical_premium * per_payment_coeff)
            }
            per_payment['base'] = q2(per_payment['death'] + per_payment['disability'])
            per_payment['total'] = q2(per_payment['death'] + per_payment['disability'] + per_payment['accident'] + per_payment['critical'])

            # –ì–æ–¥–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ—Å–ª–µ —É—á—ë—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã (—á–µ—Ä–µ–∑ –ø–µ—Ä-–ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Å—É–º–º—ã)
            premium_by_risk = {
                'death': q2(per_payment['death'] * payments_per_year),
                'disability': q2(per_payment['disability'] * payments_per_year),
                'accident': q2(per_payment['accident'] * payments_per_year),
                'critical': q2(per_payment['critical'] * payments_per_year)
            }
            premium_by_risk['base'] = q2(premium_by_risk['death'] + premium_by_risk['disability'])
            final_premium = q2(premium_by_risk['death'] + premium_by_risk['disability'] + premium_by_risk['accident'] + premium_by_risk['critical'])

            # –û–∫—Ä—É–≥–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ (–¥–æ —á–∞—Å—Ç–æ—Ç—ã) –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π
            base_premium = q2(base_premium)
            critical_premium = q2(critical_premium)
            accident_premium = q2(accident_premium)
            
            return {
                'success': True,
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è - —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                'base_premium': per_payment['base'],
                'critical_illness_premium': per_payment['critical'],
                'accident_premium': per_payment['accident'],
                'final_premium': per_payment['total'],
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                'payment_frequency': payment_frequency,
                'frequency_coefficient': q2(freq_coeff),
                'critical_illness_type': critical_illness_type,
                'payments_per_year': payments_per_year,
                'per_payment_coefficient': per_payment_coeff,
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º
                'per_payment_breakdown': per_payment,
                # –ì–æ–¥–æ–≤—ã–µ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
                'annual_breakdown': premium_by_risk,
                'total_annual_premium': final_premium,
                # –ë–∞–∑–æ–≤—ã–µ –≥–æ–¥–æ–≤—ã–µ —Å—É–º–º—ã (–±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)
                'base_annual_amounts': {
                    'base_premium': base_premium,
                    'critical_illness_premium': critical_premium,
                    'accident_premium': accident_premium,
                    'total_annual_premium': float(Decimal(str(total_annual_premium)).quantize(
                        Decimal('0.01'), rounding=ROUND_HALF_UP))
                },
                'calculation_details': {
                    'age': age,
                    'gender': gender,
                    'term_years': term_years,
                    'sum_insured': sum_insured,
                    'include_accident': include_accident,
                    'include_critical_illness': include_critical_illness,
                    'critical_illness_type': critical_illness_type,
                    'payments_per_year': payments_per_year,
                    'per_payment_coefficient': per_payment_coeff,
                    'email': email,
                    'corporate_coefficients': corporate_coeffs,
                    'tariff_rates': {
                        'death_rate': tariff['death_rate'],
                        'disability_rate': tariff['disability_rate'],
                        'accident_death_rate': tariff['accident_death_rate'],
                        'traffic_death_rate': tariff['traffic_death_rate'],
                        'injury_rate': tariff['injury_rate']
                    },
                    'critical_illness_fees': {
                        'rf_fee': tariff['critical_illness_rf_fee'],
                        'abroad_fee': tariff['critical_illness_abroad_fee']
                    }
                }
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}'
            }
    
    def save_calculation(self, calculation_data: Dict[str, Any], calculation_id: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = self.connect()
        if not conn:
            return False
            
        try:
            cursor = conn.cursor()
            
            details = calculation_data['calculation_details']
            
            cursor.execute("""
                INSERT INTO justincase_calculations 
                (calculation_id, age, gender, term_years, sum_insured,
                 include_accident, include_critical_illness, critical_illness_type, payment_frequency,
                 base_premium, accident_premium, critical_premium, total_premium)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ON CONFLICT (calculation_id) 
                DO UPDATE SET 
                    age = EXCLUDED.age,
                    gender = EXCLUDED.gender,
                    term_years = EXCLUDED.term_years,
                    sum_insured = EXCLUDED.sum_insured,
                    include_accident = EXCLUDED.include_accident,
                    include_critical_illness = EXCLUDED.include_critical_illness,
                    critical_illness_type = EXCLUDED.critical_illness_type,
                    payment_frequency = EXCLUDED.payment_frequency,
                    base_premium = EXCLUDED.base_premium,
                    accident_premium = EXCLUDED.accident_premium,
                    critical_premium = EXCLUDED.critical_premium,
                    total_premium = EXCLUDED.total_premium,
                    created_at = CURRENT_TIMESTAMP;
            """, (
                calculation_id,
                details['age'],
                details['gender'],
                details['term_years'],
                details['sum_insured'],
                details['include_accident'],
                details['include_critical_illness'],
                details['critical_illness_type'],
                calculation_data['payment_frequency'],
                calculation_data['base_premium'],
                calculation_data['accident_premium'],
                calculation_data['critical_illness_premium'],
                calculation_data['final_premium']
            ))
            
            conn.commit()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
            conn.rollback()
            return False
        finally:
            cursor.close()
            conn.close()
    
    def get_available_terms(self, age: int, gender: str) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–æ–ª–∞"""
        conn = self.connect()
        if not conn:
            return []
            
        try:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT DISTINCT term_years 
                FROM justincase_base_tariffs
                WHERE age = ? AND gender = ?
                ORDER BY term_years
            """, (age, gender))
            
            return [row[0] for row in cursor.fetchall()]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤: {e}")
            return []
        finally:
            cursor.close()
            conn.close()
    
    def get_age_range(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤"""
        conn = self.connect()
        if not conn:
            return {'min': 18, 'max': 70}
            
        try:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT MIN(age), MAX(age) 
                FROM justincase_base_tariffs
            """)
            
            result = cursor.fetchone()
            return {
                'min': result[0] if result[0] else 18,
                'max': result[1] if result[1] else 70
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤: {e}")
            return {'min': 18, 'max': 70}
        finally:
            cursor.close()
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
def calculate_justincase_premium(age: int, gender: str, term_years: int, 
                               sum_insured: float, include_accident: bool = True,
                               include_critical_illness: bool = True,
                               critical_illness_type: str = 'rf',
                               payment_frequency: str = 'annual',
                               calculation_id: str = None) -> Dict[str, Any]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
    """
    calculator = JustInCaseCalculator()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    age_range = calculator.get_age_range()
    if age < age_range['min'] or age > age_range['max']:
        return {
            'success': False,
            'error': f'–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {age_range["min"]} –¥–æ {age_range["max"]} –ª–µ—Ç'
        }
    
    if gender not in ['m', 'f']:
        return {
            'success': False,
            'error': '–ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å m (–º—É–∂—Å–∫–æ–π) –∏–ª–∏ f (–∂–µ–Ω—Å–∫–∏–π)'
        }
    
    if sum_insured <= 0:
        return {
            'success': False,
            'error': '–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
        }
    
    if critical_illness_type not in ['rf', 'abroad']:
        return {
            'success': False,
            'error': '–¢–∏–ø –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å rf (–†–§) –∏–ª–∏ abroad (–∑–∞—Ä—É–±–µ–∂)'
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–æ–∫–∏
    available_terms = calculator.get_available_terms(age, gender)
    if term_years not in available_terms:
        return {
            'success': False,
            'error': f'–î–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {age} –∏ –ø–æ–ª–∞ {gender} –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–æ–∫–∏: {available_terms}'
        }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    result = calculator.calculate_premium(
        age=age,
        gender=gender,
        term_years=term_years,
        sum_insured=sum_insured,
        include_accident=include_accident,
        include_critical_illness=include_critical_illness,
        critical_illness_type=critical_illness_type,
        payment_frequency=payment_frequency
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID
    if result['success'] and calculation_id:
        calculator.save_calculation(result, calculation_id)
    
    return result


def calculate_premium(age: int, gender: str, sum_insured: int, term_years: int, 
                     critical_illness_type: str = 'rf', include_accident: bool = True, 
                     include_critical_illness: bool = True, payment_frequency: str = 'annual'):
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–µ–º–∏–∏
    
    Args:
        age: –í–æ–∑—Ä–∞—Å—Ç
        gender: –ü–æ–ª ('m' –∏–ª–∏ 'f')
        sum_insured: –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ (–º–∏–Ω–∏–º—É–º 1,000,000)
        term_years: –°—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è (–ª–µ—Ç)
        critical_illness_type: –¢–∏–ø –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π ('rf' –∏–ª–∏ 'abroad')
        include_accident: –í–∫–ª—é—á–∏—Ç—å –ù–°
        include_critical_illness: –í–∫–ª—é—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
        payment_frequency: –ß–∞—Å—Ç–æ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞
    """
    calculator = JustInCaseCalculator()
    return calculator.calculate_premium(
        age=age,
        gender=gender, 
        term_years=term_years,
        sum_insured=sum_insured,
        include_accident=include_accident,
        include_critical_illness=include_critical_illness,
        critical_illness_type=critical_illness_type,
        payment_frequency=payment_frequency
    )


# –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
JustincaseCalculatorComplete = JustInCaseCalculator
