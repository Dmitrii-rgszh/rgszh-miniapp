# assessment_routes.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
import traceback
import logging
from datetime import datetime
from flask import request, jsonify
from sqlalchemy import text
from db_saver import db
from email_sender import process_new_candidate_notification

logger = logging.getLogger("assessment_routes")

def register_assessment_routes(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    
    @app.route('/api/questionnaire/<int:questionnaire_id>', methods=['GET'])
    def get_questionnaire(questionnaire_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
        try:
            include_questions = request.args.get('include_questions', 'false').lower() == 'true'
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫
            query = text("""
                SELECT id, title, description, questions_count, max_time_minutes, is_active
                FROM questionnaires 
                WHERE id = :questionnaire_id AND is_active = true
            """)
            
            result = db.session.execute(query, {"questionnaire_id": questionnaire_id})
            questionnaire = result.fetchone()
            
            if not questionnaire:
                return jsonify({"error": "Questionnaire not found"}), 404
            
            questionnaire_data = {
                "id": questionnaire.id,
                "title": questionnaire.title,
                "description": questionnaire.description,
                "questions_count": questionnaire.questions_count,
                "max_time_minutes": questionnaire.max_time_minutes,
                "is_active": questionnaire.is_active
            }
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
            if include_questions:
                questions_query = text("""
                    SELECT q.id, q.question_order, q.question_text, q.description,
                           qo.id as option_id, qo.option_order, qo.option_text, 
                           qo.option_type, qo.score_value
                    FROM questions q
                    LEFT JOIN question_options qo ON q.id = qo.question_id
                    WHERE q.questionnaire_id = :questionnaire_id
                    ORDER BY q.question_order, qo.option_order
                """)
                
                questions_result = db.session.execute(questions_query, {"questionnaire_id": questionnaire_id})
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
                questions_dict = {}
                for row in questions_result:
                    q_id = row.id
                    if q_id not in questions_dict:
                        questions_dict[q_id] = {
                            "id": row.id,
                            "order_number": row.question_order,
                            "text": row.question_text,
                            "description": row.description,
                            "options": []
                        }
                    
                    if row.option_id:
                        questions_dict[q_id]["options"].append({
                            "id": row.option_id,
                            "order_number": row.option_order,
                            "text": row.option_text,
                            "type": row.option_type,
                            "score_value": row.score_value
                        })
                
                questionnaire_data["questions"] = list(questions_dict.values())
            
            return jsonify(questionnaire_data), 200
            
        except Exception as e:
            logger.error(f"Error getting questionnaire {questionnaire_id}: {e}")
            return jsonify({"error": "Internal server error"}), 500
    
    @app.route('/api/assessment/save', methods=['POST', 'OPTIONS'])
    def save_assessment():
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ë–î"""
        logger.info("üåê ‚ûú %s %s", request.method, request.path)

        if request.method == "OPTIONS":
            return '', 200

        try:
            logger.info("üì¶ Request headers: %s", dict(request.headers))
            logger.info("üìã Content-Type: %s", request.content_type)
            logger.info("üìÑ Raw data length: %s", len(request.data) if request.data else 0)
      
            data = request.get_json()
      
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info("üì• Parsed JSON successfully")
            logger.info("üìù Data keys: %s", list(data.keys()) if data else "None")
            logger.info("üìä Data details: surname='%s', firstName='%s', answers_count=%s", 
                       data.get('surname', 'None'), 
                       data.get('firstName', 'None'), 
                       len(data.get('answers', [])))

            # –î–û–ë–ê–í–õ–Ø–ï–ú –í–ê–õ–ò–î–ê–¶–ò–Æ –ü–û–õ–ï–ô
            required_fields = ['surname', 'firstName', 'patronymic', 'answers']
            for field in required_fields:
                if not data.get(field):
                    logger.error(f"‚ùå Missing required field: {field}")
                    return jsonify({"error": f"Missing required field: {field}"}), 400

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            for field in required_fields:
                value = data.get(field)
                logger.info(f"üîç Field '{field}': value='{value}', type={type(value)}, empty={not value}")
      
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ answers - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if not isinstance(data['answers'], list) or len(data['answers']) == 0:
                logger.error(f"‚ùå Invalid answers: {data.get('answers')}")
                return jsonify({"error": "Answers must be a non-empty list"}), 400
            
            logger.info(f"üìã Processing {len(data['answers'])} answers...")

            # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (0-1-2 –±–∞–ª–ª–∞ –∑–∞ –æ—Ç–≤–µ—Ç)
            total_score = calculate_total_score(data['answers'])
            if total_score is None:
                logger.error("‚ùå Failed to calculate total score")
                return jsonify({"error": "Failed to calculate scores"}), 500
      
            logger.info(f"üéØ Calculated total score: {total_score}")

            # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ —Ç–∏–ø–∞–º
            type_scores = calculate_type_scores(data['answers'])
            logger.info(f"üìä Type scores: {type_scores}")
      
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç (–º–∞–∫—Å–∏–º—É–º 50 –±–∞–ª–ª–æ–≤)
            percentage = round((total_score / 50.0) * 100, 2)
      
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–ª–æ–≤
            transcription = get_transcription_by_score(total_score)
            logger.info(f"üìù Transcription: {transcription[:50]}...")
      
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
            full_name = f"{data['surname']} {data['firstName']} {data['patronymic']}"
      
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î (—Å–æ –í–°–ï–ú–ò —Å—Ç–æ–ª–±—Ü–∞–º–∏)
            insert_query = text("""
                INSERT INTO assessment_candidates 
                (surname, first_name, patronymic, full_name, total_score, percentage, 
                 innovator_score, optimizer_score, executor_score, transcription, 
                 completion_time_minutes, created_at, updated_at)
                VALUES (:surname, :first_name, :patronymic, :full_name, :total_score, :percentage,
                        :innovator_score, :optimizer_score, :executor_score, :transcription,
                        :completion_time_minutes, :created_at, :updated_at)
                RETURNING id
            """)
      
            current_time = datetime.utcnow()
            completion_time = data.get('completionTime', 0)  # –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
      
            logger.info("üíæ Saving to database...")
            result = db.session.execute(insert_query, {
                "surname": data['surname'],
                "first_name": data['firstName'], 
                "patronymic": data['patronymic'],
                "full_name": full_name,
                "total_score": total_score,
                "percentage": percentage,
                "innovator_score": type_scores.get('innovator', 0),
                "optimizer_score": type_scores.get('optimizer', 0),
                "executor_score": type_scores.get('executor', 0),
                "transcription": transcription,
                "completion_time_minutes": completion_time,
                "created_at": current_time,
                "updated_at": current_time
            })
      
            candidate_id = result.fetchone()[0]
            logger.info(f"üìã Candidate saved with ID: {candidate_id}")
      
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            saved_answers = 0
            for i, answer_text in enumerate(data['answers']):
                try:
                    option_query = text("""
                        SELECT qo.id, qo.question_id
                        FROM question_options qo
                        JOIN questions q ON qo.question_id = q.id
                        WHERE q.questionnaire_id = 1 
                        AND qo.option_text = :answer_text
                        LIMIT 1
                    """)
              
                    option_result = db.session.execute(option_query, {"answer_text": answer_text})
                    option_row = option_result.fetchone()
              
                    if option_row:
                        answer_query = text("""
                            INSERT INTO candidate_answers 
                            (candidate_id, question_id, selected_option_id, answer_text)
                            VALUES (:candidate_id, :question_id, :selected_option_id, :answer_text)
                        """)
                  
                        db.session.execute(answer_query, {
                            "candidate_id": candidate_id,
                            "question_id": option_row.question_id,
                            "selected_option_id": option_row.id,
                            "answer_text": answer_text
                        })
                        saved_answers += 1
                except Exception as answer_error:
                    logger.warning(f"Failed to save answer {i+1}: {answer_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      
            logger.info(f"üìù Saved {saved_answers}/{len(data['answers'])} answers")
            db.session.commit()
            
            # –û–¢–ü–†–ê–í–õ–Ø–ï–ú EMAIL –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
            try:
                candidate_data = {
                    "full_name": full_name,
                    "surname": data['surname'],
                    "first_name": data['firstName'],
                    "patronymic": data['patronymic'],
                    "total_score": total_score,
                    "percentage": percentage,
                    "innovator_score": type_scores.get('innovator', 0),
                    "optimizer_score": type_scores.get('optimizer', 0),
                    "executor_score": type_scores.get('executor', 0),
                    "transcription": transcription,
                    "completion_time_minutes": completion_time,
                    "created_at": current_time
                }
                
                email_sent = process_new_candidate_notification(candidate_data)
                logger.info(f"üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {'—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if email_sent else '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}")
                
            except Exception as email_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {email_error}")
                email_sent = False
      
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result_data = {
                "candidate": {
                    "id": candidate_id,
                    "surname": data['surname'],
                    "firstName": data['firstName'],
                    "patronymic": data['patronymic'],
                    "full_name": full_name,
                    "total_score": total_score,
                    "percentage": percentage,
                    "innovator_score": type_scores.get('innovator', 0),
                    "optimizer_score": type_scores.get('optimizer', 0),
                    "executor_score": type_scores.get('executor', 0),
                    "transcription": transcription
                },
                "email_sent": email_sent
            }
      
            logger.info(f"‚úÖ Assessment saved for {data['firstName']} {data['surname']}: {total_score}/50 points ({percentage}%)")
            logger.info(f"   Type scores: I:{type_scores.get('innovator', 0)} O:{type_scores.get('optimizer', 0)} E:{type_scores.get('executor', 0)}")
      
            return jsonify(result_data), 201
      
        except Exception as e:
            db.session.rollback()
            logger.error(f"‚ùå Error saving assessment: {e}", exc_info=True)
            return jsonify({"error": "Internal server error"}), 500

    # –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò EMAIL
    @app.route('/api/proxy/assessment/send_manager', methods=['POST', 'OPTIONS'])
    def send_assessment_manager():
        """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π assessment –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
        logger.info("üåê ‚ûú %s %s", request.method, request.path)

        if request.method == "OPTIONS":
            return '', 200

        try:
            data = request.get_json()
            subject = data.get('subject', 'Assessment Notification')
            body = data.get('body', '')
            
            logger.info(f"üìß Sending assessment email: {subject}")
            
            # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ email
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ SMTP –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π API
            
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info("üìÆ EMAIL CONTENT:")
            logger.info(f"Subject: {subject}")
            logger.info(f"Body: {body[:200]}...")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ—á—Ç–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
            return jsonify({"success": True, "message": "Email sent successfully"}), 200
            
        except Exception as e:
            logger.error(f"‚ùå Error sending assessment email: {e}")
            return jsonify({"error": "Failed to send email"}), 500

def calculate_total_score(answers):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 50 –±–∞–ª–ª–æ–≤)"""
    try:
        total_score = 0
        
        for answer_text in answers:
            # –ù–∞—Ö–æ–¥–∏–º –±–∞–ª–ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            query = text("""
                SELECT qo.score_value
                FROM question_options qo
                JOIN questions q ON qo.question_id = q.id
                WHERE q.questionnaire_id = 1 
                AND qo.option_text = :answer_text
                LIMIT 1
            """)
            
            result = db.session.execute(query, {"answer_text": answer_text})
            row = result.fetchone()
            
            if row and row.score_value is not None:
                total_score += row.score_value
        
        return total_score
        
    except Exception as e:
        logger.error(f"‚ùå Error calculating total score: {e}")
        return None

def calculate_type_scores(answers):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã –ø–æ —Ç–∏–ø–∞–º (–∏–Ω–Ω–æ–≤–∞—Ç–æ—Ä, –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)"""
    try:
        type_scores = {
            'innovator': 0,
            'optimizer': 0, 
            'executor': 0
        }
        
        for answer_text in answers:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–ø –∏ –±–∞–ª–ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            query = text("""
                SELECT qo.option_type, qo.score_value
                FROM question_options qo
                JOIN questions q ON qo.question_id = q.id
                WHERE q.questionnaire_id = 1 
                AND qo.option_text = :answer_text
                LIMIT 1
            """)
            
            result = db.session.execute(query, {"answer_text": answer_text})
            row = result.fetchone()
            
            if row and row.option_type and row.score_value is not None:
                type_name = row.option_type.lower()
                if type_name in type_scores:
                    type_scores[type_name] += row.score_value
        
        return type_scores
        
    except Exception as e:
        logger.error(f"‚ùå Error calculating type scores: {e}")
        return {'innovator': 0, 'optimizer': 0, 'executor': 0}

def get_transcription_by_score(total_score):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞"""
    try:
        if total_score >= 40:
            return "–ö–∞–Ω–¥–∏–¥–∞—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º –∏ –≥–æ—Ç–æ–≤ –∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ"
        elif total_score >= 30:
            return "–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏"
        elif total_score >= 20:
            return "–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã, –Ω–æ –º–æ–∂–µ—Ç –Ω—É–∂–¥–∞—Ç—å—Å—è –≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∏–º—É–ª–∞—Ö, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ"
        else:
            return "–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º"
    except Exception as e:
        logger.error(f"‚ùå Error getting transcription: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"