# -*- coding: utf-8 -*-
"""
API —Ä–æ—É—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ JustInCase
"""

import logging
from datetime import datetime
from typing import Dict, Any
from flask import Blueprint, request, jsonify
import traceback
import uuid

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
import justincase_calculator
from justincase_calculator import JustInCaseCalculator

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Blueprint
justincase_bp = Blueprint('justincase', __name__)

def safe_get_json():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        if not request.is_json:
            return None, "Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å application/json"
        
        data = request.get_json()
        if data is None:
            return None, "–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"
        
        return data, None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è JSON: {e}")
        return None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

def format_success_response(data: Any, message: str = "–£—Å–ø–µ—à–Ω–æ") -> Dict[str, Any]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    return {
        'success': True,
        'message': message,
        'data': data,
        'timestamp': datetime.now().isoformat()
    }

def format_error_response(error_message: str, error_code: int = 400) -> tuple:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    response = {
        'success': False,
        'error': error_message,
        'timestamp': datetime.now().isoformat()
    }
    return jsonify(response), error_code

@justincase_bp.route('/api/justincase/calculate', methods=['POST', 'OPTIONS'])
def calculate_premium():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏
    
    –û–∂–∏–¥–∞–µ—Ç JSON:
    {
        "age": 30,
        "gender": "m",
        "term_years": 10,
        "sum_insured": 1000000,
        "include_accident": true,
        "include_critical_illness": true,
        "payment_frequency": "annual"
    }
    """
    if request.method == "OPTIONS":
        return '', 200

    try:
        logger.info("üéØ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ JustInCase")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data, error = safe_get_json()
        if error:
            return format_error_response(error, 400)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            age = int(data.get('age'))
            gender = data.get('gender', '').lower()
            term_years = int(data.get('term_years'))
            sum_insured = float(data.get('sum_insured'))
            include_accident = data.get('include_accident', True)
            include_critical_illness = data.get('include_critical_illness', True)
            critical_illness_type = data.get('critical_illness_type', 'rf')  # 'rf' –∏–ª–∏ 'abroad'
            payment_frequency = data.get('payment_frequency', 'annual')
            
        except (TypeError, ValueError) as e:
            return format_error_response(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {str(e)}", 400)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ä–∞—Å—á–µ—Ç–∞
        calculation_id = str(uuid.uuid4())
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calculator = JustInCaseCalculator()
        result = calculator.calculate_premium(
            age=age,
            gender=gender,
            term_years=term_years,
            sum_insured=sum_insured,
            include_accident=include_accident,
            include_critical_illness=include_critical_illness,
            critical_illness_type=critical_illness_type,
            payment_frequency=payment_frequency
        )
        
        if result['success']:
            logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result['final_premium']} —Ä—É–±.")
            return jsonify(format_success_response(result, "–†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"))
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {result['error']}")
            return format_error_response(result['error'], 400)
        
    except Exception as e:
        logger.error(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        logger.error(traceback.format_exc())
        return format_error_response(f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}', 500)

@justincase_bp.route('/api/justincase/info', methods=['GET', 'OPTIONS'])
def get_calculator_info():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
    """
    if request.method == "OPTIONS":
        return '', 200

    try:
        from justincase_calculator import JustInCaseCalculator
        
        calculator = JustInCaseCalculator()
        age_range = calculator.get_age_range()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
        middle_age = (age_range['min'] + age_range['max']) // 2
        available_terms_m = calculator.get_available_terms(middle_age, 'm')
        available_terms_f = calculator.get_available_terms(middle_age, 'f')
        
        info = {
            'name': 'JustInCase Calculator',
            'version': '2.0',
            'description': '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π"',
            'age_range': age_range,
            'supported_genders': ['m', 'f'],
            'payment_frequencies': ['annual', 'semi_annual', 'quarterly', 'monthly'],
            'example_available_terms': {
                'male': available_terms_m,
                'female': available_terms_f,
                'note': f'–ü—Ä–∏–º–µ—Ä –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {middle_age} –ª–µ—Ç'
            },
            'frequency_descriptions': {
                'annual': '–ì–æ–¥–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞',
                'semi_annual': '–ü–æ–ª—É–≥–æ–¥–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞',
                'quarterly': '–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞',
                'monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞'
            }
        }
        
        return jsonify(format_success_response(info, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ"))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return format_error_response(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}', 500)

@justincase_bp.route('/api/justincase/available-terms', methods=['POST', 'OPTIONS'])
def get_available_terms():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–æ–ª–∞
    
    –û–∂–∏–¥–∞–µ—Ç JSON:
    {
        "age": 30,
        "gender": "m"
    }
    """
    if request.method == "OPTIONS":
        return '', 200

    try:
        data, error = safe_get_json()
        if error:
            return format_error_response(error, 400)
        
        try:
            age = int(data.get('age'))
            gender = data.get('gender', '').lower()
        except (TypeError, ValueError) as e:
            return format_error_response(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {str(e)}", 400)
        
        if gender not in ['m', 'f']:
            return format_error_response("–ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'm' –∏–ª–∏ 'f'", 400)
        
        from justincase_calculator import JustInCaseCalculator
        calculator = JustInCaseCalculator()
        
        available_terms = calculator.get_available_terms(age, gender)
        
        result = {
            'age': age,
            'gender': gender,
            'available_terms': available_terms
        }
        
        return jsonify(format_success_response(result, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã"))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤: {e}")
        return format_error_response(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤: {str(e)}', 500)

@justincase_bp.route('/api/justincase/health', methods=['GET'])
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    """
    try:
        from justincase_calculator import JustInCaseCalculator
        
        calculator = JustInCaseCalculator()
        conn = calculator.connect()
        
        if conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM justincase_base_tariffs;")
            tariff_count = cursor.fetchone()[0]
            cursor.close()
            conn.close()
            
            return jsonify({
                'status': 'healthy',
                'database_connected': True,
                'tariffs_loaded': tariff_count,
                'timestamp': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'status': 'unhealthy',
                'database_connected': False,
                'error': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î',
                'timestamp': datetime.now().isoformat()
            }), 500
            
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

def register_justincase_routes(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ JustInCase
    """
    try:
        app.register_blueprint(justincase_bp)
        logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ JustInCase –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        with app.app_context():
            try:
                from justincase_calculator import JustInCaseCalculator
                calculator = JustInCaseCalculator()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
                conn = calculator.connect()
                if conn:
                    cursor = conn.cursor()
                    cursor.execute("SELECT COUNT(*) FROM justincase_base_tariffs;")
                    count = cursor.fetchone()[0]
                    cursor.close()
                    conn.close()
                    logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∞—Ä–∏—Ñ–æ–≤: {count}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–æ–≤ JustInCase: {e}")
        return False


@justincase_bp.route('/api/proxy/calculator/save', methods=['POST', 'OPTIONS'])
def proxy_calculator_save():
    """
    Proxy –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–æ–≤—ã–π API
    """
    if request.method == "OPTIONS":
        return '', 200
        
    try:
        logger.info("üì® Proxy –∑–∞–ø—Ä–æ—Å –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        data, error = safe_get_json()
        if error:
            return format_error_response(error)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–≤–æ–≥–æ API
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä—è–º—É—é), —Ç–∞–∫ –∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—á–µ—Ä–µ–∑ birthDate –∏ –ø–æ–ª)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        age = data.get('age')
        if not age and data.get('birthDate'):
            # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
            from datetime import date
            birth_date = date.fromisoformat(data['birthDate'])
            today = date.today()
            age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        elif not age:
            age = 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª
        gender = data.get('gender', 'm')
        if gender in ['male', '–ú—É–∂—Å–∫–æ–π']:
            gender = 'm'
        elif gender in ['female', '–ñ–µ–Ω—Å–∫–∏–π']:
            gender = 'f'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ö–æ–≤—É—é —Å—É–º–º—É
        sum_insured = data.get('sum_insured')
        if not sum_insured:
            # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            insurance_sum = data.get('insuranceSum', '')
            if isinstance(insurance_sum, str):
                sum_insured = int(insurance_sum.replace('.', '').replace(' ', '')) if insurance_sum else 1000000
            else:
                sum_insured = insurance_sum or 1000000
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
        term_years = data.get('term_years')
        if not term_years:
            term_years = int(data.get('insuranceTerm', 5))
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –ù–°
        include_accident = data.get('include_accident')
        if include_accident is None:
            include_accident = data.get('accidentPackage') in ['yes', '–î–∞', True]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –ö–ó
        include_critical_illness = data.get('include_critical_illness')
        if include_critical_illness is None:
            include_critical_illness = data.get('criticalPackage') in ['yes', '–î–∞', True]
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ö–ó
        critical_illness_type = data.get('critical_illness_type', 'rf')
        if critical_illness_type == 'rf':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            treatment_region = data.get('treatmentRegion', 'russia')
            if treatment_region in ['abroad', '–ó–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π']:
                critical_illness_type = 'abroad'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–ª–∞—Ç–µ–∂–µ–π
        payment_frequency = data.get('payment_frequency', 'annual')
        if payment_frequency == 'annual':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            insurance_frequency = data.get('insuranceFrequency', '–ï–∂–µ–≥–æ–¥–Ω–æ')
            frequency_map = {
                '–ï–∂–µ–≥–æ–¥–Ω–æ': 'annual',
                '–†–∞–∑ –≤ –≥–æ–¥': 'annual',
                '–ü–æ–ª—É–≥–æ–¥–∏–µ': 'semi_annual',
                '–†–∞–∑ –≤ –ø–æ–ª–≥–æ–¥–∞': 'semi_annual',
                '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ': 'quarterly',
                '–†–∞–∑ –≤ –∫–≤–∞—Ä—Ç–∞–ª': 'quarterly',
                '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': 'monthly',
                '–†–∞–∑ –≤ –º–µ—Å—è—Ü': 'monthly'
            }
            payment_frequency = frequency_map.get(insurance_frequency, 'annual')

        api_data = {
            'age': age,
            'gender': gender,
            'sum_insured': sum_insured,
            'term_years': term_years,
            'include_accident': include_accident,
            'include_critical_illness': include_critical_illness,
            'critical_illness_type': critical_illness_type,
            'payment_frequency': payment_frequency
        }
        
        
        logger.info(f"üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {api_data}")        # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π API
        calculator = JustInCaseCalculator()
        result = calculator.calculate_premium(
            age=api_data['age'],
            gender=api_data['gender'],
            sum_insured=api_data['sum_insured'],
            term_years=api_data['term_years'],
            critical_illness_type=api_data['critical_illness_type'],
            include_accident=api_data['include_accident'],
            include_critical_illness=api_data['include_critical_illness'],
            payment_frequency=api_data['payment_frequency']
        )
        
        if not result.get('success'):
            return format_error_response(result.get('error', '–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞'))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        frontend_result = {
            'success': True,
            'calculator': 'JustincaseCalculatorComplete',
            'calculationId': str(uuid.uuid4()),
            'clientAge': api_data['age'],
            'clientGender': '–ú—É–∂—Å–∫–æ–π' if api_data['gender'] == 'm' else '–ñ–µ–Ω—Å–∫–∏–π',
            'insuranceTerm': api_data['term_years'],
            'baseInsuranceSum': api_data['sum_insured'],
            'basePremium': result['base_premium'],
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–µ–º–∏–∏ –ø–æ —Å–º–µ—Ä—Ç–∏ –∏ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            'deathPremium': result['calculation_details']['sum_insured'] * result['calculation_details']['tariff_rates']['death_rate'],
            'disabilityPremium': result['calculation_details']['sum_insured'] * result['calculation_details']['tariff_rates']['disability_rate'],
            'accidentPackageIncluded': api_data['include_accident'],
            'accidentInsuranceSum': api_data['sum_insured'] if api_data['include_accident'] else 0,
            'accidentPremium': result['accident_premium'] if api_data['include_accident'] else 0,
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–µ–º–∏–∏ –ù–°
            'accidentDeathPremium': result['calculation_details']['sum_insured'] * result['calculation_details']['tariff_rates']['accident_death_rate'] if api_data['include_accident'] else 0,
            'trafficDeathPremium': result['calculation_details']['sum_insured'] * result['calculation_details']['tariff_rates']['traffic_death_rate'] if api_data['include_accident'] else 0,
            'injuryPremium': result['calculation_details']['sum_insured'] * result['calculation_details']['tariff_rates']['injury_rate'] if api_data['include_accident'] else 0,
            'criticalPackageIncluded': api_data['include_critical_illness'],
            'criticalInsuranceSum': 60000000,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –ö–ó
            'criticalRehabilitationSum': 400000,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏
            'criticalPremium': result['critical_illness_premium'] if api_data['include_critical_illness'] else 0,
            'totalPremium': result['final_premium'],
            'treatmentRegion': data.get('treatmentRegion', 'russia'),
            'sportPackage': data.get('sportPackage') == 'yes',
            'calculation_details': result.get('calculation_details', {}),
            'version': '2.0.0'
        }
        
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        final_response = {
            'success': True,
            'calculation_result': frontend_result
        }
        
        logger.info("‚úÖ Proxy –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return jsonify(final_response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ proxy –∑–∞–ø—Ä–æ—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return format_error_response(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")


def register_justincase_routes(app):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ JustInCase –≤ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    
    Args:
        app: Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    
    Returns:
        bool: True –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
    """
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º blueprint —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
        app.register_blueprint(justincase_bp)
        logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã JustInCase –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ JustInCase: {e}")
        return False
