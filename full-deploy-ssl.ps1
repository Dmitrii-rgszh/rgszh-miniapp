# full-deploy-ssl.ps1 - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ RGSZH MiniApp —Å SSL

Write-Host @"
================================================
üöÄ RGSZH MiniApp - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å SSL
================================================
"@ -ForegroundColor Magenta

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
Write-Host "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..." -ForegroundColor Cyan

if (-not (Test-Path "certs/privkey.pem") -or -not (Test-Path "certs/fullchain.pem")) {
    Write-Host "‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ" -ForegroundColor Yellow
    
    $choice = Read-Host "–°–æ–∑–¥–∞—Ç—å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã? (Y/N)"
    if ($choice -eq "Y" -or $choice -eq "y") {
        # –°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        .\create-ssl-certs.ps1 -SelfSigned
    } else {
        Write-Host "‚ùå –ë–µ–∑ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ HTTPS –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!" -ForegroundColor Red
        Write-Host "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\create-ssl-certs.ps1 -SelfSigned" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã" -ForegroundColor Green
}

# 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º BOM –≤ —Ñ–∞–π–ª–∞—Ö
Write-Host "`nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ BOM –≤ —Ñ–∞–π–ª–∞—Ö..." -ForegroundColor Cyan

if (Test-Path ".\fix-bom.ps1") {
    .\fix-bom.ps1
} else {
    Write-Warning "–°–∫—Ä–∏–ø—Ç fix-bom.ps1 –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É BOM"
}

# 3. –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ nginx/default.conf —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
if (-not (Test-Path "nginx/default.conf")) {
    Write-Host "`nüìù –°–æ–∑–¥–∞–Ω–∏–µ nginx/default.conf..." -ForegroundColor Cyan
    
    if (-not (Test-Path "nginx")) {
        New-Item -ItemType Directory -Path "nginx" | Out-Null
    }
    
    # –°–æ–∑–¥–∞–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    $nginxConfig = @'
# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ WebSocket
map $http_upgrade $connection_upgrade {
    default   upgrade;
    ''        close;
}

server {
    listen 80;
    server_name _;

    # –†–µ–¥–∏—Ä–µ–∫—Ç –≤—Å–µ–≥–æ HTTP ‚Üí HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name rgszh-miniapp.org;

    # SSL
    ssl_certificate     /etc/ssl/fullchain.pem;
    ssl_certificate_key /etc/ssl/privkey.pem;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏
    location / {
        proxy_pass         http://frontend:80/;
        proxy_http_version 1.1;
        proxy_set_header   Host            $host;
        proxy_set_header   X-Real-IP       $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect     off;
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        add_header Pragma "no-cache";
        expires -1;
    }

    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ REST API
    location /api/ {
        proxy_pass         http://server:4000/api/;
        proxy_http_version 1.1;
        proxy_set_header   Host            $host;
        proxy_set_header   X-Real-IP       $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect     off;
    }

    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ Socket.IO (WebSocket + polling)
    location /socket.io/ {
        proxy_pass         http://server:4000/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade         $http_upgrade;
        proxy_set_header   Connection      $connection_upgrade;
        proxy_set_header   Host            $host;
        proxy_set_header   X-Real-IP       $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_read_timeout 86400s;
        proxy_redirect     off;
    }
}
'@
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ BOM
    [System.IO.File]::WriteAllText(
        "nginx/default.conf", 
        $nginxConfig, 
        (New-Object System.Text.UTF8Encoding($false))
    )
    
    Write-Host "‚úÖ nginx/default.conf —Å–æ–∑–¥–∞–Ω" -ForegroundColor Green
}

# 4. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
Write-Host "`nüöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è..." -ForegroundColor Cyan
.\deploy.ps1 -Verbose

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
Write-Host "`nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..." -ForegroundColor Cyan

Start-Sleep -Seconds 5

try {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS
    $response = Invoke-WebRequest -Uri "https://rgszh-miniapp.org" -Method HEAD -SkipCertificateCheck -ErrorAction Stop
    Write-Host "‚úÖ HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç!" -ForegroundColor Green
} catch {
    Write-Warning "HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP..."
    
    try {
        $response = Invoke-WebRequest -Uri "http://176.109.110.217" -Method HEAD -ErrorAction Stop
        Write-Host "‚úÖ HTTP —Ä–∞–±–æ—Ç–∞–µ—Ç (–±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ HTTPS)" -ForegroundColor Green
    } catch {
        Write-Error "–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"
    }
}

Write-Host @"

================================================
üìã –ò—Ç–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:
================================================
üåê URL: https://rgszh-miniapp.org
üåê IP: http://176.109.110.217
üìä API: https://rgszh-miniapp.org/api/status

üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:
ssh admin@176.109.110.217 'cd rgszh-miniapp && docker compose ps'

‚ö†Ô∏è  –î–ª—è Telegram MiniApp:
1. –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
2. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à Telegram
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram
4. –û—Ç–∫—Ä–æ–π—Ç–µ MiniApp –∑–∞–Ω–æ–≤–æ
================================================
"@ -ForegroundColor Cyan