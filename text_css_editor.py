# -*- coding: utf-8 -*-
"""
CSS Web Editor - –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-—Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è text.css —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤
"""

from flask import Flask, render_template_string, request, jsonify
import re
import os
import json
import shutil
import webbrowser
import threading
import time
from datetime import datetime

app = Flask(__name__)

def safe_print(message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    try:
        print(message)
    except UnicodeEncodeError:
        clean_message = message.encode('ascii', 'ignore').decode('ascii')
        print(clean_message)

# HTML —à–∞–±–ª–æ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–±–æ—Ä–∞ —ç–∫—Ä–∞–Ω–æ–≤
HTML_TEMPLATE = r"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üé® CSS Text Editor - Telegram MiniApp</title>
    <style>
        :root {
            --editor-bg: linear-gradient(135deg, #b40037, #002682);
            --panel-bg: rgba(255, 255, 255, 0.1);
            --panel-border: rgba(255, 255, 255, 0.2);
            --input-bg: rgba(255, 255, 255, 0.15);
            --text-primary: #ffffff;
            --text-secondary: #cccccc;
            --success-color: #28a745;
            --error-color: #dc3545;
            --warning-color: #ffc107;
            --active-screen: #b40037;
        }

        * { 
            margin: 0; 
            padding: 0; 
            box-sizing: border-box; 
        }
        
        body {
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--editor-bg);
            color: var(--text-primary);
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .header {
            text-align: center;
            padding: 20px;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid var(--panel-border);
        }
        
        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #fff, #ccc);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .header-buttons {
            display: flex;
            justify-content: center;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 15px;
        }
        
        /* –°–µ–ª–µ–∫—Ç–æ—Ä —ç–∫—Ä–∞–Ω–æ–≤ */
        .screen-selector {
            display: flex;
            justify-content: center;
            gap: 5px;
            margin: 20px 0;
            padding: 15px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 12px;
        }
        
        .screen-btn {
            background: rgba(255, 255, 255, 0.1);
            color: var(--text-secondary);
            padding: 12px 20px;
            border: 1px solid var(--panel-border);
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 4px;
            min-width: 120px;
        }
        
        .screen-btn.active {
            background: var(--active-screen);
            color: white;
            border-color: var(--active-screen);
            transform: translateY(-2px);
        }
        
        .screen-btn:hover:not(.active) {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-1px);
        }
        
        .screen-icon {
            font-size: 20px;
        }
        
        .screen-label {
            font-size: 12px;
            opacity: 0.8;
        }
        
        .btn {
            background: linear-gradient(135deg, rgb(180, 0, 55), rgb(0, 40, 130));
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, rgb(152, 164, 174), rgb(118, 143, 146));
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .editor-layout {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 20px;
            min-height: calc(100vh - 200px);
        }
        
        .variables-section {
            background: var(--panel-bg);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
            border: 1px solid var(--panel-border);
            overflow-y: auto;
            max-height: calc(100vh - 200px);
        }
        
        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .preview-section, .info-section {
            background: var(--panel-bg);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid var(--panel-border);
        }
        
        .section-title {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .current-screen-info {
            background: rgba(180, 0, 55, 0.2);
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid rgba(180, 0, 55, 0.3);
        }
        
        .variable-group {
            margin-bottom: 25px;
            border: 1px solid var(--panel-border);
            border-radius: 10px;
            overflow: hidden;
        }
        
        .group-header {
            background: rgba(0, 0, 0, 0.3);
            padding: 12px 15px;
            font-weight: 600;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .group-content {
            padding: 15px;
        }
        
        .variable-row {
            display: grid;
            grid-template-columns: 150px 1fr auto;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
            padding: 8px;
            border-radius: 6px;
            transition: background 0.2s ease;
        }
        
        .variable-row:hover {
            background: rgba(255, 255, 255, 0.05);
        }
        
        .variable-label {
            font-size: 12px;
            color: var(--text-secondary);
            font-family: 'Consolas', monospace;
            font-weight: 500;
        }
        
        .variable-input {
            padding: 8px 12px;
            border: 1px solid var(--panel-border);
            border-radius: 6px;
            background: var(--input-bg);
            color: var(--text-primary);
            font-size: 13px;
            width: 100%;
            transition: all 0.2s ease;
        }
        
        .variable-input:focus {
            outline: none;
            border-color: rgb(180, 0, 55);
            box-shadow: 0 0 0 2px rgba(180, 0, 55, 0.2);
        }
        
        .color-picker {
            width: 32px;
            height: 32px;
            border: 2px solid var(--panel-border);
            border-radius: 6px;
            cursor: pointer;
            background: transparent;
            transition: transform 0.2s ease;
        }
        
        .color-picker:hover {
            transform: scale(1.1);
        }
        
        .preview-content {
            background: rgba(0, 0, 0, 0.3);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid var(--panel-border);
        }
        
        .preview-item {
            margin-bottom: 12px;
            padding: 8px;
            border-radius: 6px;
            background: rgba(255, 255, 255, 0.05);
        }
        
        .status-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            max-width: 300px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }
        
        .status-toast.show {
            transform: translateX(0);
        }
        
        .status-toast.success { background: var(--success-color); }
        .status-toast.error { background: var(--error-color); }
        .status-toast.warning { background: var(--warning-color); color: #000; }
        
        .file-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .stat-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 6px;
            text-align: center;
        }
        
        .stat-value {
            font-size: 18px;
            font-weight: 700;
            color: rgb(180, 0, 55);
        }
        
        .stat-label {
            font-size: 12px;
            color: var(--text-secondary);
            margin-top: 4px;
        }
        
        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
        @media (max-width: 768px) {
            .editor-layout {
                grid-template-columns: 1fr;
            }
            
            .screen-selector {
                gap: 8px;
            }
            
            .screen-btn {
                min-width: 90px;
                padding: 10px 15px;
            }
            
            .variable-row {
                grid-template-columns: 1fr;
                gap: 8px;
            }
            
            .variable-label {
                font-size: 11px;
            }
        }
        
        /* –°–∫—Ä–æ–ª–ª–±–∞—Ä */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }
    </style>
</head>
<body>
    <!-- –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -->
    <div class="status-toast" id="statusToast"></div>
    
    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
    <div class="header">
        <h1>üé® CSS Text Editor</h1>
        <p>–†–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤</p>
        <div class="header-buttons">
            <button class="btn" onclick="loadCSS()">
                <span id="loadIcon">üìÅ</span> –ó–∞–≥—Ä—É–∑–∏—Ç—å CSS
            </button>
            <button class="btn" onclick="saveCSS()">
                <span id="saveIcon">üíæ</span> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button class="btn btn-secondary" onclick="previewChanges()">
                üëÄ –ü—Ä–µ–≤—å—é
            </button>
            <button class="btn btn-secondary" onclick="resetChanges()">
                üîÑ –°–±—Ä–æ—Å
            </button>
        </div>
    </div>
    
    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
    <div class="container">
      <!-- –°–µ–ª–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤ -->
      <div class="screen-selector" style="display: flex; justify-content: center; gap: 15px; margin: 20px 0; padding: 15px; background: rgba(0,0,0,0.2); border-radius: 12px;">
          <button class="screen-btn active" onclick="switchScreen('desktop')" data-screen="desktop" style="background: #b40037; color: white; padding: 12px 20px; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; min-width: 120px;">
              <div style="font-size: 20px;">üñ•Ô∏è</div>
              <div>–ë–æ–ª—å—à–æ–π</div>
              <div style="font-size: 12px; opacity: 0.8;">&gt;768px</div>
          </button>
          <button class="screen-btn" onclick="switchScreen('tablet')" data-screen="tablet" style="background: rgba(255,255,255,0.1); color: #ccc; padding: 12px 20px; border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; cursor: pointer; font-size: 14px; min-width: 120px;">
              <div style="font-size: 20px;">üì±</div>
              <div>–°—Ä–µ–¥–Ω–∏–π</div>
              <div style="font-size: 12px; opacity: 0.8;">375-768px</div>
          </button>
          <button class="screen-btn" onclick="switchScreen('mobile')" data-screen="mobile" style="background: rgba(255,255,255,0.1); color: #ccc; padding: 12px 20px; border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; cursor: pointer; font-size: 14px; min-width: 120px;">
              <div style="font-size: 20px;">üì±</div>
              <div>–ú–∞–ª–µ–Ω—å–∫–∏–π</div>
              <div style="font-size: 12px; opacity: 0.8;">&lt;375px</div>
          </button>
      </div>
        
        <div class="editor-layout">
            <!-- –†–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö -->
            <div class="variables-section">
                <div class="current-screen-info" id="currentScreenInfo">
                    <strong>üì∫ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è:</strong> –ë–æ–ª—å—à–∏–µ —ç–∫—Ä–∞–Ω—ã (>768px)
                </div>
                <div class="section-title">
                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                </div>
                <div id="variablesContainer">
                    <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                        <div class="loading"></div>
                        <p style="margin-top: 10px;">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...</p>
                    </div>
                </div>
            </div>
            
            <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å -->
            <div class="sidebar">
                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ -->
                <div class="info-section">
                    <div class="section-title">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                    <div class="file-stats">
                        <div class="stat-item">
                            <div class="stat-value" id="varCount">0</div>
                            <div class="stat-label">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="fileSize">0</div>
                            <div class="stat-label">–ë–∞–π—Ç</div>
                        </div>
                    </div>
                    <div id="fileInfo">
                        <p style="color: var(--text-secondary); font-size: 13px;">
                            –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                        </p>
                    </div>
                </div>
                
                <!-- –ü—Ä–µ–≤—å—é -->
                <div class="preview-section">
                    <div class="section-title">üëÄ –ü—Ä–µ–≤—å—é —Å—Ç–∏–ª–µ–π</div>
                    <div class="preview-content" id="previewContent">
                        <div class="preview-item">
                            <h1 id="previewH1" style="margin:0; font-size: 24px;">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H1</h1>
                        </div>
                        <div class="preview-item">
                            <h2 id="previewH2" style="margin:0; font-size: 20px;">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H2</h2>
                        </div>
                        <div class="preview-item">
                            <p id="previewBody" style="margin:0;">–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç</p>
                        </div>
                        <div class="preview-item">
                            <small id="previewSmall">–ú–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let allScreenVariables = {
            desktop: {},
            tablet: {},
            mobile: {}
        };
        let currentScreen = 'desktop';
        let originalCSS = '';
        let isLoading = false;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–æ–≤
        const screenConfig = {
            desktop: {
                icon: 'üñ•Ô∏è',
                name: '–ë–æ–ª—å—à–∏–µ —ç–∫—Ä–∞–Ω—ã',
                range: '>768px',
                info: '–ë–æ–ª—å—à–∏–µ —ç–∫—Ä–∞–Ω—ã (>768px)'
            },
            tablet: {
                icon: 'üì±',
                name: '–°—Ä–µ–¥–Ω–∏–µ —ç–∫—Ä–∞–Ω—ã', 
                range: '375-768px',
                info: '–°—Ä–µ–¥–Ω–∏–µ —ç–∫—Ä–∞–Ω—ã (375-768px)'
            },
            mobile: {
                icon: 'üì±',
                name: '–ú–∞–ª–µ–Ω—å–∫–∏–µ —ç–∫—Ä–∞–Ω—ã',
                range: '<375px', 
                info: '–ú–∞–ª–µ–Ω—å–∫–∏–µ —ç–∫—Ä–∞–Ω—ã (<375px)'
            }
        };
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        const variableGroups = {
            'üî§ –®—Ä–∏—Ñ—Ç—ã': {
                icon: 'üî§',
                variables: ['text-font-family', 'font-family']
            },
            'üìè –†–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞': {
                icon: 'üìè',
                variables: ['text-size-h1', 'text-size-h2', 'text-size-h3', 'text-size-body', 'text-size-small', 'text-size-tiny']
            },
            'üé® –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞': {
                icon: 'üé®',
                variables: ['text-color-primary', 'text-color-secondary', 'text-color-muted', 'text-color-white']
            }
        };
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ CSS –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        window.addEventListener('DOMContentLoaded', () => {
            loadCSS();
        });
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
        function switchScreen(screenType) {
            currentScreen = screenType;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.screen-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector(`[data-screen="${screenType}"]`).classList.add('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ
            const config = screenConfig[screenType];
            document.getElementById('currentScreenInfo').innerHTML = 
                `<strong>${config.icon} –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è:</strong> ${config.info}`;
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            createVariableEditors();
            updatePreview();
            
            showToast(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: ${config.name}`, 'success');
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ CSS —Ñ–∞–π–ª–∞
        async function loadCSS() {
            if (isLoading) return;
            
            isLoading = true;
            const loadIcon = document.getElementById('loadIcon');
            loadIcon.innerHTML = '<span class="loading"></span>';
            
            try {
                const response = await fetch('/load-css');
                const data = await response.json();
                
                if (data.success) {
                    allScreenVariables = data.screenVariables;
                    originalCSS = data.content;
                    createVariableEditors();
                    updatePreview();
                    updateStats(data.filename, getTotalVariablesCount(), data.size);
                    showToast('CSS —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                } else {
                    showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + data.error, 'error');
                }
            } catch (error) {
                showToast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
            } finally {
                isLoading = false;
                loadIcon.innerHTML = 'üìÅ';
            }
        }
        
        // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        function getTotalVariablesCount() {
            let total = 0;
            for (const screen in allScreenVariables) {
                total += Object.keys(allScreenVariables[screen]).length;
            }
            return total;
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        function createVariableEditors() {
            const container = document.getElementById('variablesContainer');
            container.innerHTML = '';
            
            const currentVariables = allScreenVariables[currentScreen] || {};
            
            if (Object.keys(currentVariables).length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                        <p>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è ${screenConfig[currentScreen].name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                    </div>
                `;
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
            for (const [groupName, groupData] of Object.entries(variableGroups)) {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'variable-group';
                
                const groupHeader = document.createElement('div');
                groupHeader.className = 'group-header';
                groupHeader.innerHTML = `${groupData.icon} ${groupName}`;
                
                const groupContent = document.createElement('div');
                groupContent.className = 'group-content';
                
                let hasVariables = false;
                
                groupData.variables.forEach(varName => {
                    if (currentVariables[varName]) {
                        const row = createVariableRow(varName, currentVariables[varName]);
                        groupContent.appendChild(row);
                        hasVariables = true;
                    }
                });
                
                if (hasVariables) {
                    groupDiv.appendChild(groupHeader);
                    groupDiv.appendChild(groupContent);
                    container.appendChild(groupDiv);
                }
            }
            
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            const usedVars = Object.values(variableGroups).flatMap(g => g.variables);
            const otherVars = Object.keys(currentVariables).filter(key => !usedVars.includes(key));
            
            if (otherVars.length > 0) {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'variable-group';
                
                const groupHeader = document.createElement('div');
                groupHeader.className = 'group-header';
                groupHeader.innerHTML = 'üîß –î—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ';
                
                const groupContent = document.createElement('div');
                groupContent.className = 'group-content';
                
                otherVars.forEach(varName => {
                    const row = createVariableRow(varName, currentVariables[varName]);
                    groupContent.appendChild(row);
                });
                
                groupDiv.appendChild(groupHeader);
                groupDiv.appendChild(groupContent);
                container.appendChild(groupDiv);
            }
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        function createVariableRow(varName, value) {
            const row = document.createElement('div');
            row.className = 'variable-row';
            
            const isColor = /^(#|rgb|rgba|hsl|hsla)/.test(value.trim());
            
            const label = document.createElement('div');
            label.className = 'variable-label';
            label.textContent = `--${varName}`;
            
            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'variable-input';
            input.value = value;
            input.addEventListener('input', () => updateVariable(varName, input.value));
            
            row.appendChild(label);
            row.appendChild(input);
            
            if (isColor) {
                const colorPicker = document.createElement('input');
                colorPicker.type = 'color';
                colorPicker.className = 'color-picker';
                colorPicker.value = convertToHex(value);
                colorPicker.addEventListener('change', (e) => {
                    input.value = e.target.value;
                    updateVariable(varName, e.target.value);
                });
                row.appendChild(colorPicker);
            } else {
                row.appendChild(document.createElement('div'));
            }
            
            return row;
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –≤ hex
        function convertToHex(color) {
            const rgbaMatch = color.match(/rgba?\(([^)]+)\)/);
            if (rgbaMatch) {
                const values = rgbaMatch[1].split(',').map(v => Math.round(parseFloat(v.trim())));
                if (values[0] <= 1) {
                    values[0] = Math.round(values[0] * 255);
                    values[1] = Math.round(values[1] * 255);
                    values[2] = Math.round(values[2] * 255);
                }
                return `#${values[0].toString(16).padStart(2, '0')}${values[1].toString(16).padStart(2, '0')}${values[2].toString(16).padStart(2, '0')}`;
            }
            return color.startsWith('#') ? color : '#ffffff';
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        function updateVariable(varName, value) {
            if (!allScreenVariables[currentScreen]) {
                allScreenVariables[currentScreen] = {};
            }
            allScreenVariables[currentScreen][varName] = value;
            updatePreview();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é
        function updatePreview() {
            const currentVariables = allScreenVariables[currentScreen] || {};
            
            let cssText = ':root {';
            for (const [key, value] of Object.entries(currentVariables)) {
                cssText += `--${key}: ${value}; `;
            }
            cssText += '}';
            
            const oldStyle = document.getElementById('previewStyle');
            if (oldStyle) oldStyle.remove();
            
            const style = document.createElement('style');
            style.id = 'previewStyle';
            style.textContent = cssText + `
                #previewH1 { font-size: var(--text-size-h1, 32px); color: var(--text-color-primary, white); font-family: var(--text-font-family, 'Segoe UI'); }
                #previewH2 { font-size: var(--text-size-h2, 24px); color: var(--text-color-primary, white); font-family: var(--text-font-family, 'Segoe UI'); }
                #previewBody { font-size: var(--text-size-body, 16px); color: var(--text-color-secondary, white); font-family: var(--text-font-family, 'Segoe UI'); }
                #previewSmall { font-size: var(--text-size-small, 14px); color: var(--text-color-muted, white); font-family: var(--text-font-family, 'Segoe UI'); }
            `;
            document.head.appendChild(style);
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSS
        async function saveCSS() {
            const saveIcon = document.getElementById('saveIcon');
            saveIcon.innerHTML = '<span class="loading"></span>';
            
            try {
                const response = await fetch('/save-css', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({screenVariables: allScreenVariables})
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                } else {
                    showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + data.error, 'error');
                }
            } catch (error) {
                showToast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
            } finally {
                saveIcon.innerHTML = 'üíæ';
            }
        }
        
        // –ü—Ä–µ–≤—å—é –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        function previewChanges() {
            let allCssVars = '';
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSS –¥–ª—è –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤
            const desktopVars = Object.entries(allScreenVariables.desktop || {}).map(([k,v]) => `--${k}: ${v};`).join(' ');
            if (desktopVars) {
                allCssVars += `:root { ${desktopVars} }\n`;
            }
            
            const tabletVars = Object.entries(allScreenVariables.tablet || {}).map(([k,v]) => `--${k}: ${v};`).join(' ');
            if (tabletVars) {
                allCssVars += `@media (max-width: 768px) and (min-width: 375px) { :root { ${tabletVars} } }\n`;
            }
            
            const mobileVars = Object.entries(allScreenVariables.mobile || {}).map(([k,v]) => `--${k}: ${v};`).join(' ');
            if (mobileVars) {
                allCssVars += `@media (max-width: 374px) { :root { ${mobileVars} } }\n`;
            }
            
            const previewHTML = `
                <!DOCTYPE html>
                <html lang="ru">
                <head>
                    <title>–ü—Ä–µ–≤—å—é CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö - –í—Å–µ —ç–∫—Ä–∞–Ω—ã</title>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <style>
                        ${allCssVars}
                        body {
                            font-family: var(--text-font-family, 'Segoe UI');
                            background: linear-gradient(135deg, #b40037, #002682);
                            color: var(--text-color-primary, white);
                            padding: 40px;
                            line-height: 1.6;
                        }
                        .container {
                            max-width: 800px;
                            margin: 0 auto;
                            background: rgba(0, 0, 0, 0.3);
                            padding: 40px;
                            border-radius: 15px;
                        }
                        h1 { font-size: var(--text-size-h1, 32px); color: var(--text-color-primary); margin-bottom: 20px; }
                        h2 { font-size: var(--text-size-h2, 24px); color: var(--text-color-primary); margin-bottom: 16px; }
                        h3 { font-size: var(--text-size-h3, 20px); color: var(--text-color-primary); margin-bottom: 12px; }
                        p { font-size: var(--text-size-body, 16px); color: var(--text-color-secondary); margin-bottom: 16px; }
                        small { font-size: var(--text-size-small, 14px); color: var(--text-color-muted); }
                        .screen-indicator {
                            position: fixed;
                            top: 20px;
                            right: 20px;
                            background: rgba(0, 0, 0, 0.8);
                            color: white;
                            padding: 10px 15px;
                            border-radius: 8px;
                            font-size: 14px;
                        }
                    </style>
                </head>
                <body>
                    <div class="screen-indicator" id="screenIndicator">üñ•Ô∏è Desktop</div>
                    <div class="container">
                        <h1>üé® –ü—Ä–µ–≤—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∏–ª–µ–π</h1>
                        <h2>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è</h2>
                        <h3>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è</h3>
                        <p>–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞. –ò–∑–º–µ–Ω–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Ä–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.</p>
                        <p><small>–ú–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç —Ç–∞–∫–∂–µ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞.</small></p>
                    </div>
                    
                    <script>
                        function updateScreenIndicator() {
                            const indicator = document.getElementById('screenIndicator');
                            const width = window.innerWidth;
                            
                            if (width > 768) {
                                indicator.textContent = 'üñ•Ô∏è Desktop (>768px)';
                            } else if (width >= 375) {
                                indicator.textContent = 'üì± Tablet (375-768px)';
                            } else {
                                indicator.textContent = 'üì± Mobile (<375px)';
                            }
                        }
                        
                        updateScreenIndicator();
                        window.addEventListener('resize', updateScreenIndicator);
                    </script>
                </body>
                </html>
            `;
            
            const newWindow = window.open('', '_blank');
            newWindow.document.write(previewHTML);
            newWindow.document.close();
            
            showToast('–ü—Ä–µ–≤—å—é –æ—Ç–∫—Ä—ã—Ç–æ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ', 'success');
        }
        
        // –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
        function resetChanges() {
            if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é?')) {
                loadCSS();
                showToast('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã', 'warning');
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        function updateStats(filename, varCount, fileSize) {
            document.getElementById('varCount').textContent = varCount;
            document.getElementById('fileSize').textContent = fileSize || 'N/A';
            document.getElementById('fileInfo').innerHTML = `
                <p style="font-size: 13px; margin-bottom: 8px;">
                    <strong>üìÑ –§–∞–π–ª:</strong> ${filename}
                </p>
                <p style="font-size: 13px; color: var(--success-color);">
                    ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
                </p>
            `;
        }
        
        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        function showToast(message, type = 'success') {
            const toast = document.getElementById('statusToast');
            toast.textContent = message;
            toast.className = `status-toast ${type} show`;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }
    </script>
</body>
</html>
"""

class CSSWebEditor:
    def __init__(self):
        self.css_file_path = self.find_css_file()
        self.screen_variables = {
            'desktop': {},
            'tablet': {},
            'mobile': {}
        }
        self.original_content = ""
        
    def find_css_file(self):
        """–ü–æ–∏—Å–∫ text.css —Ñ–∞–π–ª–∞"""
        possible_paths = [
            "./src/Styles/text.css",
            "./Styles/text.css", 
            "./text.css",
            "../src/Styles/text.css",
            "../../src/Styles/text.css"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                safe_print(f"–ù–∞–π–¥–µ–Ω CSS —Ñ–∞–π–ª: {path}")
                return path
                
        safe_print("CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
        return None
    
    def parse_css_variables(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤"""
        if not self.css_file_path:
            return {}
            
        try:
            with open(self.css_file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                self.original_content = content
            
            # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ :root (desktop)
            root_pattern = r':root\s*\{([^}]+)\}'
            root_match = re.search(root_pattern, content, re.DOTALL)
            
            if root_match:
                root_content = root_match.group(1)
                var_pattern = r'--([^:]+):\s*([^;]+);'
                variables = re.findall(var_pattern, root_content)
                self.screen_variables['desktop'] = {k.strip(): v.strip() for k, v in variables}
                safe_print(f"–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤: {len(self.screen_variables['desktop'])}")
            
            # –ü–∞—Ä—Å–∏–º –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ (tablet)
            tablet_pattern = r'@media\s*\([^{]*max-width:\s*768px[^{]*min-width:\s*375px[^{]*\)[^{]*\{[^{]*:root\s*\{([^}]+)\}'
            tablet_match = re.search(tablet_pattern, content, re.DOTALL)
            
            if tablet_match:
                tablet_content = tablet_match.group(1)
                var_pattern = r'--([^:]+):\s*([^;]+);'
                variables = re.findall(var_pattern, tablet_content)
                self.screen_variables['tablet'] = {k.strip(): v.strip() for k, v in variables}
                safe_print(f"–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤: {len(self.screen_variables['tablet'])}")
            
            # –ü–∞—Ä—Å–∏–º –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ (mobile)
            mobile_pattern = r'@media\s*\([^{]*max-width:\s*374px[^{]*\)[^{]*\{[^{]*:root\s*\{([^}]+)\}'
            mobile_match = re.search(mobile_pattern, content, re.DOTALL)
            
            if mobile_match:
                mobile_content = mobile_match.group(1)
                var_pattern = r'--([^:]+):\s*([^;]+);'
                variables = re.findall(var_pattern, mobile_content)
                self.screen_variables['mobile'] = {k.strip(): v.strip() for k, v in variables}
                safe_print(f"–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤: {len(self.screen_variables['mobile'])}")
                
            return self.screen_variables
        except Exception as e:
            safe_print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSS: {e}")
            return {}
    
    def save_css_variables(self, screen_variables):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤"""
        if not self.css_file_path:
            return False
            
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É backup_text –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            css_dir = os.path.dirname(self.css_file_path)
            backup_dir = os.path.join(css_dir, 'backup_text')
            
            if not os.path.exists(backup_dir):
                os.makedirs(backup_dir)
                safe_print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è backup: {backup_dir}")
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –≤ –ø–∞–ø–∫–µ backup_text
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"text.css.backup_{timestamp}"
            backup_path = os.path.join(backup_dir, backup_filename)
            
            shutil.copy2(self.css_file_path, backup_path)
            safe_print(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
            
            content = self.original_content
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ :root (desktop)
            if 'desktop' in screen_variables:
                def replace_desktop_root(match):
                    start = match.group(0).split('{')[0] + '{'
                    end = '}'
                    
                    new_vars = []
                    for var_name, var_value in screen_variables['desktop'].items():
                        new_vars.append(f"  --{var_name}: {var_value};")
                    
                    new_content = "\n" + "\n".join(new_vars) + "\n"
                    return start + new_content + end
                
                root_pattern = r':root\s*\{[^}]+\}'
                content = re.sub(root_pattern, replace_desktop_root, content, flags=re.DOTALL)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
            if 'tablet' in screen_variables:
                def replace_tablet_root(match):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å –∏ –Ω–∞—á–∞–ª–æ
                    media_part = match.group(0).split(':root')[0] + ':root {'
                    end = '}\n}'
                    
                    new_vars = []
                    for var_name, var_value in screen_variables['tablet'].items():
                        new_vars.append(f"  --{var_name}: {var_value};")
                    
                    new_content = "\n" + "\n".join(new_vars) + "\n"
                    return media_part + new_content + end
                
                tablet_pattern = r'@media\s*\([^{]*max-width:\s*768px[^{]*min-width:\s*375px[^{]*\)[^{]*\{[^{]*:root\s*\{[^}]+\}\s*\}'
                content = re.sub(tablet_pattern, replace_tablet_root, content, flags=re.DOTALL)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
            if 'mobile' in screen_variables:
                def replace_mobile_root(match):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å –∏ –Ω–∞—á–∞–ª–æ
                    media_part = match.group(0).split(':root')[0] + ':root {'
                    end = '}\n}'
                    
                    new_vars = []
                    for var_name, var_value in screen_variables['mobile'].items():
                        new_vars.append(f"  --{var_name}: {var_value};")
                    
                    new_content = "\n" + "\n".join(new_vars) + "\n"
                    return media_part + new_content + end
                
                mobile_pattern = r'@media\s*\([^{]*max-width:\s*374px[^{]*\)[^{]*\{[^{]*:root\s*\{[^}]+\}\s*\}'
                content = re.sub(mobile_pattern, replace_mobile_root, content, flags=re.DOTALL)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(self.css_file_path, 'w', encoding='utf-8') as file:
                file.write(content)
                
            self.original_content = content
            safe_print(f"CSS —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.css_file_path}")
            return True
            
        except Exception as e:
            safe_print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

def open_browser_delayed():
    """–û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    time.sleep(2)
    try:
        webbrowser.open('http://localhost:5000')
        safe_print("–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç: http://localhost:5000")
    except Exception as e:
        safe_print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
editor = CSSWebEditor()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/load-css')
def load_css():
    """–ó–∞–≥—Ä—É–∑–∫–∞ CSS —Ñ–∞–π–ª–∞"""
    screen_variables = editor.parse_css_variables()
    
    if any(screen_variables.values()):
        file_size = os.path.getsize(editor.css_file_path) if editor.css_file_path else 0
        return jsonify({
            'success': True,
            'screenVariables': screen_variables,
            'content': editor.original_content,
            'filename': os.path.basename(editor.css_file_path) if editor.css_file_path else 'text.css',
            'size': file_size
        })
    else:
        return jsonify({
            'success': False,
            'error': 'CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö'
        })

@app.route('/save-css', methods=['POST'])
def save_css():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSS —Ñ–∞–π–ª–∞"""
    try:
        data = request.get_json()
        screen_variables = data.get('screenVariables', {})
        
        success = editor.save_css_variables(screen_variables)
        
        return jsonify({
            'success': success,
            'error': None if success else '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

if __name__ == '__main__':
    safe_print("–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ CSS Text Editor...")
    safe_print("–ü–æ–∏—Å–∫ text.css —Ñ–∞–π–ª–∞...")
    
    if editor.css_file_path:
        safe_print(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {editor.css_file_path}")
    else:
        safe_print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è")
    
    safe_print("")
    safe_print("–í–µ–±-—Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:")
    safe_print("   http://localhost:5000")
    safe_print("")
    safe_print("–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    safe_print("   üì± –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    safe_print("   üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–≤—å—é")
    safe_print("   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤")
    safe_print("")
    safe_print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    safe_print("-" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    browser_thread = threading.Thread(target=open_browser_delayed, daemon=True)
    browser_thread.start()
    
    app.run(debug=False, port=5000, host='0.0.0.0')