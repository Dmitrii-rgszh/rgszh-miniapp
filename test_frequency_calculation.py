#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–π —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from justincase_calculator import JustInCaseCalculator, calculate_premium

def test_frequency_calculations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—è–º–∏"""
    
    print("üßÆ === –¢–ï–°–¢ –†–ê–°–ß–ï–¢–ê –ü–†–ï–ú–ò–ô –° –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê–ú–ò –ü–ï–†–ò–û–î–ò–ß–ù–û–°–¢–ò ===\n")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'age': 30,
        'gender': 'm',
        'term_years': 10,
        'sum_insured': 2000000,
        'include_accident': True,
        'include_critical_illness': True,
        'critical_illness_type': 'rf'
    }
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    frequency_tests = [
        ('annual', '–ï–∂–µ–≥–æ–¥–Ω–æ', 1.0000),
        ('semi_annual', '–†–∞–∑ –≤ –ø–æ–ª–≥–æ–¥–∞', 0.5100),
        ('quarterly', '–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ', 0.2575),
        ('monthly', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ', 0.0867)
    ]
    
    print(f"–¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"  –í–æ–∑—Ä–∞—Å—Ç: {test_data['age']} –ª–µ—Ç")
    print(f"  –ü–æ–ª: {'–º—É–∂—Å–∫–æ–π' if test_data['gender'] == 'm' else '–∂–µ–Ω—Å–∫–∏–π'}")
    print(f"  –°—Ä–æ–∫: {test_data['term_years']} –ª–µ—Ç")
    print(f"  –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {test_data['sum_insured']:,} —Ä—É–±")
    print(f"  –ù–°: {'–¥–∞' if test_data['include_accident'] else '–Ω–µ—Ç'}")
    print(f"  –ö–ó: {'–¥–∞' if test_data['include_critical_illness'] else '–Ω–µ—Ç'}")
    print(f"  –¢–∏–ø –ö–ó: {test_data['critical_illness_type']}")
    print("\n" + "="*80 + "\n")
    
    results = {}
    
    for freq_key, freq_name, expected_coeff in frequency_tests:
        print(f"üìä {freq_name} (–æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {expected_coeff})")
        print("-" * 60)
        
        try:
            result = calculate_premium(
                **test_data,
                payment_frequency=freq_key
            )
            
            if result['success']:
                results[freq_key] = result
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                print(f"‚úÖ –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω")
                print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ –ë–î: {result.get('frequency_coefficient', 'N/A')}")
                print(f"   –ü–ª–∞—Ç–µ–∂–µ–π –≤ –≥–æ–¥: {result.get('payments_per_year', 'N/A')}")
                print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞—Ç–µ–∂–∞: {result.get('per_payment_coefficient', 'N/A')}")
                
                # –ì–æ–¥–æ–≤—ã–µ –ø—Ä–µ–º–∏–∏ –ø–æ —Ä–∏—Å–∫–∞–º
                print(f"\nüìà –ì–æ–¥–æ–≤—ã–µ –ø—Ä–µ–º–∏–∏ –ø–æ —Ä–∏—Å–∫–∞–º:")
                if 'premium_by_risk' in result:
                    pbr = result['premium_by_risk']
                    print(f"   –°–º–µ—Ä—Ç—å: {pbr.get('death', 0):,.2f} —Ä—É–±")
                    print(f"   –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {pbr.get('disability', 0):,.2f} —Ä—É–±")
                    print(f"   –ù–°: {pbr.get('accident', 0):,.2f} —Ä—É–±")
                    print(f"   –ö–ó: {pbr.get('critical', 0):,.2f} —Ä—É–±")
                    print(f"   –ë–∞–∑–æ–≤–∞—è (—Å–º–µ—Ä—Ç—å+–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å): {pbr.get('base', 0):,.2f} —Ä—É–±")
                
                # –°—É–º–º—ã –∑–∞ –æ–¥–∏–Ω –ø–ª–∞—Ç–µ–∂
                print(f"\nüí∞ –°—É–º–º—ã –∑–∞ –æ–¥–∏–Ω –ø–ª–∞—Ç–µ–∂:")
                if 'per_payment_breakdown' in result:
                    ppb = result['per_payment_breakdown']
                    print(f"   –°–º–µ—Ä—Ç—å: {ppb.get('death', 0):,.2f} —Ä—É–±")
                    print(f"   –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {ppb.get('disability', 0):,.2f} —Ä—É–±")
                    print(f"   –ù–°: {ppb.get('accident', 0):,.2f} —Ä—É–±")
                    print(f"   –ö–ó: {ppb.get('critical', 0):,.2f} —Ä—É–±")
                    print(f"   –ò—Ç–æ–≥–æ –∑–∞ –ø–ª–∞—Ç–µ–∂: {ppb.get('total', 0):,.2f} —Ä—É–±")
                
                # –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
                print(f"\nüéØ –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã:")
                print(f"   –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {result.get('base_premium', 0):,.2f} —Ä—É–±")
                print(f"   –ü—Ä–µ–º–∏—è –ù–°: {result.get('accident_premium', 0):,.2f} —Ä—É–±") 
                print(f"   –ü—Ä–µ–º–∏—è –ö–ó: {result.get('critical_illness_premium', 0):,.2f} —Ä—É–±")
                print(f"   –ì–æ–¥–æ–≤–∞—è –¥–æ —á–∞—Å—Ç–æ—Ç—ã: {result.get('total_annual_premium', 0):,.2f} —Ä—É–±")
                print(f"   –ò–¢–û–ì–û –ö –î–û–ü–õ–ê–¢–ï: {result.get('final_premium', 0):,.2f} —Ä—É–±")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            import traceback
            traceback.print_exc()
        
        print("\n" + "="*80 + "\n")
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if len(results) > 1:
        print("üìã –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 100)
        
        header = f"{'–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å':<15} {'–ö–æ—ç—Ñ—Ñ.':<8} {'–ü–ª–∞—Ç–µ–∂–µ–π':<10} {'–ó–∞ –ø–ª–∞—Ç–µ–∂':<12} {'–ì–æ–¥–æ–≤–∞—è':<12} {'–î–æ–ø–ª–∞—Ç–∞':<10}"
        print(header)
        print("-" * 100)
        
        base_annual = results.get('annual', {}).get('final_premium', 0)
        
        for freq_key, freq_name, expected_coeff in frequency_tests:
            if freq_key in results:
                r = results[freq_key]
                final = r.get('final_premium', 0)
                per_payment = r.get('per_payment_breakdown', {}).get('total', 0)
                freq_coeff = r.get('frequency_coefficient', 0)
                payments = r.get('payments_per_year', 0)
                markup = ((final / base_annual - 1) * 100) if base_annual > 0 else 0
                
                row = f"{freq_name:<15} {freq_coeff:<8.4f} {payments:<10} {per_payment:<12,.0f} {final:<12,.0f} {markup:<10.1f}%"
                print(row)
        
        print("-" * 100)

if __name__ == "__main__":
    test_frequency_calculations()
