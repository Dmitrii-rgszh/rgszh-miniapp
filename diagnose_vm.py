#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ VM
"""

import requests
from urllib3 import disable_warnings
from urllib3.exceptions import InsecureRequestWarning

disable_warnings(InsecureRequestWarning)

def diagnose_vm_deployment():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º, –≥–¥–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ VM"""
    
    vm_ip = "176.108.243.189"
    
    print("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===")
    print(f"üñ•Ô∏è VM: {vm_ip}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    try:
        health_response = requests.get(f"https://{vm_ip}/api/justincase/health", 
                                     timeout=10, verify=False)
        if health_response.status_code == 200:
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            health_data = health_response.json()
            print(f"üìä –°—Ç–∞—Ç—É—Å: {health_data.get('status')}")
            print(f"üìã –ë–î: {health_data.get('database_connected')}")
            print(f"üóÉÔ∏è –¢–∞—Ä–∏—Ñ–æ–≤: {health_data.get('tariffs_loaded')}")
        else:
            print(f"‚ö†Ô∏è Health check: {health_response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
    
    print()
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ü–û–ò–°–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    print()
    print("1. –ù–∞–π—Ç–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:")
    print("   docker ps")
    print()
    print("2. –ù–∞–π—Ç–∏ –≤—Å–µ Docker Compose —Ñ–∞–π–ª—ã:")
    print("   find / -name 'docker-compose.yml' -type f 2>/dev/null")
    print()
    print("3. –ù–∞–π—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:")
    print("   find / -name '*miniapp*' -type d 2>/dev/null")
    print("   find / -name '*rgszh*' -type d 2>/dev/null")
    print()
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    print("   ls -la /home/")
    print("   ls -la /root/")
    print("   ls -la /var/www/")
    print("   ls -la /srv/")
    print()
    print("5. –ù–∞–π—Ç–∏ –æ–±—Ä–∞–∑—ã Docker:")
    print("   docker images | grep miniapp")
    print("   docker images | grep rgszh")
    print()
    print("üìå –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("- –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã zerotlt/rgszh-miniapp-server –∏ zerotlt/rgszh-miniapp-client")
    print("- docker-compose.yml —Ñ–∞–π–ª –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    print("- –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: /home/admin/miniapp, /root/miniapp, /srv/miniapp")
    print()
    print("üîß –ü–û–°–õ–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –î–ò–†–ï–ö–¢–û–†–ò–ò:")
    print("cd [–Ω–∞–π–¥–µ–Ω–Ω–∞—è_–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è]")
    print("docker-compose down --remove-orphans")
    print("docker pull zerotlt/rgszh-miniapp-server:latest")
    print("docker pull zerotlt/rgszh-miniapp-client:latest")
    print("docker-compose up -d")

if __name__ == "__main__":
    diagnose_vm_deployment()
