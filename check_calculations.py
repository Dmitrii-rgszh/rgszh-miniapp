#!/usr/bin/env python3
# simple_check_db.py - –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î

import psycopg2
from datetime import datetime

# –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn_string = "postgresql://postgres:secret@176.109.110.217:1112/postgres"

try:
    print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
    conn = psycopg2.connect(conn_string)
    cur = conn.cursor()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'nsj_calculations'
        );
    """)
    table_exists = cur.fetchone()[0]
    
    if not table_exists:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ nsj_calculations –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!")
        print("–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ init_nsj_database()")
    else:
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ nsj_calculations —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n")
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
        cur.execute("SELECT COUNT(*) FROM nsj_calculations")
        count = cur.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ –ë–î: {count}")
        
        if count == 0:
            print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ù–ï–¢ —Ä–∞—Å—á–µ—Ç–æ–≤!")
            print("üí° –°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—á–µ—Ç—ã:")
            cur.execute("""
                SELECT calculation_uuid, email, created_at, age_at_start, 
                       contract_term, premium_amount
                FROM nsj_calculations 
                ORDER BY created_at DESC 
                LIMIT 5
            """)
            
            for row in cur.fetchall():
                uuid, email, created, age, term, premium = row
                print(f"\nID: {uuid[:8]}...")
                print(f"Email: {email}")
                print(f"–î–∞—Ç–∞: {created}")
                print(f"–í–æ–∑—Ä–∞—Å—Ç: {age}, –°—Ä–æ–∫: {term} –ª–µ—Ç")
                print(f"–ü—Ä–µ–º–∏—è: {premium:,} —Ä—É–±")
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        search_id = "531eec5e-b788-45e4-9caa-10f27b2199aa"
        print(f"\nüîé –ò—â–µ–º —Ä–∞—Å—á–µ—Ç {search_id[:8]}...")
        
        cur.execute("""
            SELECT * FROM nsj_calculations 
            WHERE calculation_uuid = %s
        """, (search_id,))
        
        if cur.fetchone():
            print("‚úÖ –†–∞—Å—á–µ—Ç –Ω–∞–π–¥–µ–Ω!")
        else:
            print("‚ùå –†–∞—Å—á–µ—Ç –ù–ï –Ω–∞–π–¥–µ–Ω!")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ yearly_income
        cur.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'nsj_calculations' 
            AND column_name = 'yearly_income'
        """)
        
        if cur.fetchone():
            print("\n‚úÖ –ö–æ–ª–æ–Ω–∫–∞ yearly_income —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("\n‚ùå –ö–æ–ª–æ–Ω–∫–∞ yearly_income –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    cur.close()
    conn.close()
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
except psycopg2.OperationalError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î –Ω–∞ 176.109.110.217:1112")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()