import os
import sys
from flask import Flask

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
os.environ['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///miniapp_local.db'
os.environ['DATABASE_URL'] = 'sqlite:///miniapp_local.db'

from db_saver import init_db, db
from questionnaire_models import Questionnaire, Question, QuestionOption, create_questionnaire, add_question_to_questionnaire

def create_local_assessment_questionnaire():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    app = Flask(__name__)
    init_db(app)
    
    with app.app_context():
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–ø—Ä–æ—Å–Ω–∏–∫
            existing = db.session.query(Questionnaire).filter_by(id=1).first()
            if existing:
                print(f"üìã –û–ø—Ä–æ—Å–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing.title} (ID: {existing.id})")
                return existing.id
                
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫
            questionnaire = create_questionnaire(
                title="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
                description="–û—Ü–µ–Ω–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π",
                category="assessment",
                created_by="local_init",
                max_time_minutes=30,
                randomize_questions=False,
                randomize_options=True
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å–Ω–∏–∫: {questionnaire.title} (ID: {questionnaire.id})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            test_questions = [
                {
                    "text": "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –≤–∞–º –±–ª–∏–∂–µ?",
                    "options": [
                        {"text": "–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É—Å—Ç–æ–π—á–∏–≤—É—é —Å–∏—Å—Ç–µ–º—É", "score_type": "innovator", "score_value": 2},
                        {"text": "–ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã –∏ —Ç—Ä–µ–±—É—é—Ç –≥–∏–±–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞", "score_type": "optimizer", "score_value": 1},
                        {"text": "–ö–æ–≥–¥–∞ –µ—Å—Ç—å —á–µ—Ç–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞", "score_type": "executor", "score_value": 0}
                    ]
                },
                {
                    "text": "–ö–æ–≥–¥–∞ –∫–æ–ª–ª–µ–≥–∞ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π –≤ —Ä–∞–±–æ—Ç–µ, –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è:",
                    "options": [
                        {"text": "–ü–æ–Ω—è—Ç—å, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –≤–º–µ—Å—Ç–µ –Ω–∞–π—Ç–∏ –ø—É—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "score_type": "innovator", "score_value": 2},
                        {"text": "–í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–ª–∞–Ω—ã —Å —É—á—ë—Ç–æ–º –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–æ–±–ª–µ–º", "score_type": "optimizer", "score_value": 1},
                        {"text": "–°–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –¥–ª—è —Å–µ–±—è –∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –º–æ—é —Ä–∞–±–æ—Ç—É", "score_type": "executor", "score_value": 0}
                    ]
                },
                {
                    "text": "–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–º—É –æ–±—Å—É–∂–¥–µ–Ω–∏—é —Å–ø–æ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤?",
                    "options": [
                        {"text": "–≠—Ç–æ –≤–∞–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∞–π—Ç–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –∏ —É–ª—É—á—à–∏—Ç—å –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "score_type": "innovator", "score_value": 2},
                        {"text": "–ü–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "score_type": "optimizer", "score_value": 1},
                        {"text": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ –≤–æ–≤–ª–µ–∫–∞—Ç—å—Å—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –º–æ—é –∑–æ–Ω—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "score_type": "executor", "score_value": 0}
                    ]
                },
                {
                    "text": "–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –ø–æ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ?",
                    "options": [
                        {"text": "–°—á–∏—Ç–∞—é –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã", "score_type": "innovator", "score_value": 2},
                        {"text": "–í—ã—Å–ª—É—à–∏–≤–∞—é, –Ω–æ –º–µ–Ω—è—é –ø–æ–¥—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏", "score_type": "optimizer", "score_value": 1},
                        {"text": "–ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã", "score_type": "executor", "score_value": 0}
                    ]
                },
                {
                    "text": "–ö–ª–∏–µ–Ω—Ç –≤—ã—Ä–∞–∂–∞–µ—Ç –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∞–µ—Ç–µ?",
                    "options": [
                        {"text": "–ü—ã—Ç–∞—é—Å—å –ø–æ–Ω—è—Ç—å, –≥–¥–µ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è, –∏ –Ω–∞–π—Ç–∏ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "score_type": "innovator", "score_value": 2},
                        {"text": "–°–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏–≤–∞—é –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏–π, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è—é –¥–µ—Ç–∞–ª–∏", "score_type": "optimizer", "score_value": 1},
                        {"text": "–ï—Å–ª–∏ –≤—Å—ë —Å–¥–µ–ª–∞–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—è–º, —Å—á–∏—Ç–∞—é, —á—Ç–æ –º–æ—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "score_type": "executor", "score_value": 0}
                    ]
                }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
            for i, q_data in enumerate(test_questions, 1):
                question = add_question_to_questionnaire(
                    questionnaire_id=questionnaire.id,
                    text=q_data['text'],
                    options=q_data['options'],
                    order_index=i,
                    question_type='single_choice',
                    is_required=True
                )
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å {i}: {q_data['text'][:50]}...")
            
            print(f"üéâ –û–ø—Ä–æ—Å–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å {len(test_questions)} –≤–æ–ø—Ä–æ—Å–∞–º–∏!")
            return questionnaire.id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            db.session.rollback()
            raise

if __name__ == "__main__":
    questionnaire_id = create_local_assessment_questionnaire()
    print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ID –æ–ø—Ä–æ—Å–Ω–∏–∫–∞: {questionnaire_id}")
