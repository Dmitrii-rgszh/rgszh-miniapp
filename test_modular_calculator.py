#!/usr/bin/env python3
# test_modular_calculator.py
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏

print("üß™ === –¢–ï–°–¢ –ú–û–î–£–õ–¨–ù–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê ===")

try:
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    print("\nüì¶ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê –ú–û–î–£–õ–ï–ô:")
    
    try:
        from frequency_coefficients import get_frequency_coefficient, get_frequency_info
        print("   ‚úÖ frequency_coefficients - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"   ‚ùå frequency_coefficients - –æ—à–∏–±–∫–∞: {e}")
    
    try:
        from tariffs import calculate_accident_premium, get_all_tariffs_info
        print("   ‚úÖ tariffs - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"   ‚ùå tariffs - –æ—à–∏–±–∫–∞: {e}")
    
    try:
        from actuarial_tables import get_life_tariff, calculate_life_premium
        print("   ‚úÖ actuarial_tables - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"   ‚ùå actuarial_tables - –æ—à–∏–±–∫–∞: {e}")
    
    try:
        from justincase_calculator import JustincaseCalculatorComplete
        print("   ‚úÖ justincase_calculator - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"   ‚ùå justincase_calculator - –æ—à–∏–±–∫–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –º–æ–¥—É–ª–µ–π —Å–æ–∑–¥–∞–Ω—ã –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
        exit(1)
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    print("\nüìä –¢–ï–°–¢ –ú–û–î–£–õ–Ø –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í:")
    
    frequency_info = get_frequency_info()
    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {frequency_info['source']}")
    
    for freq, coeff in frequency_info['coefficients'].items():
        markup = frequency_info['markup_percentages'][freq]
        print(f"   {freq}: {coeff} ({markup})")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∞–∫—Ç—É–∞—Ä–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    print("\nüí∞ –¢–ï–°–¢ –ú–û–î–£–õ–Ø –ê–ö–¢–£–ê–†–ù–´–• –¢–ê–ë–õ–ò–¶:")
    
    test_cases = [
        (25, 'male', 10),
        (30, 'female', 15),
        (42, 'male', 12)  # —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
    ]
    
    for age, gender, term in test_cases:
        tariff = get_life_tariff(age, gender, term)
        life_result = calculate_life_premium(age, gender, term, 2000000)
        print(f"   {age} –ª–µ—Ç, {gender}, {term} –ª–µ—Ç: —Ç–∞—Ä–∏—Ñ {tariff:.3f}, –ø—Ä–µ–º–∏—è {life_result['life_premium']:,.2f} —Ä—É–±")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Ç–∞—Ä–∏—Ñ–æ–≤
    print("\nüí• –¢–ï–°–¢ –ú–û–î–£–õ–Ø –¢–ê–†–ò–§–û–í:")
    
    accident_result = calculate_accident_premium(2000000, 1.04, sport_included=True)
    print(f"   –ù–° (—Å–æ —Å–ø–æ—Ä—Ç–æ–º): {accident_result['total_accident_premium']:,.2f} —Ä—É–±")
    print(f"   –°–ø–æ—Ä—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {accident_result['sport_coefficient']} (+{accident_result['sport_markup']}%)")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    print("\nüöÄ –¢–ï–°–¢ –û–°–ù–û–í–ù–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê:")
    
    calculator = JustincaseCalculatorComplete()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
    info = calculator.get_calculator_info()
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
    print(f"   –í–µ—Ä—Å–∏—è: {info['version']}")
    print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {info['architecture']}")
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    print("\nüßÆ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –†–ê–°–ß–ï–¢–ê:")
    
    test_data = {
        'birthDate': '1990-01-01',
        'gender': 'male',
        'insuranceInfo': 'yes',
        'insuranceTerm': '10',
        'insuranceSum': '2000000',
        'insuranceFrequency': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
        'accidentPackage': True,
        'criticalPackage': True,
        'treatmentRegion': 'abroad',
        'sportPackage': False
    }
    
    result = calculator.calculate_full_program(test_data)
    
    if result['success']:
        print(f"   ‚úÖ –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω")
        print(f"   –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {result['basePremium']:,.2f} —Ä—É–±")
        print(f"   –ù–° –ø—Ä–µ–º–∏—è: {result['accidentPremium']:,.2f} —Ä—É–±")
        print(f"   –ö–ó –ø—Ä–µ–º–∏—è: {result['criticalPremium']:,.2f} —Ä—É–±")
        print(f"   –ò–¢–û–ì–û: {result['annualPremium']:,.2f} —Ä—É–±")
        print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã: {result['frequency_coefficient']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {result['error']}")
    
    # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í:")
    
    base_premium = 50000
    
    expected_coefficients = {
        '–ï–∂–µ–≥–æ–¥–Ω–æ': 1.0,
        '–ü–æ–ª—É–≥–æ–¥–∏–µ': 1.02,
        '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ': 1.03,
        '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': 1.04
    }
    
    all_correct = True
    
    for frequency, expected_coeff in expected_coefficients.items():
        actual_coeff = get_frequency_coefficient(frequency)
        is_correct = abs(actual_coeff - expected_coeff) < 0.001
        
        if is_correct:
            print(f"   ‚úÖ {frequency}: {actual_coeff} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_coeff})")
        else:
            print(f"   ‚ùå {frequency}: {actual_coeff} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_coeff})")
            all_correct = False
    
    # 8. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\nüéØ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    
    if all_correct and result.get('success', False):
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("üìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ä—ã–π justincase_calculator.py –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π")
        print("   2. –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç:")
        print("      - frequency_coefficients.py")
        print("      - tariffs.py") 
        print("      - actuarial_tables.py")
        print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
        print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ Telegram Miniapp")
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        if not all_correct:
            print("   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏")
        if not result.get('success', False):
            print("   - –†–∞–±–æ—Ç—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
    
    print("\nüìã –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ú–û–î–£–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
    print("   üîç –õ–µ–≥–∫–æ –¥–µ–±–∞–∂–∏—Ç—å - –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å")
    print("   ‚ö° –ë—ã—Å—Ç—Ä–æ –æ–±–Ω–æ–≤–ª—è—Ç—å - –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
    print("   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ")
    print("   üìñ –ß–∏—Ç–∞–µ–º—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥")
    print("   üîß –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ")

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —Å–æ–∑–¥–∞–Ω—ã:")
    print("   - frequency_coefficients.py")
    print("   - tariffs.py")
    print("   - actuarial_tables.py")
    print("   - justincase_calculator.py (–º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "="*60)
print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")