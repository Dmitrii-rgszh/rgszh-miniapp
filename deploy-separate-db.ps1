# deploy-separate-db.ps1 - PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è RGSZH MiniApp —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –ë–î
# –†–ê–ó–î–ï–õ–ï–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ë–î –æ—Ç–¥–µ–ª—å–Ω–æ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ

param(
    [switch]$SkipBuild,
    [switch]$SkipCopy,
    [switch]$SkipDeploy,
    [switch]$ForceConfig,
    [switch]$Verbose,
    [switch]$DeployDB,
    [switch]$DeployApp
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
$VM_USER = "admin"
$VM_HOST = "176.109.109.47"
$DOCKER_REGISTRY = "zerotlt"
$PROJECT_NAME = "rgszh-miniapp"
$DB_PROJECT_NAME = "postgres-db"
$APP_PROJECT_NAME = "rgszh-app"
$SOCKET_URL = "https://rgszh-miniapp.org"

# SSH –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
$SSH_OPTIONS = "-o ServerAliveInterval=30 -o ServerAliveCountMax=5 -o ConnectTimeout=30 -o TCPKeepAlive=yes"

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
$DEPLOY_TAG = (Get-Date -Format "yyyyMMdd-HHmmss")

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Red = "Red"
    Green = "Green"
    Yellow = "Yellow"
    Blue = "Cyan"
    Gray = "Gray"
}

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Color = "White")
    $timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-Log "‚úÖ $Message" -Color $Colors.Green
}

function Write-Error {
    param([string]$Message)
    Write-Log "‚ùå $Message" -Color $Colors.Red
}

function Write-Warning {
    param([string]$Message)
    Write-Log "‚ö†Ô∏è $Message" -Color $Colors.Yellow
}

function Write-Info {
    param([string]$Message)
    Write-Log "‚ÑπÔ∏è $Message" -Color $Colors.Blue
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
function Invoke-WithRetry {
    param(
        [string]$Command,
        [int]$MaxAttempts = 3,
        [int]$DelaySeconds = 5
    )
    
    for ($i = 1; $i -le $MaxAttempts; $i++) {
        try {
            if ($Verbose) { Write-Info "–ü–æ–ø—ã—Ç–∫–∞ $i –∏–∑ ${MaxAttempts}: $Command" }
            Invoke-Expression $Command
            
            if ($LASTEXITCODE -eq 0) {
                return $true
            }
            
            if ($i -lt $MaxAttempts) {
                Write-Warning "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ $DelaySeconds —Å–µ–∫—É–Ω–¥..."
                Start-Sleep -Seconds $DelaySeconds
            }
        } catch {
            if ($i -lt $MaxAttempts) {
                Write-Warning "–û—à–∏–±–∫–∞: $_. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ $DelaySeconds —Å–µ–∫—É–Ω–¥..."
                Start-Sleep -Seconds $DelaySeconds
            } else {
                throw $_
            }
        }
    }
    
    return $false
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function Test-Dependencies {
    Write-Log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    $dependencies = @("docker", "scp", "ssh")
    $missing = @()
    
    foreach ($dep in $dependencies) {
        if (-not (Get-Command $dep -ErrorAction SilentlyContinue)) {
            $missing += $dep
        }
    }
    
    if ($missing.Count -gt 0) {
        Write-Error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: $($missing -join ', ')"
        Write-Info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ"
        exit 1
    }
    
    Write-Success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
}

# –î–µ–ø–ª–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function Deploy-Database {
    Write-Log "üóÑÔ∏è –î–µ–ø–ª–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    try {
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ë–î –Ω–∞ –í–ú
        $cmd = "ssh $SSH_OPTIONS ${VM_USER}@${VM_HOST} 'mkdir -p /home/${VM_USER}/${DB_PROJECT_NAME}'"
        Invoke-WithRetry -Command $cmd
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ë–î
        $dbFiles = @(
            "Dockerfile.postgres",
            "docker-compose.db.yml", 
            "assessment_schema.sql",
            "assessment_questions.sql"
        )
        
        foreach ($file in $dbFiles) {
            if (Test-Path $file) {
                Write-Log "üìã –ö–æ–ø–∏—Ä—É–µ–º $file –¥–ª—è –ë–î..."
                $cmd = "scp $SSH_OPTIONS $file ${VM_USER}@${VM_HOST}:/home/${VM_USER}/${DB_PROJECT_NAME}/"
                $success = Invoke-WithRetry -Command $cmd
                
                if ($success) {
                    Write-Success "$file —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
                } else {
                    throw "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è $file"
                }
            } else {
                Write-Warning "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ë–î
        Write-Log "üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        $cmd = "ssh $SSH_OPTIONS ${VM_USER}@${VM_HOST} 'cd /home/${VM_USER}/${DB_PROJECT_NAME} && docker compose -f docker-compose.db.yml down && docker volume rm postgres-db_postgres_data 2>/dev/null || true && docker compose -f docker-compose.db.yml up -d --build'"
        $success = Invoke-WithRetry -Command $cmd
        
        if ($success) {
            Write-Success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ë–î
            Start-Sleep -Seconds 10
            $cmd = "ssh $SSH_OPTIONS ${VM_USER}@${VM_HOST} 'cd /home/${VM_USER}/${DB_PROJECT_NAME} && docker compose -f docker-compose.db.yml ps'"
            Invoke-Expression $cmd
            
        } else {
            throw "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        }
        
    } catch {
        Write-Error "–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è –ë–î: $_"
        throw $_
    }
}

# –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function Deploy-Application {
    Write-Log "üöÄ –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    try {
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –í–ú
        $cmd = "ssh $SSH_OPTIONS ${VM_USER}@${VM_HOST} 'mkdir -p /home/${VM_USER}/${APP_PROJECT_NAME}'"
        Invoke-WithRetry -Command $cmd
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        $appFiles = @(
            "docker-compose.app.yml",
            "Dockerfile.server",
            "Dockerfile.client",
            "server.py",
            "requirements.txt",
            "nginx/default.conf"
        )
        
        foreach ($file in $appFiles) {
            if (Test-Path $file) {
                Write-Log "üìã –ö–æ–ø–∏—Ä—É–µ–º $file –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
                $cmd = "scp $SSH_OPTIONS $file ${VM_USER}@${VM_HOST}:/home/${VM_USER}/${APP_PROJECT_NAME}/"
                $success = Invoke-WithRetry -Command $cmd
                
                if ($success) {
                    Write-Success "$file —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
                } else {
                    throw "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è $file"
                }
            } else {
                Write-Warning "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        }
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É src
        if (Test-Path "src") {
            Write-Log "üìã –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É src..."
            $cmd = "scp $SSH_OPTIONS -r src ${VM_USER}@${VM_HOST}:/home/${VM_USER}/${APP_PROJECT_NAME}/"
            $success = Invoke-WithRetry -Command $cmd
            
            if ($success) {
                Write-Success "–ü–∞–ø–∫–∞ src —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞"
            } else {
                throw "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è src"
            }
        }
        
        # –ö–æ–ø–∏—Ä—É–µ–º package.json
        if (Test-Path "package.json") {
            Write-Log "üìã –ö–æ–ø–∏—Ä—É–µ–º package.json..."
            $cmd = "scp $SSH_OPTIONS package.json ${VM_USER}@${VM_HOST}:/home/${VM_USER}/${APP_PROJECT_NAME}/"
            $success = Invoke-WithRetry -Command $cmd
            
            if ($success) {
                Write-Success "package.json —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
            } else {
                throw "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è package.json"
            }
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        Write-Log "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        $cmd = "ssh $SSH_OPTIONS ${VM_USER}@${VM_HOST} 'cd /home/${VM_USER}/${APP_PROJECT_NAME} && docker compose -f docker-compose.app.yml down && docker compose -f docker-compose.app.yml up -d --build'"
        $success = Invoke-WithRetry -Command $cmd
        
        if ($success) {
            Write-Success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            Start-Sleep -Seconds 10
            $cmd = "ssh $SSH_OPTIONS ${VM_USER}@${VM_HOST} 'cd /home/${VM_USER}/${APP_PROJECT_NAME} && docker compose -f docker-compose.app.yml ps'"
            Invoke-Expression $cmd
            
        } else {
            throw "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        }
        
    } catch {
        Write-Error "–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $_"
        throw $_
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è
function Test-Deployment {
    Write-Log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    Write-Log "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    $dbStatus = ssh $SSH_OPTIONS ${VM_USER}@${VM_HOST} "cd /home/${VM_USER}/${DB_PROJECT_NAME} && docker compose -f docker-compose.db.yml ps"
    Write-Info "–°—Ç–∞—Ç—É—Å –ë–î: $dbStatus"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    Write-Log "üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    $appStatus = ssh $SSH_OPTIONS ${VM_USER}@${VM_HOST} "cd /home/${VM_USER}/${APP_PROJECT_NAME} && docker compose -f docker-compose.app.yml ps"
    Write-Info "–°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $appStatus"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    Write-Log "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î..."
    $dbConnection = ssh $SSH_OPTIONS ${VM_USER}@${VM_HOST} "docker exec rgszh-postgres psql -U postgres -d postgres -c 'SELECT COUNT(*) as questions_count FROM questions;'"
    Write-Info "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ë–î: $dbConnection"
    
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Telegram
    Write-Log "üßπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –∫—ç—à Telegram..."
    Write-Info "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Telegram:"
    Write-Info "1. –ó–∞–∫—Ä–æ–π—Ç–µ MiniApp –≤ Telegram"
    Write-Info "2. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à Telegram: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–∞–Ω–Ω—ã–µ –∏ –ø–∞–º—è—Ç—å ‚Üí –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"
    Write-Info "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram"
    Write-Info "4. –û—Ç–∫—Ä–æ–π—Ç–µ MiniApp –∑–∞–Ω–æ–≤–æ"
    
    Write-Info "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
    Write-Info "ssh $VM_USER@$VM_HOST 'cd /home/$VM_USER/$DB_PROJECT_NAME && docker compose -f docker-compose.db.yml logs'"
    Write-Info "ssh $VM_USER@$VM_HOST 'cd /home/$VM_USER/$APP_PROJECT_NAME && docker compose -f docker-compose.app.yml logs'"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Host ""
    Write-Host "===============================================" -ForegroundColor Magenta
    Write-Host "üöÄ RGSZH MiniApp Separate DB Deployment" -ForegroundColor Magenta
    Write-Host "üè∑Ô∏è Deploy Tag: $DEPLOY_TAG" -ForegroundColor Magenta
    Write-Host "üóÑÔ∏è Database: Separate Container" -ForegroundColor Green
    Write-Host "üöÄ Application: Separate Container" -ForegroundColor Green
    Write-Host "===============================================" -ForegroundColor Magenta
    Write-Host ""
    
    $startTime = Get-Date
    
    try {
        Test-Dependencies
        
        if ($DeployDB -or (-not $DeployApp)) {
            Deploy-Database
        }
        
        if ($DeployApp -or (-not $DeployDB)) {
            Deploy-Application
        }
        
        Test-Deployment
        
        $endTime = Get-Date
        $duration = $endTime - $startTime
        
        Write-Host ""
        Write-Host "===============================================" -ForegroundColor Magenta
        Write-Success "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ"
        Write-Info "–¢–µ–≥ –æ–±—Ä–∞–∑–æ–≤: $DEPLOY_TAG"
        Write-Info "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $($duration.Minutes)–º $($duration.Seconds)—Å"
        Write-Info "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $VM_HOST:1112"
        Write-Info "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://rgszh-miniapp.org"
        Write-Host "===============================================" -ForegroundColor Magenta
        
    } catch {
        Write-Error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $_"
        exit 1
    }
}

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
function Show-Help {
    Write-Host @"
RGSZH MiniApp Separate DB Deployment Script

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    .\deploy-separate-db.ps1 [-SkipBuild] [-SkipCopy] [-SkipDeploy] [-ForceConfig] [-Verbose] [-DeployDB] [-DeployApp]

–ü–ê–†–ê–ú–ï–¢–†–´:
    -SkipBuild    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É Docker –æ–±—Ä–∞–∑–æ–≤
    -SkipCopy     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –í–ú
    -SkipDeploy   –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π –Ω–∞ –í–ú
    -ForceConfig  –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å nginx –∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    -Verbose      –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥
    -DeployDB     –î–µ–ø–ª–æ–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    -DeployApp    –î–µ–ø–ª–æ–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–ü–†–ò–ú–ï–†–´:
    .\deploy-separate-db.ps1                    # –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π (–ë–î + –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
    .\deploy-separate-db.ps1 -DeployDB          # –¢–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    .\deploy-separate-db.ps1 -DeployApp         # –¢–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    .\deploy-separate-db.ps1 -Verbose           # –° –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º

–ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
    - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–∞ –ø–æ—Ä—Ç—É 1112
    - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è backend –∏ frontend
    - –°–≤—è–∑—å: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ë–î –ø–æ IP –∞–¥—Ä–µ—Å—É –í–ú

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    - Docker Desktop
    - Git Bash –∏–ª–∏ WSL (–¥–ª—è scp/ssh –∫–æ–º–∞–Ω–¥)
    - SSH –¥–æ—Å—Ç—É–ø –∫ –í–ú 176.108.243.189

"@ -ForegroundColor Cyan
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if ($args -contains "--help" -or $args -contains "-h") {
    Show-Help
    exit 0
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
Main 