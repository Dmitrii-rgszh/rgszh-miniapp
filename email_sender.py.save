# email_sender.py - –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏

import logging
import requests
from datetime import datetime

logger = logging.getLogger("email_sender")

def process_new_candidate_notification(candidate_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    –ü–†–û–°–¢–ê–Ø –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
    """
    try:
        logger.info(f"üìß Processing notification for: {candidate_data.get('full_name', 'Unknown')}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è email
        subject = f"–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç assessment - {candidate_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        
        body_lines = [
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!",
            "",
            "–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—à–µ–ª assessment:",
            "",
            f"–§–ò–û: {candidate_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–û–±—â–∏–π –±–∞–ª–ª: {candidate_data.get('total_score', 0)}",
            f"–ü—Ä–æ—Ü–µ–Ω—Ç: {candidate_data.get('percentage', 0)}%",
            "",
            "–ë–∞–ª–ª—ã –ø–æ —Ç–∏–ø–∞–º:",
            f"‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ç–æ—Ä: {candidate_data.get('innovator_score', 0)}",
            f"‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä: {candidate_data.get('optimizer_score', 0)}",
            f"‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {candidate_data.get('executor_score', 0)}",
            "",
            f"–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {candidate_data.get('completion_time_minutes', 0)} –º–∏–Ω—É—Ç",
            "",
            "---",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Assessment"
        ]
        
        body = "\r\n".join(body_lines)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
        payload = {"subject": subject, "body": body}
        
        try:
            response = requests.post(
                "http://localhost:4000/api/proxy/assessment/send_manager",
                headers={"Content-Type": "application/json"},
                json=payload,
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ Email notification sent successfully")
                return True
            else:
                logger.error(f"‚ùå Email failed: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Email request failed: {e}")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå Error in email notification: {e}")
        return False














cd ~/rgszh-miniapp
nano email_sender.py
nano email_sender.py

