#!/usr/bin/env python3
# init_care_future.py - –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ "–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º –£–ª—å—Ç—Ä–∞"

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from flask import Flask
from db_saver import init_db, db
from sqlalchemy import text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_app():
    """–°–æ–∑–¥–∞–µ—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    app = Flask(__name__)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    db_uri = (
        os.getenv("SQLALCHEMY_DATABASE_URI") 
        or os.getenv("DATABASE_URL") 
        or f"postgresql://postgres:secret@{os.getenv('DB_HOST', 'localhost')}:1112/postgres"
    )
    
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {db_uri.split('@')[1] if '@' in db_uri else '–ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î'}")
    app.config["SQLALCHEMY_DATABASE_URI"] = db_uri
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    
    init_db(app)
    return app

def execute_sql_file(filepath: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(filepath):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            return False
            
        with open(filepath, 'r', encoding='utf-8') as file:
            sql_content = file.read()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands = [cmd.strip() for cmd in sql_content.split(';') if cmd.strip()]
        
        executed = 0
        for command in commands:
            if command:
                try:
                    db.session.execute(text(command))
                    db.session.commit()
                    executed += 1
                except Exception as e:
                    logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
                    db.session.rollback()
        
        logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –∏–∑ {filepath}: {executed}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {filepath}: {e}")
        db.session.rollback()
        return False

def check_existing_tables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        tables_to_check = [
            'nsj_risk_rates',
            'nsj_redemption_rates', 
            'nsj_calculator_settings',
            'nsj_calculations'
        ]
        
        existing_tables = []
        for table in tables_to_check:
            result = db.session.execute(text(f"""
                SELECT COUNT(*) FROM information_schema.tables 
                WHERE table_name = '{table}'
            """)).fetchone()
            
            if result[0] > 0:
                existing_tables.append(table)
        
        return existing_tables
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return []

def init_care_future_database():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    app = create_app()
    
    with app.app_context():
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ '–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º –£–ª—å—Ç—Ä–∞'...")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            existing_tables = check_existing_tables()
            if existing_tables:
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")
                
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏
                if len(sys.argv) > 1 and sys.argv[1] == '--force':
                    logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
                else:
                    logger.info("üí° –î–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --force")
                    logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    data_check = check_data_completeness()
                    if data_check['complete']:
                        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                        print_summary()
                        return True
                    else:
                        logger.info("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ...")
            
            # 2. –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü
            logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü...")
            if not execute_sql_file('care_future_schema.sql'):
                logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã")
                return False
            
            # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel...")
            if not execute_sql_file('care_future_data.sql'):
                logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            validation = validate_installation()
            
            if validation['success']:
                logger.info("üéâ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                print_summary()
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation['errors']}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

def check_data_completeness():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        risk_count = db.session.execute(text(
            "SELECT COUNT(*) FROM nsj_risk_rates WHERE is_active = true"
        )).fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—ã–∫—É–ø–∞
        redemption_count = db.session.execute(text(
            "SELECT COUNT(*) FROM nsj_redemption_rates WHERE is_active = true"
        )).fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_count = db.session.execute(text(
            "SELECT COUNT(*) FROM nsj_calculator_settings WHERE is_active = true"
        )).fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–æ–∫–∏
        terms_result = db.session.execute(text(
            "SELECT DISTINCT contract_term FROM nsj_redemption_rates WHERE is_active = true ORDER BY contract_term"
        )).fetchall()
        terms = [row[0] for row in terms_result]
        
        complete = (
            risk_count >= 10 and  # –º–∏–Ω–∏–º—É–º 10 –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø
            redemption_count >= 50 and  # –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ä–æ–∫–æ–≤
            settings_count >= 10 and  # –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            len(terms) >= 5  # –º–∏–Ω–∏–º—É–º 5 —Ä–∞–∑–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤
        )
        
        return {
            'complete': complete,
            'risk_count': risk_count,
            'redemption_count': redemption_count,
            'settings_count': settings_count,
            'available_terms': terms
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {'complete': False, 'error': str(e)}

def validate_installation():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        from care_future_models import NSJDataManager, NSJCalculator, CalculationInput
        from datetime import date
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
        validation = NSJDataManager.validate_database()
        
        if validation['status'] != 'ok':
            return {'success': False, 'errors': validation['errors']}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç
        try:
            calculator = NSJCalculator()
            test_input = CalculationInput(
                birth_date=date(1990, 1, 1),
                gender='male',
                contract_term=5,
                calculation_type='from_premium',
                input_amount=960000
            )
            
            result = calculator.calculate(test_input)
            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {result.calculation_uuid}")
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}']}
        
        return {'success': True, 'stats': validation['stats']}
        
    except Exception as e:
        return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}']}

def print_summary():
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from care_future_models import NSJDataManager
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        info = NSJDataManager.get_calculator_info()
        validation = NSJDataManager.validate_database()
        
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ù–°–ñ '–ó–ê–ë–û–¢–ê –û –ë–£–î–£–©–ï–ú'")
        print("="*60)
        print(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {info['program_name']}")
        print(f"–í–µ—Ä—Å–∏—è: {info['program_version']}")
        print(f"–í–∞–ª—é—Ç–∞: {info['currency']}")
        print(f"–°—Ç–∞—Ç—É—Å –ë–î: {validation['status']}")
        
        if 'stats' in validation:
            stats = validation['stats']
            print(f"\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:")
            print(f"  ‚Ä¢ –¢–∞—Ä–∏—Ñ–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {stats.get('risk_rates_count', 'N/A')}")
            print(f"  ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –≤—ã–∫—É–ø–∞: {stats.get('redemption_rates_count', 'N/A')}")
            print(f"  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–∫: {stats.get('settings_count', 'N/A')}")
            print(f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–æ–∫–∏: {info['available_terms']}")
            print(f"  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤: {stats.get('calculations_count', 0)}")
        
        print(f"\n‚öôÔ∏è –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:")
        limits = info['age_limits']
        amounts = info['amount_limits']
        print(f"  ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {limits['min_age']}-{limits['max_age']} –ª–µ—Ç")
        print(f"  ‚Ä¢ –í–∑–Ω–æ—Å: {amounts['min_premium']:,}-{amounts['max_premium']:,} —Ä—É–±.")
        print(f"  ‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {amounts['min_insurance_sum']:,}-{amounts['max_insurance_sum']:,} —Ä—É–±.")
        
        print(f"\nüîó API ENDPOINTS:")
        print(f"  ‚Ä¢ POST /api/care-future/calculate - –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç")
        print(f"  ‚Ä¢ GET  /api/care-future/config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        print(f"  ‚Ä¢ POST /api/care-future/validate-age - –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞")
        print(f"  ‚Ä¢ POST /api/care-future/validate-amount - –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã")
        print(f"  ‚Ä¢ GET  /api/care-future/admin/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        if validation.get('warnings'):
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in validation['warnings']:
                print(f"  ‚Ä¢ {warning}")
        
        print("="*60)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("="*60 + "\n")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å–≤–æ–¥–∫–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ '–ó–∞–±–æ—Ç–∞ –æ –±—É–¥—É—â–µ–º –£–ª—å—Ç—Ä–∞'")
    print("–í–µ—Ä—Å–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ Excel —Ñ–∞–π–ª–∞: v.25.2.1")
    print("-" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = ['care_future_schema.sql', 'care_future_data.sql']
    missing_files = [f for f in required_files if not os.path.exists(f)]
    
    if missing_files:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {missing_files}")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã care_future_schema.sql –∏ care_future_data.sql –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    success = init_care_future_database()
    
    if success:
        logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.error("‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)