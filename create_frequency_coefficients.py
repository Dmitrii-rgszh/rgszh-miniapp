# -*- coding: utf-8 -*-
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –≤–∑–Ω–æ—Å–æ–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π"
"""

import sqlite3
import os

def create_frequency_coefficients_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —á–∞—Å—Ç–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = os.getenv('DATABASE_URL', 'sqlite:///miniapp.db').replace('sqlite:///', '')
    if not db_path:
        db_path = 'miniapp.db'
    
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —á–∞—Å—Ç–æ—Ç—ã
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS justincase_frequency_coefficients (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                payment_frequency TEXT UNIQUE NOT NULL,
                coefficient REAL NOT NULL,
                description TEXT
            )
        """)
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        cursor.execute("DELETE FROM justincase_frequency_coefficients")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        frequency_data = [
            ('annual', 1.000, '–ï–∂–µ–≥–æ–¥–Ω–æ'),
            ('semi_annual', 0.5100, '–†–∞–∑ –≤ –ø–æ–ª –≥–æ–¥–∞'),
            ('quarterly', 0.2575, '–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ'),
            ('monthly', 0.0867, '–ï–∂–µ–º–µ—Å—è—á–Ω–æ')
        ]
        
        cursor.executemany("""
            INSERT INTO justincase_frequency_coefficients 
            (payment_frequency, coefficient, description) 
            VALUES (?, ?, ?)
        """, frequency_data)
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT * FROM justincase_frequency_coefficients ORDER BY coefficient DESC")
        results = cursor.fetchall()
        
        print("\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –≤–∑–Ω–æ—Å–æ–≤:")
        for row in results:
            print(f"  {row[3]}: {row[1]} = {row[2]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
        return False
        
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    success = create_frequency_coefficients_table()
    if success:
        print("\nüéâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –≤–∑–Ω–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    else:
        print("\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
