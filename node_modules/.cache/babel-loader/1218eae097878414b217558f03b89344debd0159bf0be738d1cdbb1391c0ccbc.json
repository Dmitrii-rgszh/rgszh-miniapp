{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shapeless\\\\Desktop\\\\miniapp\\\\src\\\\NewsTicker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './NewsTicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewsTicker = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await fetch('/api/telegram-posts');\n        const data = await response.json();\n        let postsArray = Array.isArray(data.posts) ? data.posts : [];\n        // Если новостей больше 3, оставляем только последние 3\n        if (postsArray.length > 3) {\n          postsArray = postsArray.slice(-3);\n        }\n        setPosts(postsArray);\n      } catch (error) {\n        console.error(\"Ошибка при получении постов:\", error);\n        setPosts([\"Пока нет новостей\"]);\n      }\n    };\n    fetchPosts();\n    const interval = setInterval(fetchPosts, 60000); // обновление каждые 60 секунд\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"news-ticker-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-ticker\",\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"news-item\",\n        children: post\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(NewsTicker, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = NewsTicker;\nexport default NewsTicker;\nvar _c;\n$RefreshReg$(_c, \"NewsTicker\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","NewsTicker","_s","posts","setPosts","fetchPosts","response","fetch","data","json","postsArray","Array","isArray","length","slice","error","console","interval","setInterval","clearInterval","className","children","map","post","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shapeless/Desktop/miniapp/src/NewsTicker.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './NewsTicker.css';\r\n\r\nconst NewsTicker = () => {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const response = await fetch('/api/telegram-posts');\r\n        const data = await response.json();\r\n        let postsArray = Array.isArray(data.posts) ? data.posts : [];\r\n        // Если новостей больше 3, оставляем только последние 3\r\n        if (postsArray.length > 3) {\r\n          postsArray = postsArray.slice(-3);\r\n        }\r\n        setPosts(postsArray);\r\n      } catch (error) {\r\n        console.error(\"Ошибка при получении постов:\", error);\r\n        setPosts([\"Пока нет новостей\"]);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n    const interval = setInterval(fetchPosts, 60000); // обновление каждые 60 секунд\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"news-ticker-container\">\r\n      <div className=\"news-ticker\">\r\n        {posts.map((post, index) => (\r\n          <span key={index} className=\"news-item\">\r\n            {post}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewsTicker;\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qBAAqB,CAAC;QACnD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,IAAIC,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACL,KAAK,CAAC,GAAGK,IAAI,CAACL,KAAK,GAAG,EAAE;QAC5D;QACA,IAAIO,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;UACzBH,UAAU,GAAGA,UAAU,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;QACnC;QACAV,QAAQ,CAACM,UAAU,CAAC;MACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDX,QAAQ,CAAC,CAAC,mBAAmB,CAAC,CAAC;MACjC;IACF,CAAC;IAEDC,UAAU,CAAC,CAAC;IACZ,MAAMY,QAAQ,GAAGC,WAAW,CAACb,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;IACjD,OAAO,MAAMc,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA;IAAKoB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,eACpCrB,OAAA;MAAKoB,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzBlB,KAAK,CAACmB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBxB,OAAA;QAAkBoB,SAAS,EAAC,WAAW;QAAAC,QAAA,EACpCE;MAAI,GADIC,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1B,EAAA,CApCID,UAAU;AAAA4B,EAAA,GAAV5B,UAAU;AAsChB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}