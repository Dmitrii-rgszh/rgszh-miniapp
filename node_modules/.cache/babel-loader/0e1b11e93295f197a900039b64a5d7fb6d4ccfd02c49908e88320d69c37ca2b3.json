{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shapeless\\\\Desktop\\\\miniapp\\\\src\\\\FeedbackPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Autosuggest from 'react-autosuggest';\nimport partners from './components/autosuggest/partners.json';\nimport speakers from './components/autosuggest/speakers.json';\nimport './FeedbackPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedbackPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [partner, setPartner] = useState('');\n  const [speakersList, setSpeakersList] = useState([{\n    fullName: '',\n    id: 1\n  }]);\n  const [selectedSpeaker, setSelectedSpeaker] = useState({});\n  const [positiveQualities, setPositiveQualities] = useState([]);\n  const [negativeQualities, setNegativeQualities] = useState([]);\n  const [usefulness, setUsefulness] = useState('');\n  const [brightThoughts, setBrightThoughts] = useState('');\n  const [additionalItems, setAdditionalItems] = useState([]);\n  const [impression, setImpression] = useState('');\n  const [currentQuestion, setCurrentQuestion] = useState(0); // Для отслеживания текущего вопроса\n  const [isFinished, setIsFinished] = useState(false);\n  const questions = [{\n    type: 'input',\n    label: 'Название партнера',\n    value: partner,\n    onChange: e => setPartner(e.target.value),\n    suggestions: partners,\n    renderInput: () => /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: partners,\n      onSuggestionsFetchRequested: ({\n        value\n      }) => {\n        setPartner(value);\n      },\n      onSuggestionsClearRequested: () => setPartner(''),\n      getSuggestionValue: suggestion => suggestion,\n      renderSuggestion: suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: suggestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 45\n      }, this),\n      inputProps: {\n        value: partner,\n        onChange: e => setPartner(e.target.value),\n        placeholder: 'Введите название партнера'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'speakers',\n    label: 'Фамилия и имя спикера',\n    speakersList: speakersList,\n    onAddSpeaker: () => setSpeakersList([...speakersList, {\n      fullName: '',\n      id: speakersList.length + 1\n    }]),\n    onSpeakerChange: (e, index) => {\n      const updatedSpeakers = [...speakersList];\n      updatedSpeakers[index].fullName = e.target.value;\n      setSpeakersList(updatedSpeakers);\n    },\n    renderSpeakers: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: speakersList.map((speaker, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"\\u0424\\u0430\\u043C\\u0438\\u043B\\u0438\\u044F \\u0438 \\u0438\\u043C\\u044F \\u0441\\u043F\\u0438\\u043A\\u0435\\u0440\\u0430 \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Autosuggest, {\n          suggestions: speakers,\n          onSuggestionsFetchRequested: ({\n            value\n          }) => {\n            speaker.fullName = value;\n          },\n          onSuggestionsClearRequested: () => setSpeakersList(speakersList),\n          getSuggestionValue: suggestion => suggestion,\n          renderSuggestion: suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: suggestion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 51\n          }, this),\n          inputProps: {\n            value: speaker.fullName,\n            onChange: e => setSpeakersList(speakersList),\n            placeholder: 'Введите фамилию и имя'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this), index === speakersList.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onAddSpeaker,\n          children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0435\\u0449\\u0435 \\u0441\\u043F\\u0438\\u043A\\u0435\\u0440\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'qualities',\n    label: 'Оценка качеств спикера',\n    positiveQualities: positiveQualities,\n    negativeQualities: negativeQualities,\n    onPositiveChange: quality => setPositiveQualities([...positiveQualities, quality]),\n    onNegativeChange: quality => setNegativeQualities([...negativeQualities, quality]),\n    renderQualities: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ['Экспертный', 'Энергичный', 'Мотивирующий', 'Харизматичный', 'Доступно доносит информацию'].map((quality, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setPositiveQualities([...positiveQualities, quality]),\n          className: positiveQualities.includes(quality) ? 'green' : '',\n          children: quality\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setNegativeQualities([...negativeQualities, quality]),\n          className: negativeQualities.includes(quality) ? 'red' : '',\n          children: quality\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'buttons',\n    label: 'Фактическая ценность информации',\n    options: ['Полезно в работе (буду применять на практике)', 'Бесполезно в работе (с моими клиентами это не работает)'],\n    selected: usefulness,\n    onChange: setUsefulness,\n    renderButtons: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ['Полезно в работе (буду применять на практике)', 'Бесполезно в работе (с моими клиентами это не работает)'].map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setUsefulness(option),\n        className: usefulness === option ? 'green' : '',\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'textarea',\n    label: 'Самые яркие мысли с мероприятия',\n    value: brightThoughts,\n    onChange: e => setBrightThoughts(e.target.value),\n    renderTextarea: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: 'Самые яркие мысли с мероприятия'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: brightThoughts,\n        onChange: e => setBrightThoughts(e.target.value),\n        required: true,\n        minLength: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'buttons',\n    label: 'Что стоило бы добавить в тренинг?',\n    options: ['Практики', 'Клиентских историй', 'Статистических данных', 'Фишек продаж', 'Перерывов', 'Разбор продуктовой линейки', 'Детальный разбор параметров продукта', 'Ящик Prosecco'],\n    selected: additionalItems,\n    onChange: setAdditionalItems,\n    renderButtons: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ['Практики', 'Клиентских историй', 'Статистических данных', 'Фишек продаж', 'Перерывов', 'Разбор продуктовой линейки', 'Детальный разбор параметров продукта', 'Ящик Prosecco'].map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setAdditionalItems([...additionalItems, option]),\n        className: additionalItems.includes(option) ? 'selected' : '',\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'smile',\n    label: 'Общее впечатление от тренинга',\n    options: ['Грустный', 'Нейтральный', 'Счастливый'],\n    selected: impression,\n    onChange: setImpression,\n    renderSmiles: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ['Грустный', 'Нейтральный', 'Счастливый'].map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setImpression(option),\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this)\n  }];\n\n  // Функция для перехода к следующему вопросу\n  const handleNext = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      handleFinish();\n    }\n  };\n\n  // Функция для завершения опроса и отправки данных\n  const handleFinish = async () => {\n    const data = {\n      partner,\n      dateTime: new Date().toISOString(),\n      speakers: speakersList.map(speaker => speaker.fullName).join(', '),\n      positiveQualities,\n      negativeQualities,\n      usefulness,\n      brightThoughts,\n      additionalItems,\n      impression\n    };\n    try {\n      const response = await fetch(\"https://yourserver/api/save\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (response.ok) {\n        setIsFinished(true);\n        alert('Спасибо за участие в опросе!');\n      } else {\n        alert('Ошибка при сохранении данных');\n      }\n    } catch (error) {\n      console.error('Ошибка:', error);\n      alert('Ошибка соединения с сервером');\n    }\n  };\n  const currentQuestionData = questions[currentQuestion];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feedback-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041E\\u0446\\u0435\\u043D\\u043A\\u0430 \\u043C\\u0435\\u0440\\u043E\\u043F\\u0440\\u0438\\u044F\\u0442\\u0438\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), currentQuestionData.type === 'input' && currentQuestionData.renderInput(), currentQuestionData.type === 'speakers' && currentQuestionData.renderSpeakers(), currentQuestionData.type === 'qualities' && currentQuestionData.renderQualities(), currentQuestionData.type === 'buttons' && currentQuestionData.renderButtons(), currentQuestionData.type === 'textarea' && currentQuestionData.renderTextarea(), currentQuestionData.type === 'smile' && currentQuestionData.renderSmiles(), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNext,\n      disabled: isFinished,\n      children: currentQuestion === questions.length - 1 ? 'Завершить опрос' : 'Далее'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n};\n_s(FeedbackPage, \"/FevcsSjnrvi/i2rNDNoL0JABHQ=\", false, function () {\n  return [useNavigate];\n});\n_c = FeedbackPage;\nexport default FeedbackPage;\nvar _c;\n$RefreshReg$(_c, \"FeedbackPage\");","map":{"version":3,"names":["React","useState","useNavigate","Autosuggest","partners","speakers","jsxDEV","_jsxDEV","FeedbackPage","_s","navigate","partner","setPartner","speakersList","setSpeakersList","fullName","id","selectedSpeaker","setSelectedSpeaker","positiveQualities","setPositiveQualities","negativeQualities","setNegativeQualities","usefulness","setUsefulness","brightThoughts","setBrightThoughts","additionalItems","setAdditionalItems","impression","setImpression","currentQuestion","setCurrentQuestion","isFinished","setIsFinished","questions","type","label","value","onChange","e","target","suggestions","renderInput","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","children","fileName","_jsxFileName","lineNumber","columnNumber","inputProps","placeholder","onAddSpeaker","length","onSpeakerChange","index","updatedSpeakers","renderSpeakers","map","speaker","onClick","onPositiveChange","quality","onNegativeChange","renderQualities","className","includes","options","selected","renderButtons","option","renderTextarea","required","minLength","renderSmiles","handleNext","handleFinish","data","dateTime","Date","toISOString","join","response","fetch","method","headers","body","JSON","stringify","ok","alert","error","console","currentQuestionData","disabled","_c","$RefreshReg$"],"sources":["C:/Users/shapeless/Desktop/miniapp/src/FeedbackPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport partners from './components/autosuggest/partners.json';\r\nimport speakers from './components/autosuggest/speakers.json';\r\nimport './FeedbackPage.css';\r\n\r\nconst FeedbackPage = () => {\r\n  const navigate = useNavigate();\r\n  const [partner, setPartner] = useState('');\r\n  const [speakersList, setSpeakersList] = useState([{ fullName: '', id: 1 }]);\r\n  const [selectedSpeaker, setSelectedSpeaker] = useState({});\r\n  const [positiveQualities, setPositiveQualities] = useState([]);\r\n  const [negativeQualities, setNegativeQualities] = useState([]);\r\n  const [usefulness, setUsefulness] = useState('');\r\n  const [brightThoughts, setBrightThoughts] = useState('');\r\n  const [additionalItems, setAdditionalItems] = useState([]);\r\n  const [impression, setImpression] = useState('');\r\n  const [currentQuestion, setCurrentQuestion] = useState(0); // Для отслеживания текущего вопроса\r\n  const [isFinished, setIsFinished] = useState(false);\r\n\r\n  const questions = [\r\n    {\r\n      type: 'input',\r\n      label: 'Название партнера',\r\n      value: partner,\r\n      onChange: (e) => setPartner(e.target.value),\r\n      suggestions: partners,\r\n      renderInput: () => (\r\n        <Autosuggest\r\n          suggestions={partners}\r\n          onSuggestionsFetchRequested={({ value }) => {\r\n            setPartner(value);\r\n          }}\r\n          onSuggestionsClearRequested={() => setPartner('')}\r\n          getSuggestionValue={(suggestion) => suggestion}\r\n          renderSuggestion={(suggestion) => <div>{suggestion}</div>}\r\n          inputProps={{\r\n            value: partner,\r\n            onChange: (e) => setPartner(e.target.value),\r\n            placeholder: 'Введите название партнера',\r\n          }}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      type: 'speakers',\r\n      label: 'Фамилия и имя спикера',\r\n      speakersList: speakersList,\r\n      onAddSpeaker: () => setSpeakersList([...speakersList, { fullName: '', id: speakersList.length + 1 }]),\r\n      onSpeakerChange: (e, index) => {\r\n        const updatedSpeakers = [...speakersList];\r\n        updatedSpeakers[index].fullName = e.target.value;\r\n        setSpeakersList(updatedSpeakers);\r\n      },\r\n      renderSpeakers: () => (\r\n        <div>\r\n          {speakersList.map((speaker, index) => (\r\n            <div key={index}>\r\n              <label>Фамилия и имя спикера {index + 1}</label>\r\n              <Autosuggest\r\n                suggestions={speakers}\r\n                onSuggestionsFetchRequested={({ value }) => {\r\n                  speaker.fullName = value;\r\n                }}\r\n                onSuggestionsClearRequested={() => setSpeakersList(speakersList)}\r\n                getSuggestionValue={(suggestion) => suggestion}\r\n                renderSuggestion={(suggestion) => <div>{suggestion}</div>}\r\n                inputProps={{\r\n                  value: speaker.fullName,\r\n                  onChange: (e) => setSpeakersList(speakersList),\r\n                  placeholder: 'Введите фамилию и имя',\r\n                }}\r\n              />\r\n              {index === speakersList.length - 1 && (\r\n                <button onClick={this.onAddSpeaker}>Добавить еще спикера</button>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      type: 'qualities',\r\n      label: 'Оценка качеств спикера',\r\n      positiveQualities: positiveQualities,\r\n      negativeQualities: negativeQualities,\r\n      onPositiveChange: (quality) => setPositiveQualities([...positiveQualities, quality]),\r\n      onNegativeChange: (quality) => setNegativeQualities([...negativeQualities, quality]),\r\n      renderQualities: () => (\r\n        <div>\r\n          {['Экспертный', 'Энергичный', 'Мотивирующий', 'Харизматичный', 'Доступно доносит информацию'].map((quality, index) => (\r\n            <div key={index}>\r\n              <button\r\n                onClick={() => setPositiveQualities([...positiveQualities, quality])}\r\n                className={positiveQualities.includes(quality) ? 'green' : ''}\r\n              >\r\n                {quality}\r\n              </button>\r\n              <button\r\n                onClick={() => setNegativeQualities([...negativeQualities, quality])}\r\n                className={negativeQualities.includes(quality) ? 'red' : ''}\r\n              >\r\n                {quality}\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      type: 'buttons',\r\n      label: 'Фактическая ценность информации',\r\n      options: ['Полезно в работе (буду применять на практике)', 'Бесполезно в работе (с моими клиентами это не работает)'],\r\n      selected: usefulness,\r\n      onChange: setUsefulness,\r\n      renderButtons: () => (\r\n        <div>\r\n          {['Полезно в работе (буду применять на практике)', 'Бесполезно в работе (с моими клиентами это не работает)'].map((option) => (\r\n            <button\r\n              onClick={() => setUsefulness(option)}\r\n              className={usefulness === option ? 'green' : ''}\r\n            >\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      type: 'textarea',\r\n      label: 'Самые яркие мысли с мероприятия',\r\n      value: brightThoughts,\r\n      onChange: (e) => setBrightThoughts(e.target.value),\r\n      renderTextarea: () => (\r\n        <div>\r\n          <label>{'Самые яркие мысли с мероприятия'}</label>\r\n          <textarea\r\n            value={brightThoughts}\r\n            onChange={(e) => setBrightThoughts(e.target.value)}\r\n            required\r\n            minLength={5}\r\n          />\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      type: 'buttons',\r\n      label: 'Что стоило бы добавить в тренинг?',\r\n      options: ['Практики', 'Клиентских историй', 'Статистических данных', 'Фишек продаж', 'Перерывов', 'Разбор продуктовой линейки', 'Детальный разбор параметров продукта', 'Ящик Prosecco'],\r\n      selected: additionalItems,\r\n      onChange: setAdditionalItems,\r\n      renderButtons: () => (\r\n        <div>\r\n          {['Практики', 'Клиентских историй', 'Статистических данных', 'Фишек продаж', 'Перерывов', 'Разбор продуктовой линейки', 'Детальный разбор параметров продукта', 'Ящик Prosecco'].map((option) => (\r\n            <button\r\n              key={option}\r\n              onClick={() => setAdditionalItems([...additionalItems, option])}\r\n              className={additionalItems.includes(option) ? 'selected' : ''}\r\n            >\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      type: 'smile',\r\n      label: 'Общее впечатление от тренинга',\r\n      options: ['Грустный', 'Нейтральный', 'Счастливый'],\r\n      selected: impression,\r\n      onChange: setImpression,\r\n      renderSmiles: () => (\r\n        <div>\r\n          {['Грустный', 'Нейтральный', 'Счастливый'].map((option) => (\r\n            <button\r\n              key={option}\r\n              onClick={() => setImpression(option)}\r\n            >\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )\r\n    },\r\n  ];\r\n\r\n  // Функция для перехода к следующему вопросу\r\n  const handleNext = () => {\r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      handleFinish();\r\n    }\r\n  };\r\n\r\n  // Функция для завершения опроса и отправки данных\r\n  const handleFinish = async () => {\r\n    const data = {\r\n      partner,\r\n      dateTime: new Date().toISOString(),\r\n      speakers: speakersList.map((speaker) => speaker.fullName).join(', '),\r\n      positiveQualities,\r\n      negativeQualities,\r\n      usefulness,\r\n      brightThoughts,\r\n      additionalItems,\r\n      impression,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\"https://yourserver/api/save\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setIsFinished(true);\r\n        alert('Спасибо за участие в опросе!');\r\n      } else {\r\n        alert('Ошибка при сохранении данных');\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка:', error);\r\n      alert('Ошибка соединения с сервером');\r\n    }\r\n  };\r\n\r\n  const currentQuestionData = questions[currentQuestion];\r\n\r\n  return (\r\n    <div className=\"feedback-container\">\r\n      <h1>Оценка мероприятия</h1>\r\n\r\n      {/* Вопросы */}\r\n      {currentQuestionData.type === 'input' && currentQuestionData.renderInput()}\r\n      {currentQuestionData.type === 'speakers' && currentQuestionData.renderSpeakers()}\r\n      {currentQuestionData.type === 'qualities' && currentQuestionData.renderQualities()}\r\n      {currentQuestionData.type === 'buttons' && currentQuestionData.renderButtons()}\r\n      {currentQuestionData.type === 'textarea' && currentQuestionData.renderTextarea()}\r\n      {currentQuestionData.type === 'smile' && currentQuestionData.renderSmiles()}\r\n\r\n      {/* Кнопка \"Далее\" или \"Завершить опрос\" */}\r\n      <button onClick={handleNext} disabled={isFinished}>\r\n        {currentQuestion === questions.length - 1 ? 'Завершить опрос' : 'Далее'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}