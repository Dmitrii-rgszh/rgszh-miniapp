{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shapeless\\\\Desktop\\\\miniapp\\\\src\\\\AssesmentPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './AssessmentPage.css'; // Подключаем стили для страницы оценки\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentPage = () => {\n  _s();\n  var _questions$currentQue;\n  const navigate = useNavigate();\n\n  // Массив вопросов (для полноты должно быть 25 вопросов)\n  const questions = [{\n    question: 'Какой формат работы вам ближе?',\n    answers: ['Когда можно детально разобраться в процессах и построить устойчивую систему', 'Когда задачи достаточно разнообразны и требуют гибкого подхода', 'Когда есть чёткий алгоритм действий и понятный конечный результат'],\n    correct: 'JavaScript'\n  }, {\n    question: 'Если коллега допустил серьёзную ошибку, что для вас логичнее сделать?',\n    answers: ['Понять, что пошло не так, и вместе найти пути исправления', 'В первую очередь скорректировать свои планы с учётом возникших проблем', 'Сделать выводы для себя и минимизировать влияние на мою работу'],\n    correct: 'Париж'\n  }, {\n    question: 'В команде нарастает напряжение, которое влияет на общий процесс. Как вы реагируете?',\n    answers: ['Стараюсь выяснить причину и предложить возможные решения, учитывая интересы всех', 'Наблюдаю за развитием ситуации и при необходимости высказываю своё мнение', 'Предпочитаю не вовлекаться, если это напрямую не затрагивает мою зону ответственности'],\n    correct: '2'\n  }, {\n    question: 'Как относитесь к комментариям по вашей работе?',\n    answers: ['Считаю их возможностью для развития, если они аргументированы', 'Выслушиваю, но меняю подход только при реальной необходимости', 'Если работа выполнена по стандартам, дополнительные замечания не критичны'],\n    correct: '2'\n  }, {\n    question: 'Клиент или партнер выражает недовольство результатом. Как поступаете?',\n    answers: ['Пытаюсь понять, где возникли расхождения, и найти приемлемое решение', 'Сначала оцениваю обоснованность претензий, при необходимости уточняю детали', 'Если всё сделано согласно договорённостям, считаю, что моя задача выполнена'],\n    correct: '2'\n  }, {\n    question: 'Какой рабочий стиль для вас комфортнее?',\n    answers: ['Выстраивать системные процессы, учитывая интересы всех сторон надолго вперёд', 'Следовать намеченному плану, при необходимости поддерживая взаимодействие', 'Сосредотачиваться на своих задачах, минимизируя отвлечения на внешние факторы'],\n    correct: '2'\n  }, {\n    question: 'Как вы относитесь к идее поддерживать контакт с бывшими клиентами или коллегами, чтобы в будущем возможно было сотрудничество?',\n    answers: ['Считаю это важным для выстраивания долгосрочных отношений', 'Можно поддерживать связь, если в этом есть очевидная практическая выгода', 'Предпочитаю фокусироваться на текущих проектах, не распыляясь на прошлое'],\n    correct: '2'\n  }\n  // добавьте остальные вопросы\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState('');\n  const [score, setScore] = useState(0);\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\n  const shuffleAnswers = answers => {\n    return answers.sort(() => Math.random() - 0.5); // Перемешиваем ответы\n  };\n  const handleAnswerSelect = answer => {\n    setSelectedAnswer(answer);\n  };\n  const handleNext = () => {\n    if (selectedAnswer === questions[currentQuestion].correct) {\n      setScore(score + 1);\n    }\n    setSelectedAnswer(''); // сбрасываем выбранный ответ\n    setCurrentQuestion(currentQuestion + 1);\n  };\n  const handleFinish = () => {\n    if (selectedAnswer === questions[currentQuestion].correct) {\n      setScore(score + 1);\n    }\n    // Здесь можно отправить данные на сервер или сохранить их в файл\n    alert(`Опрос завершён! Ваш результат: ${score}/${questions.length}`);\n    navigate('/'); // Переход на главную или нужную страницу\n  };\n  useEffect(() => {\n    if (questions[currentQuestion]) {\n      // Перемешиваем только ответы при переходе на новый вопрос\n      const shuffled = shuffleAnswers([...questions[currentQuestion].answers]);\n      setShuffledAnswers(shuffled);\n    }\n  }, [currentQuestion]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"assessment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: (_questions$currentQue = questions[currentQuestion]) === null || _questions$currentQue === void 0 ? void 0 : _questions$currentQue.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), shuffledAnswers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `answer-btn ${selectedAnswer === answer ? 'selected' : ''}`,\n      onClick: () => handleAnswerSelect(answer),\n      children: answer\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestion === questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn red-btn\",\n        onClick: handleFinish,\n        children: \"\\u0417\\u0430\\u0432\\u0435\\u0440\\u0448\\u0438\\u0442\\u044C \\u043E\\u043F\\u0440\\u043E\\u0441\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn red-btn\",\n        onClick: handleNext,\n        children: \"\\u0414\\u0430\\u043B\\u0435\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(AssessmentPage, \"ddtKOS0l7r3w3EWiK/+NQxx7cpc=\", false, function () {\n  return [useNavigate];\n});\n_c = AssessmentPage;\nexport default AssessmentPage;\nvar _c;\n$RefreshReg$(_c, \"AssessmentPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AssessmentPage","_s","_questions$currentQue","navigate","questions","question","answers","correct","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","score","setScore","shuffledAnswers","setShuffledAnswers","shuffleAnswers","sort","Math","random","handleAnswerSelect","answer","handleNext","handleFinish","alert","length","shuffled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shapeless/Desktop/miniapp/src/AssesmentPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './AssessmentPage.css';  // Подключаем стили для страницы оценки\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AssessmentPage = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // Массив вопросов (для полноты должно быть 25 вопросов)\r\n  const questions = [\r\n    {\r\n      question: 'Какой формат работы вам ближе?',\r\n      answers: ['Когда можно детально разобраться в процессах и построить устойчивую систему', 'Когда задачи достаточно разнообразны и требуют гибкого подхода', 'Когда есть чёткий алгоритм действий и понятный конечный результат'],\r\n      correct: 'JavaScript',\r\n    },\r\n    {\r\n      question: 'Если коллега допустил серьёзную ошибку, что для вас логичнее сделать?',\r\n      answers: ['Понять, что пошло не так, и вместе найти пути исправления', 'В первую очередь скорректировать свои планы с учётом возникших проблем', 'Сделать выводы для себя и минимизировать влияние на мою работу'],\r\n      correct: 'Париж',\r\n    },\r\n    {\r\n      question: 'В команде нарастает напряжение, которое влияет на общий процесс. Как вы реагируете?',\r\n      answers: ['Стараюсь выяснить причину и предложить возможные решения, учитывая интересы всех', 'Наблюдаю за развитием ситуации и при необходимости высказываю своё мнение', 'Предпочитаю не вовлекаться, если это напрямую не затрагивает мою зону ответственности'],\r\n      correct: '2',\r\n    },\r\n    {\r\n      question: 'Как относитесь к комментариям по вашей работе?',\r\n      answers: ['Считаю их возможностью для развития, если они аргументированы', 'Выслушиваю, но меняю подход только при реальной необходимости', 'Если работа выполнена по стандартам, дополнительные замечания не критичны'],\r\n      correct: '2',\r\n    },\r\n    {\r\n      question: 'Клиент или партнер выражает недовольство результатом. Как поступаете?',\r\n      answers: ['Пытаюсь понять, где возникли расхождения, и найти приемлемое решение', 'Сначала оцениваю обоснованность претензий, при необходимости уточняю детали', 'Если всё сделано согласно договорённостям, считаю, что моя задача выполнена'],\r\n      correct: '2',\r\n    },\r\n    {\r\n      question: 'Какой рабочий стиль для вас комфортнее?',\r\n      answers: ['Выстраивать системные процессы, учитывая интересы всех сторон надолго вперёд', 'Следовать намеченному плану, при необходимости поддерживая взаимодействие', 'Сосредотачиваться на своих задачах, минимизируя отвлечения на внешние факторы'],\r\n      correct: '2',\r\n    },\r\n    {\r\n      question: 'Как вы относитесь к идее поддерживать контакт с бывшими клиентами или коллегами, чтобы в будущем возможно было сотрудничество?',\r\n      answers: ['Считаю это важным для выстраивания долгосрочных отношений', 'Можно поддерживать связь, если в этом есть очевидная практическая выгода', 'Предпочитаю фокусироваться на текущих проектах, не распыляясь на прошлое'],\r\n      correct: '2',\r\n    },\r\n    // добавьте остальные вопросы\r\n  ];\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState('');\r\n  const [score, setScore] = useState(0);\r\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\r\n\r\n  const shuffleAnswers = (answers) => {\r\n    return answers.sort(() => Math.random() - 0.5);  // Перемешиваем ответы\r\n  };\r\n\r\n  const handleAnswerSelect = (answer) => {\r\n    setSelectedAnswer(answer);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (selectedAnswer === questions[currentQuestion].correct) {\r\n      setScore(score + 1);\r\n    }\r\n    setSelectedAnswer(''); // сбрасываем выбранный ответ\r\n    setCurrentQuestion(currentQuestion + 1);\r\n  };\r\n\r\n  const handleFinish = () => {\r\n    if (selectedAnswer === questions[currentQuestion].correct) {\r\n      setScore(score + 1);\r\n    }\r\n    // Здесь можно отправить данные на сервер или сохранить их в файл\r\n    alert(`Опрос завершён! Ваш результат: ${score}/${questions.length}`);\r\n    navigate('/');  // Переход на главную или нужную страницу\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (questions[currentQuestion]) {\r\n      // Перемешиваем только ответы при переходе на новый вопрос\r\n      const shuffled = shuffleAnswers([...questions[currentQuestion].answers]);\r\n      setShuffledAnswers(shuffled);\r\n    }\r\n  }, [currentQuestion]);\r\n\r\n  return (\r\n    <div className=\"assessment-container\">\r\n      <h2>{questions[currentQuestion]?.question}</h2>\r\n      {shuffledAnswers.map((answer, index) => (\r\n        <button\r\n          key={index}\r\n          className={`answer-btn ${selectedAnswer === answer ? 'selected' : ''}`}\r\n          onClick={() => handleAnswerSelect(answer)}\r\n        >\r\n          {answer}\r\n        </button>\r\n      ))}\r\n      <div>\r\n        {currentQuestion === questions.length - 1 ? (\r\n          <button className=\"btn red-btn\" onClick={handleFinish}>Завершить опрос</button>\r\n        ) : (\r\n          <button className=\"btn red-btn\" onClick={handleNext}>Далее</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssessmentPage;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}