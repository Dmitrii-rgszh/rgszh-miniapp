{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shapeless\\\\Desktop\\\\miniapp\\\\src\\\\PollsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useLayoutEffect } from 'react';\nimport { useSwipeable } from 'react-swipeable';\nimport { useNavigate } from 'react-router-dom';\nimport logo from './components/logo.png';\nimport backgroundImage from './components/background.png';\nimport pollIcon from './components/icons/опросы.png';\nimport assessmentQR from './components/QR/assessment.png'; // Импорт иконки для QR-кнопки\nimport './PollsPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PollsPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [qrModal, setQrModal] = useState(null);\n  useLayoutEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n  useEffect(() => {\n    setTimeout(() => {\n      window.scrollTo(0, 0);\n    }, 100);\n  }, []);\n  const swipeHandlers = useSwipeable({\n    onSwipedLeft: () => navigate('/register')\n  });\n\n  // Dummy данные пользователя – замените на реальные данные из вашего auth-контекста\n  const user = {\n    isRegistered: true,\n    accessLevel: 1\n  };\n\n  // Функция генерации URL для QR-кода через Google Charts API\n  const getQRCodeUrl = targetUrl => {\n    return `https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=${encodeURIComponent(targetUrl)}`;\n  };\n  const polls = [{\n    label: 'Оценка кандидата',\n    path: '/assessment'\n  }, {\n    label: 'Обратная связь',\n    path: '/feedback'\n  }];\n  const handleQRClick = pollPath => {\n    const fullUrl = window.location.origin + pollPath;\n    const qrUrl = getQRCodeUrl(fullUrl);\n    setQrModal(qrUrl);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: {\n      backgroundImage: `url(${backgroundImage})`\n    },\n    ...swipeHandlers,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logo\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Logo\",\n        className: \"logo-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u043E\\u043F\\u0440\\u043E\\u0441\\u043E\\u0432\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), polls.map((poll, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mainmenu-btn poll-btn\",\n        onClick: () => navigate(poll.path),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"button-text\",\n          children: poll.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), user.isRegistered && user.accessLevel === 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mainmenu-btn qr-btn\",\n        onClick: () => handleQRClick(poll.path),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: assessmentQR,\n          alt: \"QR Code\",\n          className: \"button-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)), qrModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"qr-modal-overlay\",\n      onClick: () => setQrModal(null),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"qr-modal-content\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: qrModal,\n          alt: \"QR Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(PollsPage, \"uQ9RbQSQ4n+yG8XECBuvTrBvqgg=\", false, function () {\n  return [useNavigate, useSwipeable];\n});\n_c = PollsPage;\nexport default PollsPage;\nvar _c;\n$RefreshReg$(_c, \"PollsPage\");","map":{"version":3,"names":["React","useEffect","useState","useLayoutEffect","useSwipeable","useNavigate","logo","backgroundImage","pollIcon","assessmentQR","jsxDEV","_jsxDEV","PollsPage","_s","navigate","qrModal","setQrModal","window","scrollTo","setTimeout","swipeHandlers","onSwipedLeft","user","isRegistered","accessLevel","getQRCodeUrl","targetUrl","encodeURIComponent","polls","label","path","handleQRClick","pollPath","fullUrl","location","origin","qrUrl","className","style","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","poll","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shapeless/Desktop/miniapp/src/PollsPage.js"],"sourcesContent":["import React, { useEffect, useState, useLayoutEffect } from 'react';\r\nimport { useSwipeable } from 'react-swipeable';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport logo from './components/logo.png';\r\nimport backgroundImage from './components/background.png';\r\nimport pollIcon from './components/icons/опросы.png';\r\nimport assessmentQR from './components/QR/assessment.png'; // Импорт иконки для QR-кнопки\r\nimport './PollsPage.css';\r\n\r\nconst PollsPage = () => {\r\n  const navigate = useNavigate();\r\n  const [qrModal, setQrModal] = useState(null);\r\n\r\n  useLayoutEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      window.scrollTo(0, 0);\r\n    }, 100);\r\n  }, []);\r\n\r\n  const swipeHandlers = useSwipeable({\r\n    onSwipedLeft: () => navigate('/register'),\r\n  });\r\n\r\n  // Dummy данные пользователя – замените на реальные данные из вашего auth-контекста\r\n  const user = {\r\n    isRegistered: true,\r\n    accessLevel: 1,\r\n  };\r\n\r\n  // Функция генерации URL для QR-кода через Google Charts API\r\n  const getQRCodeUrl = (targetUrl) => {\r\n    return `https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=${encodeURIComponent(targetUrl)}`;\r\n  };\r\n\r\n  const polls = [\r\n    { label: 'Оценка кандидата', path: '/assessment' },\r\n    { label: 'Обратная связь', path: '/feedback' }\r\n  ];\r\n\r\n  const handleQRClick = (pollPath) => {\r\n    const fullUrl = window.location.origin + pollPath;\r\n    const qrUrl = getQRCodeUrl(fullUrl);\r\n    setQrModal(qrUrl);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"container\"\r\n      style={{ backgroundImage: `url(${backgroundImage})` }}\r\n      {...swipeHandlers}\r\n    >\r\n      <div className=\"logo\">\r\n        <img src={logo} alt=\"Logo\" className=\"logo-image\" />\r\n      </div>\r\n      <h2>Список опросов</h2>\r\n\r\n      {polls.map((poll, index) => (\r\n        <div key={index} className=\"poll-item\">\r\n          <button className=\"mainmenu-btn poll-btn\" onClick={() => navigate(poll.path)}>\r\n            <span className=\"button-text\">{poll.label}</span>\r\n          </button>\r\n          {user.isRegistered && user.accessLevel === 1 && (\r\n            <button className=\"mainmenu-btn qr-btn\" onClick={() => handleQRClick(poll.path)}>\r\n              <img src={assessmentQR} alt=\"QR Code\" className=\"button-icon\" />\r\n            </button>\r\n          )}\r\n        </div>\r\n      ))}\r\n\r\n      {qrModal && (\r\n        <div className=\"qr-modal-overlay\" onClick={() => setQrModal(null)}>\r\n          <div className=\"qr-modal-content\">\r\n            <img src={qrModal} alt=\"QR Code\" />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PollsPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}