{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shapeless\\\\Desktop\\\\miniapp\\\\src\\\\FeedbackPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Autosuggest from 'react-autosuggest';\nimport partners from './components/autosuggest/partners.json';\nimport speakers from './components/autosuggest/speakers.json';\nimport './FeedbackPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedbackPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [partner, setPartner] = useState('');\n  const [partnerSuggestions, setPartnerSuggestions] = useState([]);\n  const [speakersList, setSpeakersList] = useState([{\n    fullName: '',\n    id: 1\n  }]);\n  const [positiveQualities, setPositiveQualities] = useState([]);\n  const [negativeQualities, setNegativeQualities] = useState([]);\n  const [usefulness, setUsefulness] = useState('');\n  const [brightThoughts, setBrightThoughts] = useState('');\n  const [additionalItems, setAdditionalItems] = useState([]);\n  const [impression, setImpression] = useState('');\n  const [currentQuestion, setCurrentQuestion] = useState(0); // Для отслеживания текущего вопроса\n  const [isFinished, setIsFinished] = useState(false);\n\n  // Функция для фильтрации предложений по введенному значению\n  const getPartnerSuggestions = value => {\n    const trimmedValue = value && value.trim().toLowerCase(); // Проверка на пустое или неопределенное значение\n    if (!trimmedValue || trimmedValue.length < 2) {\n      return [];\n    }\n    return partners.filter(partner => partner.toLowerCase().includes(trimmedValue));\n  };\n\n  // Обработчик для поиска предложений\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setPartnerSuggestions(getPartnerSuggestions(value));\n  };\n\n  // Очистка предложений\n  const onSuggestionsClearRequested = () => {\n    setPartnerSuggestions([]);\n  };\n\n  // Обработчик изменения значения ввода\n  const onPartnerChange = (event, {\n    newValue\n  }) => {\n    setPartner(newValue);\n  };\n\n  // Рендеринг предложений для автозаполнения\n  const renderSuggestion = suggestion => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: suggestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  };\n  const partnerInputProps = {\n    placeholder: 'Введите название партнера',\n    value: partner,\n    onChange: onPartnerChange\n  };\n\n  // Функция для добавления новых спикеров\n  const handleAddSpeaker = () => {\n    setSpeakersList([...speakersList, {\n      fullName: '',\n      id: speakersList.length + 1\n    }]);\n  };\n\n  // Функция для изменения фамилии спикера\n  const handleSpeakerChange = (e, index) => {\n    const updatedSpeakers = [...speakersList];\n    updatedSpeakers[index].fullName = e.target.value;\n    setSpeakersList(updatedSpeakers);\n  };\n\n  // Функция для фильтрации спикеров\n  const getSpeakerSuggestions = value => {\n    const trimmedValue = value && value.trim().toLowerCase(); // Добавлена проверка\n    if (!trimmedValue || trimmedValue.length < 2) {\n      return [];\n    }\n    return speakers.filter(speaker => speaker.toLowerCase().includes(trimmedValue));\n  };\n  const handleSpeakerSuggestionsFetchRequested = (index, {\n    value\n  }) => {\n    const updatedSpeakers = [...speakersList];\n    updatedSpeakers[index].suggestions = getSpeakerSuggestions(value);\n    setSpeakersList(updatedSpeakers);\n  };\n  const handleSpeakerSuggestionsClearRequested = index => {\n    const updatedSpeakers = [...speakersList];\n    updatedSpeakers[index].suggestions = [];\n    setSpeakersList(updatedSpeakers);\n  };\n  const questions = [{\n    type: 'input',\n    label: 'Название партнера',\n    renderInput: () => /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: partnerSuggestions,\n      onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: onSuggestionsClearRequested,\n      getSuggestionValue: suggestion => suggestion,\n      renderSuggestion: renderSuggestion,\n      inputProps: partnerInputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'speakers',\n    label: 'Фамилия и имя спикера',\n    renderSpeakers: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: speakersList.map((speaker, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"\\u0424\\u0430\\u043C\\u0438\\u043B\\u0438\\u044F \\u0438 \\u0438\\u043C\\u044F \\u0441\\u043F\\u0438\\u043A\\u0435\\u0440\\u0430 \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Autosuggest, {\n          suggestions: speaker.suggestions || [],\n          onSuggestionsFetchRequested: params => handleSpeakerSuggestionsFetchRequested(index, params),\n          onSuggestionsClearRequested: () => handleSpeakerSuggestionsClearRequested(index),\n          getSuggestionValue: suggestion => suggestion,\n          renderSuggestion: suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: suggestion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 51\n          }, this),\n          inputProps: {\n            value: speaker.fullName,\n            onChange: e => handleSpeakerChange(e, index),\n            placeholder: 'Введите фамилию и имя'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), index === speakersList.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddSpeaker,\n          children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0435\\u0449\\u0435 \\u0441\\u043F\\u0438\\u043A\\u0435\\u0440\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'qualities',\n    label: 'Оценка качеств спикера',\n    renderQualities: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ['Экспертный', 'Энергичный', 'Мотивирующий', 'Харизматичный', 'Доступно доносит информацию'].map((quality, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setPositiveQualities([...positiveQualities, quality]),\n          className: positiveQualities.includes(quality) ? 'green' : '',\n          children: quality\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setNegativeQualities([...negativeQualities, quality]),\n          className: negativeQualities.includes(quality) ? 'red' : '',\n          children: quality\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'buttons',\n    label: 'Фактическая ценность информации',\n    options: ['Полезно в работе (буду применять на практике)', 'Бесполезно в работе (с моими клиентами это не работает)'],\n    selected: usefulness,\n    onChange: setUsefulness,\n    renderButtons: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ['Полезно в работе (буду применять на практике)', 'Бесполезно в работе (с моими клиентами это не работает)'].map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setUsefulness(option),\n        className: usefulness === option ? 'green' : '',\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'textarea',\n    label: 'Самые яркие мысли с мероприятия',\n    value: brightThoughts,\n    onChange: e => setBrightThoughts(e.target.value),\n    renderTextarea: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: 'Самые яркие мысли с мероприятия'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: brightThoughts,\n        onChange: e => setBrightThoughts(e.target.value),\n        required: true,\n        minLength: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'buttons',\n    label: 'Что стоило бы добавить в тренинг?',\n    options: ['Практики', 'Клиентских историй', 'Статистических данных', 'Фишек продаж', 'Перерывов', 'Разбор продуктовой линейки', 'Детальный разбор параметров продукта', 'Ящик Prosecco'],\n    selected: additionalItems,\n    onChange: setAdditionalItems,\n    renderButtons: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ['Практики', 'Клиентских историй', 'Статистических данных', 'Фишек продаж', 'Перерывов', 'Разбор продуктовой линейки', 'Детальный разбор параметров продукта', 'Ящик Prosecco'].map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setAdditionalItems([...additionalItems, option]),\n        className: additionalItems.includes(option) ? 'selected' : '',\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'smile',\n    label: 'Общее впечатление от тренинга',\n    options: ['Грустный', 'Нейтральный', 'Счастливый'],\n    selected: impression,\n    onChange: setImpression,\n    renderSmiles: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ['Грустный', 'Нейтральный', 'Счастливый'].map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setImpression(option),\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }, this)\n  }];\n\n  // Функция для перехода к следующему вопросу\n  const handleNext = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      handleFinish();\n    }\n  };\n\n  // Функция для завершения опроса и отправки данных\n  const handleFinish = async () => {\n    const data = {\n      partner,\n      dateTime: new Date().toISOString(),\n      speakers: speakersList.map(speaker => speaker.fullName).join(', '),\n      positiveQualities,\n      negativeQualities,\n      usefulness,\n      brightThoughts,\n      additionalItems,\n      impression\n    };\n    try {\n      const response = await fetch(\"https://yourserver/api/save\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (response.ok) {\n        setIsFinished(true);\n        alert('Спасибо за участие в опросе!');\n      } else {\n        alert('Ошибка при сохранении данных');\n      }\n    } catch (error) {\n      console.error('Ошибка:', error);\n      alert('Ошибка соединения с сервером');\n    }\n  };\n  const currentQuestionData = questions[currentQuestion];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feedback-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041E\\u0446\\u0435\\u043D\\u043A\\u0430 \\u043C\\u0435\\u0440\\u043E\\u043F\\u0440\\u0438\\u044F\\u0442\\u0438\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), currentQuestionData.type === 'input' && currentQuestionData.renderInput(), currentQuestionData.type === 'speakers' && currentQuestionData.renderSpeakers(), currentQuestionData.type === 'qualities' && currentQuestionData.renderQualities(), currentQuestionData.type === 'buttons' && currentQuestionData.renderButtons(), currentQuestionData.type === 'textarea' && currentQuestionData.renderTextarea(), currentQuestionData.type === 'smile' && currentQuestionData.renderSmiles(), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNext,\n      disabled: isFinished,\n      children: currentQuestion === questions.length - 1 ? 'Завершить опрос' : 'Далее'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_s(FeedbackPage, \"P1L7EIxzK9CCis2D1ose1Fh98+M=\", false, function () {\n  return [useNavigate];\n});\n_c = FeedbackPage;\nexport default FeedbackPage;\nvar _c;\n$RefreshReg$(_c, \"FeedbackPage\");","map":{"version":3,"names":["React","useState","useNavigate","Autosuggest","partners","speakers","jsxDEV","_jsxDEV","FeedbackPage","_s","navigate","partner","setPartner","partnerSuggestions","setPartnerSuggestions","speakersList","setSpeakersList","fullName","id","positiveQualities","setPositiveQualities","negativeQualities","setNegativeQualities","usefulness","setUsefulness","brightThoughts","setBrightThoughts","additionalItems","setAdditionalItems","impression","setImpression","currentQuestion","setCurrentQuestion","isFinished","setIsFinished","getPartnerSuggestions","value","trimmedValue","trim","toLowerCase","length","filter","includes","onSuggestionsFetchRequested","onSuggestionsClearRequested","onPartnerChange","event","newValue","renderSuggestion","suggestion","children","fileName","_jsxFileName","lineNumber","columnNumber","partnerInputProps","placeholder","onChange","handleAddSpeaker","handleSpeakerChange","e","index","updatedSpeakers","target","getSpeakerSuggestions","speaker","handleSpeakerSuggestionsFetchRequested","suggestions","handleSpeakerSuggestionsClearRequested","questions","type","label","renderInput","getSuggestionValue","inputProps","renderSpeakers","map","params","onClick","renderQualities","quality","className","options","selected","renderButtons","option","renderTextarea","required","minLength","renderSmiles","handleNext","handleFinish","data","dateTime","Date","toISOString","join","response","fetch","method","headers","body","JSON","stringify","ok","alert","error","console","currentQuestionData","disabled","_c","$RefreshReg$"],"sources":["C:/Users/shapeless/Desktop/miniapp/src/FeedbackPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport partners from './components/autosuggest/partners.json';\r\nimport speakers from './components/autosuggest/speakers.json';\r\nimport './FeedbackPage.css';\r\n\r\nconst FeedbackPage = () => {\r\n  const navigate = useNavigate();\r\n  const [partner, setPartner] = useState('');\r\n  const [partnerSuggestions, setPartnerSuggestions] = useState([]);\r\n  const [speakersList, setSpeakersList] = useState([{ fullName: '', id: 1 }]);\r\n  const [positiveQualities, setPositiveQualities] = useState([]);\r\n  const [negativeQualities, setNegativeQualities] = useState([]);\r\n  const [usefulness, setUsefulness] = useState('');\r\n  const [brightThoughts, setBrightThoughts] = useState('');\r\n  const [additionalItems, setAdditionalItems] = useState([]);\r\n  const [impression, setImpression] = useState('');\r\n  const [currentQuestion, setCurrentQuestion] = useState(0); // Для отслеживания текущего вопроса\r\n  const [isFinished, setIsFinished] = useState(false);\r\n\r\n  // Функция для фильтрации предложений по введенному значению\r\n  const getPartnerSuggestions = (value) => {\r\n    const trimmedValue = value && value.trim().toLowerCase();  // Проверка на пустое или неопределенное значение\r\n    if (!trimmedValue || trimmedValue.length < 2) {\r\n      return [];\r\n    }\r\n    return partners.filter((partner) =>\r\n      partner.toLowerCase().includes(trimmedValue)\r\n    );\r\n  };\r\n\r\n  // Обработчик для поиска предложений\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    setPartnerSuggestions(getPartnerSuggestions(value));\r\n  };\r\n\r\n  // Очистка предложений\r\n  const onSuggestionsClearRequested = () => {\r\n    setPartnerSuggestions([]);\r\n  };\r\n\r\n  // Обработчик изменения значения ввода\r\n  const onPartnerChange = (event, { newValue }) => {\r\n    setPartner(newValue);\r\n  };\r\n\r\n  // Рендеринг предложений для автозаполнения\r\n  const renderSuggestion = (suggestion) => {\r\n    return <div>{suggestion}</div>;\r\n  };\r\n\r\n  const partnerInputProps = {\r\n    placeholder: 'Введите название партнера',\r\n    value: partner,\r\n    onChange: onPartnerChange,\r\n  };\r\n\r\n  // Функция для добавления новых спикеров\r\n  const handleAddSpeaker = () => {\r\n    setSpeakersList([...speakersList, { fullName: '', id: speakersList.length + 1 }]);\r\n  };\r\n\r\n  // Функция для изменения фамилии спикера\r\n  const handleSpeakerChange = (e, index) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].fullName = e.target.value;\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  // Функция для фильтрации спикеров\r\n  const getSpeakerSuggestions = (value) => {\r\n    const trimmedValue = value && value.trim().toLowerCase();  // Добавлена проверка\r\n    if (!trimmedValue || trimmedValue.length < 2) {\r\n      return [];\r\n    }\r\n    return speakers.filter((speaker) =>\r\n      speaker.toLowerCase().includes(trimmedValue)\r\n    );\r\n  };\r\n\r\n  const handleSpeakerSuggestionsFetchRequested = (index, { value }) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].suggestions = getSpeakerSuggestions(value);\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  const handleSpeakerSuggestionsClearRequested = (index) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].suggestions = [];\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  const questions = [\r\n    {\r\n      type: 'input',\r\n      label: 'Название партнера',\r\n      renderInput: () => (\r\n        <Autosuggest\r\n          suggestions={partnerSuggestions}\r\n          onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n          onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n          getSuggestionValue={(suggestion) => suggestion}\r\n          renderSuggestion={renderSuggestion}\r\n          inputProps={partnerInputProps}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      type: 'speakers',\r\n      label: 'Фамилия и имя спикера',\r\n      renderSpeakers: () => (\r\n        <div>\r\n          {speakersList.map((speaker, index) => (\r\n            <div key={index}>\r\n              <label>Фамилия и имя спикера {index + 1}</label>\r\n              <Autosuggest\r\n                suggestions={speaker.suggestions || []}\r\n                onSuggestionsFetchRequested={(params) => handleSpeakerSuggestionsFetchRequested(index, params)}\r\n                onSuggestionsClearRequested={() => handleSpeakerSuggestionsClearRequested(index)}\r\n                getSuggestionValue={(suggestion) => suggestion}\r\n                renderSuggestion={(suggestion) => <div>{suggestion}</div>}\r\n                inputProps={{\r\n                  value: speaker.fullName,\r\n                  onChange: (e) => handleSpeakerChange(e, index),\r\n                  placeholder: 'Введите фамилию и имя',\r\n                }}\r\n              />\r\n              {index === speakersList.length - 1 && (\r\n                <button onClick={handleAddSpeaker}>Добавить еще спикера</button>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      type: 'qualities',\r\n      label: 'Оценка качеств спикера',\r\n      renderQualities: () => (\r\n        <div>\r\n          {['Экспертный', 'Энергичный', 'Мотивирующий', 'Харизматичный', 'Доступно доносит информацию'].map((quality, index) => (\r\n            <div key={index}>\r\n              <button\r\n                onClick={() => setPositiveQualities([...positiveQualities, quality])}\r\n                className={positiveQualities.includes(quality) ? 'green' : ''}\r\n              >\r\n                {quality}\r\n              </button>\r\n              <button\r\n                onClick={() => setNegativeQualities([...negativeQualities, quality])}\r\n                className={negativeQualities.includes(quality) ? 'red' : ''}\r\n              >\r\n                {quality}\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      type: 'buttons',\r\n      label: 'Фактическая ценность информации',\r\n      options: ['Полезно в работе (буду применять на практике)', 'Бесполезно в работе (с моими клиентами это не работает)'],\r\n      selected: usefulness,\r\n      onChange: setUsefulness,\r\n      renderButtons: () => (\r\n        <div>\r\n          {['Полезно в работе (буду применять на практике)', 'Бесполезно в работе (с моими клиентами это не работает)'].map((option) => (\r\n            <button\r\n              onClick={() => setUsefulness(option)}\r\n              className={usefulness === option ? 'green' : ''}\r\n            >\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      type: 'textarea',\r\n      label: 'Самые яркие мысли с мероприятия',\r\n      value: brightThoughts,\r\n      onChange: (e) => setBrightThoughts(e.target.value),\r\n      renderTextarea: () => (\r\n        <div>\r\n          <label>{'Самые яркие мысли с мероприятия'}</label>\r\n          <textarea\r\n            value={brightThoughts}\r\n            onChange={(e) => setBrightThoughts(e.target.value)}\r\n            required\r\n            minLength={5}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      type: 'buttons',\r\n      label: 'Что стоило бы добавить в тренинг?',\r\n      options: ['Практики', 'Клиентских историй', 'Статистических данных', 'Фишек продаж', 'Перерывов', 'Разбор продуктовой линейки', 'Детальный разбор параметров продукта', 'Ящик Prosecco'],\r\n      selected: additionalItems,\r\n      onChange: setAdditionalItems,\r\n      renderButtons: () => (\r\n        <div>\r\n          {['Практики', 'Клиентских историй', 'Статистических данных', 'Фишек продаж', 'Перерывов', 'Разбор продуктовой линейки', 'Детальный разбор параметров продукта', 'Ящик Prosecco'].map((option) => (\r\n            <button\r\n              key={option}\r\n              onClick={() => setAdditionalItems([...additionalItems, option])}\r\n              className={additionalItems.includes(option) ? 'selected' : ''}\r\n            >\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      type: 'smile',\r\n      label: 'Общее впечатление от тренинга',\r\n      options: ['Грустный', 'Нейтральный', 'Счастливый'],\r\n      selected: impression,\r\n      onChange: setImpression,\r\n      renderSmiles: () => (\r\n        <div>\r\n          {['Грустный', 'Нейтральный', 'Счастливый'].map((option) => (\r\n            <button\r\n              key={option}\r\n              onClick={() => setImpression(option)}\r\n            >\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // Функция для перехода к следующему вопросу\r\n  const handleNext = () => {\r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      handleFinish();\r\n    }\r\n  };\r\n\r\n  // Функция для завершения опроса и отправки данных\r\n  const handleFinish = async () => {\r\n    const data = {\r\n      partner,\r\n      dateTime: new Date().toISOString(),\r\n      speakers: speakersList.map((speaker) => speaker.fullName).join(', '),\r\n      positiveQualities,\r\n      negativeQualities,\r\n      usefulness,\r\n      brightThoughts,\r\n      additionalItems,\r\n      impression,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\"https://yourserver/api/save\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setIsFinished(true);\r\n        alert('Спасибо за участие в опросе!');\r\n      } else {\r\n        alert('Ошибка при сохранении данных');\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка:', error);\r\n      alert('Ошибка соединения с сервером');\r\n    }\r\n  };\r\n\r\n  const currentQuestionData = questions[currentQuestion];\r\n\r\n  return (\r\n    <div className=\"feedback-container\">\r\n      <h1>Оценка мероприятия</h1>\r\n\r\n      {/* Вопросы */}\r\n      {currentQuestionData.type === 'input' && currentQuestionData.renderInput()}\r\n      {currentQuestionData.type === 'speakers' && currentQuestionData.renderSpeakers()}\r\n      {currentQuestionData.type === 'qualities' && currentQuestionData.renderQualities()}\r\n      {currentQuestionData.type === 'buttons' && currentQuestionData.renderButtons()}\r\n      {currentQuestionData.type === 'textarea' && currentQuestionData.renderTextarea()}\r\n      {currentQuestionData.type === 'smile' && currentQuestionData.renderSmiles()}\r\n\r\n      {/* Кнопка \"Далее\" или \"Завершить опрос\" */}\r\n      <button onClick={handleNext} disabled={isFinished}>\r\n        {currentQuestion === questions.length - 1 ? 'Завершить опрос' : 'Далее'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackPage;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}