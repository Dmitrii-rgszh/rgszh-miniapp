{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shapeless\\\\Desktop\\\\miniapp\\\\src\\\\FeedbackPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Autosuggest from 'react-autosuggest';\nimport partners from './components/autosuggest/partners.json';\nimport speakers from './components/autosuggest/speakers.json';\nimport './FeedbackPage.css';\nimport logo from './components/logo.png';\nimport './fonts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedbackPage = () => {\n  _s();\n  const navigate = useNavigate();\n\n  // Состояния\n  const [partner, setPartner] = useState('');\n  const [partnerSuggestions, setPartnerSuggestions] = useState([]);\n  const [speakersList, setSpeakersList] = useState([{\n    fullName: '',\n    id: 1\n  }]);\n\n  // Вместо двух массивов positiveQualities и negativeQualities\n  // мы храним все выборы в единой структуре selectedRows,\n  // где каждый элемент массива соответствует строке (паре качеств).\n  // Значение может быть: 'positive', 'negative', или null.\n  const [selectedRows, setSelectedRows] = useState(Array(5).fill(null));\n  const [usefulness, setUsefulness] = useState('');\n  const [brightThoughts, setBrightThoughts] = useState('');\n  const [additionalItems, setAdditionalItems] = useState([]);\n  const [impression, setImpression] = useState('');\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isFinished, setIsFinished] = useState(false);\n\n  // -- ЛОГИКА ДЛЯ ПАРТНЕРА --\n  const getPartnerSuggestions = value => {\n    const trimmedValue = value && typeof value === 'string' ? value.trim().toLowerCase() : '';\n    if (!trimmedValue || trimmedValue.length < 2) {\n      return [];\n    }\n    return partners.filter(partner => partner.toLowerCase().includes(trimmedValue));\n  };\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setPartnerSuggestions(getPartnerSuggestions(value));\n  };\n  const onSuggestionsClearRequested = () => {\n    setPartnerSuggestions([]);\n  };\n  const onPartnerChange = (event, {\n    newValue\n  }) => {\n    setPartner(newValue);\n    setSpeakersList([{\n      fullName: '',\n      id: 1\n    }]);\n  };\n  const renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: suggestion\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 44\n  }, this);\n  const partnerInputProps = {\n    placeholder: 'Введите название партнера',\n    value: partner,\n    onChange: onPartnerChange,\n    className: 'partner-input'\n  };\n\n  // -- ЛОГИКА ДЛЯ СПИКЕРОВ --\n  const handleAddSpeaker = () => {\n    setSpeakersList([...speakersList, {\n      fullName: '',\n      id: speakersList.length + 1\n    }]);\n  };\n  const handleSpeakerChange = (e, index) => {\n    const updatedSpeakers = [...speakersList];\n    updatedSpeakers[index].fullName = e.target.value || '';\n    setSpeakersList(updatedSpeakers);\n  };\n  const getSpeakerSuggestions = value => {\n    const trimmedValue = value && typeof value === 'string' ? value.trim().toLowerCase() : '';\n    if (!trimmedValue || trimmedValue.length < 2) {\n      return [];\n    }\n    return speakers.filter(speaker => speaker.toLowerCase().includes(trimmedValue));\n  };\n  const handleSpeakerSuggestionsFetchRequested = (index, {\n    value\n  }) => {\n    const updatedSpeakers = [...speakersList];\n    updatedSpeakers[index].suggestions = getSpeakerSuggestions(value);\n    setSpeakersList(updatedSpeakers);\n  };\n  const handleSpeakerSuggestionsClearRequested = index => {\n    const updatedSpeakers = [...speakersList];\n    updatedSpeakers[index].suggestions = [];\n    setSpeakersList(updatedSpeakers);\n  };\n  const handleSpeakerSuggestionSelected = (event, {\n    suggestion\n  }, index) => {\n    const updatedSpeakers = [...speakersList];\n    updatedSpeakers[index].fullName = suggestion;\n    setSpeakersList(updatedSpeakers);\n  };\n\n  // -- ЛОГИКА ДЛЯ КАЧЕСТВ --\n  // Опишем пары качеств, чтобы рендерить их в цикле\n  const qualitiesData = [{\n    positive: 'Экспертный',\n    negative: 'Некомпетентный'\n  }, {\n    positive: 'Энергичный',\n    negative: 'Пассивный'\n  }, {\n    positive: 'Мотивирующий',\n    negative: 'Невдохновляющий'\n  }, {\n    positive: 'Харизматичный',\n    negative: 'Душный'\n  }, {\n    positive: 'Доступно доносит информацию',\n    negative: 'Говорит сложными терминами'\n  }];\n\n  // При выборе кнопки из пары мы меняем значение selectedRows[rowIndex].\n  // Если пользователь выбрал \"положительную\" кнопку, записываем 'positive',\n  // иначе 'negative'. Так мы исключаем ситуацию, что обе кнопки будут выбраны.\n  const handleQualityChange = (rowIndex, isPositive) => {\n    setSelectedRows(prev => {\n      const newRows = [...prev];\n      newRows[rowIndex] = isPositive ? 'positive' : 'negative';\n      return newRows;\n    });\n  };\n\n  // Вопросы\n  const questions = [{\n    type: 'input',\n    label: 'Название партнера',\n    renderInput: () => /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: partnerSuggestions,\n      onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: onSuggestionsClearRequested,\n      getSuggestionValue: suggestion => suggestion,\n      renderSuggestion: renderSuggestion,\n      inputProps: partnerInputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'speakers',\n    label: 'Фамилия и имя спикера',\n    renderSpeakers: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: speakersList.map((speaker, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"subquestion-name\",\n          children: [\"\\u0424\\u0430\\u043C\\u0438\\u043B\\u0438\\u044F \\u0438 \\u0438\\u043C\\u044F \\u0441\\u043F\\u0438\\u043A\\u0435\\u0440\\u0430 \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Autosuggest, {\n          suggestions: speaker.suggestions || [],\n          onSuggestionsFetchRequested: params => handleSpeakerSuggestionsFetchRequested(index, params),\n          onSuggestionsClearRequested: () => handleSpeakerSuggestionsClearRequested(index),\n          onSuggestionSelected: (event, data) => handleSpeakerSuggestionSelected(event, data, index),\n          getSuggestionValue: suggestion => suggestion,\n          renderSuggestion: suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: suggestion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 51\n          }, this),\n          inputProps: {\n            value: speaker.fullName,\n            onChange: e => handleSpeakerChange(e, index),\n            placeholder: 'Введите фамилию и имя'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this), index === speakersList.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddSpeaker,\n          children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0435\\u0449\\u0435 \\u0441\\u043F\\u0438\\u043A\\u0435\\u0440\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)\n  }, {\n    type: 'qualities',\n    label: 'Оценка качеств спикера',\n    // Рендерим все пары качеств из qualitiesData\n    renderQualities: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: qualitiesData.map((item, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quality-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleQualityChange(rowIndex, true),\n          className: selectedRows[rowIndex] === 'positive' ? 'green' : '',\n          children: item.positive\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleQualityChange(rowIndex, false),\n          className: selectedRows[rowIndex] === 'negative' ? 'red' : '',\n          children: item.negative\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this)]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this)\n  }];\n\n  // Переход к следующему вопросу\n  const handleNext = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      handleFinish();\n    }\n  };\n\n  // Завершение опроса и отправка данных\n  const handleFinish = async () => {\n    // Преобразуем наши selectedRows в более читабельный формат,\n    // если нужно сохранять положительные и отрицательные качества отдельно:\n    const chosenPositive = [];\n    const chosenNegative = [];\n\n    // В цикле проходимся по selectedRows\n    selectedRows.forEach((selection, index) => {\n      const {\n        positive,\n        negative\n      } = qualitiesData[index];\n      if (selection === 'positive') {\n        chosenPositive.push(positive);\n      } else if (selection === 'negative') {\n        chosenNegative.push(negative);\n      }\n    });\n\n    // Формируем данные для сохранения\n    const data = {\n      partner,\n      dateTime: new Date().toISOString(),\n      speakers: speakersList.map(speaker => speaker.fullName).join(', '),\n      positiveQualities: chosenPositive,\n      negativeQualities: chosenNegative,\n      usefulness,\n      brightThoughts,\n      additionalItems,\n      impression\n    };\n    try {\n      const response = await fetch('https://yourserver/api/save', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (response.ok) {\n        setIsFinished(true);\n        alert('Спасибо за участие в опросе!');\n      } else {\n        alert('Ошибка при сохранении данных');\n      }\n    } catch (error) {\n      console.error('Ошибка:', error);\n      alert('Ошибка соединения с сервером');\n    }\n  };\n  const currentQuestionData = questions[currentQuestion];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feedback-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"name-vote\",\n      children: \"\\u041E\\u0446\\u0435\\u043D\\u043A\\u0430 \\u043C\\u0435\\u0440\\u043E\\u043F\\u0440\\u0438\\u044F\\u0442\\u0438\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), currentQuestionData.type === 'input' && currentQuestionData.renderInput(), currentQuestionData.type === 'speakers' && currentQuestionData.renderSpeakers(), currentQuestionData.type === 'qualities' && currentQuestionData.renderQualities(), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNext,\n      disabled: isFinished,\n      children: currentQuestion === questions.length - 1 ? 'Завершить опрос' : 'Далее'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n};\n_s(FeedbackPage, \"sCdsZkfADiLiyd/id+O1VhzuoJo=\", false, function () {\n  return [useNavigate];\n});\n_c = FeedbackPage;\nexport default FeedbackPage;\nvar _c;\n$RefreshReg$(_c, \"FeedbackPage\");","map":{"version":3,"names":["React","useState","useNavigate","Autosuggest","partners","speakers","logo","jsxDEV","_jsxDEV","FeedbackPage","_s","navigate","partner","setPartner","partnerSuggestions","setPartnerSuggestions","speakersList","setSpeakersList","fullName","id","selectedRows","setSelectedRows","Array","fill","usefulness","setUsefulness","brightThoughts","setBrightThoughts","additionalItems","setAdditionalItems","impression","setImpression","currentQuestion","setCurrentQuestion","isFinished","setIsFinished","getPartnerSuggestions","value","trimmedValue","trim","toLowerCase","length","filter","includes","onSuggestionsFetchRequested","onSuggestionsClearRequested","onPartnerChange","event","newValue","renderSuggestion","suggestion","children","fileName","_jsxFileName","lineNumber","columnNumber","partnerInputProps","placeholder","onChange","className","handleAddSpeaker","handleSpeakerChange","e","index","updatedSpeakers","target","getSpeakerSuggestions","speaker","handleSpeakerSuggestionsFetchRequested","suggestions","handleSpeakerSuggestionsClearRequested","handleSpeakerSuggestionSelected","qualitiesData","positive","negative","handleQualityChange","rowIndex","isPositive","prev","newRows","questions","type","label","renderInput","getSuggestionValue","inputProps","renderSpeakers","map","params","onSuggestionSelected","data","onClick","renderQualities","item","handleNext","handleFinish","chosenPositive","chosenNegative","forEach","selection","push","dateTime","Date","toISOString","join","positiveQualities","negativeQualities","response","fetch","method","headers","body","JSON","stringify","ok","alert","error","console","currentQuestionData","disabled","_c","$RefreshReg$"],"sources":["C:/Users/shapeless/Desktop/miniapp/src/FeedbackPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport partners from './components/autosuggest/partners.json';\r\nimport speakers from './components/autosuggest/speakers.json';\r\nimport './FeedbackPage.css';\r\nimport logo from './components/logo.png';\r\nimport './fonts.css';\r\n\r\nconst FeedbackPage = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // Состояния\r\n  const [partner, setPartner] = useState('');\r\n  const [partnerSuggestions, setPartnerSuggestions] = useState([]);\r\n  const [speakersList, setSpeakersList] = useState([{ fullName: '', id: 1 }]);\r\n\r\n  // Вместо двух массивов positiveQualities и negativeQualities\r\n  // мы храним все выборы в единой структуре selectedRows,\r\n  // где каждый элемент массива соответствует строке (паре качеств).\r\n  // Значение может быть: 'positive', 'negative', или null.\r\n  const [selectedRows, setSelectedRows] = useState(Array(5).fill(null));\r\n\r\n  const [usefulness, setUsefulness] = useState('');\r\n  const [brightThoughts, setBrightThoughts] = useState('');\r\n  const [additionalItems, setAdditionalItems] = useState([]);\r\n  const [impression, setImpression] = useState('');\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n\r\n  // -- ЛОГИКА ДЛЯ ПАРТНЕРА --\r\n  const getPartnerSuggestions = (value) => {\r\n    const trimmedValue = value && typeof value === 'string' ? value.trim().toLowerCase() : '';\r\n    if (!trimmedValue || trimmedValue.length < 2) {\r\n      return [];\r\n    }\r\n    return partners.filter((partner) => partner.toLowerCase().includes(trimmedValue));\r\n  };\r\n\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    setPartnerSuggestions(getPartnerSuggestions(value));\r\n  };\r\n\r\n  const onSuggestionsClearRequested = () => {\r\n    setPartnerSuggestions([]);\r\n  };\r\n\r\n  const onPartnerChange = (event, { newValue }) => {\r\n    setPartner(newValue);\r\n    setSpeakersList([{ fullName: '', id: 1 }]);\r\n  };\r\n\r\n  const renderSuggestion = (suggestion) => <div>{suggestion}</div>;\r\n\r\n  const partnerInputProps = {\r\n    placeholder: 'Введите название партнера',\r\n    value: partner,\r\n    onChange: onPartnerChange,\r\n    className: 'partner-input',\r\n  };\r\n\r\n  // -- ЛОГИКА ДЛЯ СПИКЕРОВ --\r\n  const handleAddSpeaker = () => {\r\n    setSpeakersList([...speakersList, { fullName: '', id: speakersList.length + 1 }]);\r\n  };\r\n\r\n  const handleSpeakerChange = (e, index) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].fullName = e.target.value || '';\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  const getSpeakerSuggestions = (value) => {\r\n    const trimmedValue = value && typeof value === 'string' ? value.trim().toLowerCase() : '';\r\n    if (!trimmedValue || trimmedValue.length < 2) {\r\n      return [];\r\n    }\r\n    return speakers.filter((speaker) => speaker.toLowerCase().includes(trimmedValue));\r\n  };\r\n\r\n  const handleSpeakerSuggestionsFetchRequested = (index, { value }) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].suggestions = getSpeakerSuggestions(value);\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  const handleSpeakerSuggestionsClearRequested = (index) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].suggestions = [];\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  const handleSpeakerSuggestionSelected = (event, { suggestion }, index) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].fullName = suggestion;\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  // -- ЛОГИКА ДЛЯ КАЧЕСТВ --\r\n  // Опишем пары качеств, чтобы рендерить их в цикле\r\n  const qualitiesData = [\r\n    { positive: 'Экспертный', negative: 'Некомпетентный' },\r\n    { positive: 'Энергичный', negative: 'Пассивный' },\r\n    { positive: 'Мотивирующий', negative: 'Невдохновляющий' },\r\n    { positive: 'Харизматичный', negative: 'Душный' },\r\n    { positive: 'Доступно доносит информацию', negative: 'Говорит сложными терминами' },\r\n  ];\r\n\r\n  // При выборе кнопки из пары мы меняем значение selectedRows[rowIndex].\r\n  // Если пользователь выбрал \"положительную\" кнопку, записываем 'positive',\r\n  // иначе 'negative'. Так мы исключаем ситуацию, что обе кнопки будут выбраны.\r\n  const handleQualityChange = (rowIndex, isPositive) => {\r\n    setSelectedRows((prev) => {\r\n      const newRows = [...prev];\r\n      newRows[rowIndex] = isPositive ? 'positive' : 'negative';\r\n      return newRows;\r\n    });\r\n  };\r\n\r\n  // Вопросы\r\n  const questions = [\r\n    {\r\n      type: 'input',\r\n      label: 'Название партнера',\r\n      renderInput: () => (\r\n        <Autosuggest\r\n          suggestions={partnerSuggestions}\r\n          onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n          onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n          getSuggestionValue={(suggestion) => suggestion}\r\n          renderSuggestion={renderSuggestion}\r\n          inputProps={partnerInputProps}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      type: 'speakers',\r\n      label: 'Фамилия и имя спикера',\r\n      renderSpeakers: () => (\r\n        <div>\r\n          {speakersList.map((speaker, index) => (\r\n            <div key={index}>\r\n              <label className=\"subquestion-name\">Фамилия и имя спикера {index + 1}</label>\r\n              <Autosuggest\r\n                suggestions={speaker.suggestions || []}\r\n                onSuggestionsFetchRequested={(params) => handleSpeakerSuggestionsFetchRequested(index, params)}\r\n                onSuggestionsClearRequested={() => handleSpeakerSuggestionsClearRequested(index)}\r\n                onSuggestionSelected={(event, data) => handleSpeakerSuggestionSelected(event, data, index)}\r\n                getSuggestionValue={(suggestion) => suggestion}\r\n                renderSuggestion={(suggestion) => <div>{suggestion}</div>}\r\n                inputProps={{\r\n                  value: speaker.fullName,\r\n                  onChange: (e) => handleSpeakerChange(e, index),\r\n                  placeholder: 'Введите фамилию и имя',\r\n                }}\r\n              />\r\n              {index === speakersList.length - 1 && (\r\n                <button onClick={handleAddSpeaker}>Добавить еще спикера</button>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      type: 'qualities',\r\n      label: 'Оценка качеств спикера',\r\n      // Рендерим все пары качеств из qualitiesData\r\n      renderQualities: () => (\r\n        <div>\r\n          {qualitiesData.map((item, rowIndex) => (\r\n            <div className=\"quality-row\" key={rowIndex}>\r\n              <button\r\n                onClick={() => handleQualityChange(rowIndex, true)}\r\n                className={\r\n                  selectedRows[rowIndex] === 'positive' ? 'green' : ''\r\n                }\r\n              >\r\n                {item.positive}\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => handleQualityChange(rowIndex, false)}\r\n                className={\r\n                  selectedRows[rowIndex] === 'negative' ? 'red' : ''\r\n                }\r\n              >\r\n                {item.negative}\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // Переход к следующему вопросу\r\n  const handleNext = () => {\r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      handleFinish();\r\n    }\r\n  };\r\n\r\n  // Завершение опроса и отправка данных\r\n  const handleFinish = async () => {\r\n    // Преобразуем наши selectedRows в более читабельный формат,\r\n    // если нужно сохранять положительные и отрицательные качества отдельно:\r\n    const chosenPositive = [];\r\n    const chosenNegative = [];\r\n\r\n    // В цикле проходимся по selectedRows\r\n    selectedRows.forEach((selection, index) => {\r\n      const { positive, negative } = qualitiesData[index];\r\n      if (selection === 'positive') {\r\n        chosenPositive.push(positive);\r\n      } else if (selection === 'negative') {\r\n        chosenNegative.push(negative);\r\n      }\r\n    });\r\n\r\n    // Формируем данные для сохранения\r\n    const data = {\r\n      partner,\r\n      dateTime: new Date().toISOString(),\r\n      speakers: speakersList.map((speaker) => speaker.fullName).join(', '),\r\n      positiveQualities: chosenPositive,\r\n      negativeQualities: chosenNegative,\r\n      usefulness,\r\n      brightThoughts,\r\n      additionalItems,\r\n      impression,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('https://yourserver/api/save', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setIsFinished(true);\r\n        alert('Спасибо за участие в опросе!');\r\n      } else {\r\n        alert('Ошибка при сохранении данных');\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка:', error);\r\n      alert('Ошибка соединения с сервером');\r\n    }\r\n  };\r\n\r\n  const currentQuestionData = questions[currentQuestion];\r\n\r\n  return (\r\n    <div className=\"feedback-container\">\r\n      <div className=\"logo\"></div> {/* Логотип */}\r\n      <h1 className=\"name-vote\">Оценка мероприятия</h1>\r\n\r\n      {/* Вопросы */}\r\n      {currentQuestionData.type === 'input' && currentQuestionData.renderInput()}\r\n      {currentQuestionData.type === 'speakers' && currentQuestionData.renderSpeakers()}\r\n      {currentQuestionData.type === 'qualities' && currentQuestionData.renderQualities()}\r\n\r\n      {/* Кнопка \"Далее\" или \"Завершить опрос\" */}\r\n      <button className=\"next-button\" onClick={handleNext} disabled={isFinished}>\r\n        {currentQuestion === questions.length - 1 ? 'Завершить опрос' : 'Далее'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}