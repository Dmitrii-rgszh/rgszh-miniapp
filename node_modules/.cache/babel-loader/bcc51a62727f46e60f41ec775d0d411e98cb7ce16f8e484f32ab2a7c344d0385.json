{"ast":null,"code":"import React,{useState}from'react';import{useNavigate}from'react-router-dom';import Autosuggest from'react-autosuggest';import partners from'./components/autosuggest/partners.json';import speakers from'./components/autosuggest/speakers.json';import'./FeedbackPage.css';import logo from'./components/logo.png';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FeedbackPage=()=>{const navigate=useNavigate();// Состояния\nconst[partner,setPartner]=useState('');const[partnerSuggestions,setPartnerSuggestions]=useState([]);const[speakersList,setSpeakersList]=useState([{fullName:'',id:1}]);// Вместо двух массивов positiveQualities и negativeQualities\n// мы храним все выборы в единой структуре selectedRows,\n// где каждый элемент массива соответствует строке (паре качеств).\n// Значение может быть: 'positive', 'negative', или null.\nconst[selectedRows,setSelectedRows]=useState(Array(5).fill(null));const[usefulness,setUsefulness]=useState('');const[brightThoughts,setBrightThoughts]=useState('');const[additionalItems,setAdditionalItems]=useState([]);const[impression,setImpression]=useState('');const[currentQuestion,setCurrentQuestion]=useState(0);const[isFinished,setIsFinished]=useState(false);// -- ЛОГИКА ДЛЯ ПАРТНЕРА --\nconst getPartnerSuggestions=value=>{const trimmedValue=value&&typeof value==='string'?value.trim().toLowerCase():'';if(!trimmedValue||trimmedValue.length<2){return[];}return partners.filter(partner=>partner.toLowerCase().includes(trimmedValue));};const onSuggestionsFetchRequested=_ref=>{let{value}=_ref;setPartnerSuggestions(getPartnerSuggestions(value));};const onSuggestionsClearRequested=()=>{setPartnerSuggestions([]);};const onPartnerChange=(event,_ref2)=>{let{newValue}=_ref2;setPartner(newValue);setSpeakersList([{fullName:'',id:1}]);};const renderSuggestion=suggestion=>/*#__PURE__*/_jsx(\"div\",{children:suggestion});const partnerInputProps={placeholder:'Введите название партнера',value:partner,onChange:onPartnerChange,className:'partner-input'};// -- ЛОГИКА ДЛЯ СПИКЕРОВ --\nconst handleAddSpeaker=()=>{setSpeakersList([...speakersList,{fullName:'',id:speakersList.length+1}]);};const handleSpeakerChange=(e,index)=>{const updatedSpeakers=[...speakersList];updatedSpeakers[index].fullName=e.target.value||'';setSpeakersList(updatedSpeakers);};const getSpeakerSuggestions=value=>{const trimmedValue=value&&typeof value==='string'?value.trim().toLowerCase():'';if(!trimmedValue||trimmedValue.length<2){return[];}return speakers.filter(speaker=>speaker.toLowerCase().includes(trimmedValue));};const handleSpeakerSuggestionsFetchRequested=(index,_ref3)=>{let{value}=_ref3;const updatedSpeakers=[...speakersList];updatedSpeakers[index].suggestions=getSpeakerSuggestions(value);setSpeakersList(updatedSpeakers);};const handleSpeakerSuggestionsClearRequested=index=>{const updatedSpeakers=[...speakersList];updatedSpeakers[index].suggestions=[];setSpeakersList(updatedSpeakers);};const handleSpeakerSuggestionSelected=(event,_ref4,index)=>{let{suggestion}=_ref4;const updatedSpeakers=[...speakersList];updatedSpeakers[index].fullName=suggestion;setSpeakersList(updatedSpeakers);};// -- ЛОГИКА ДЛЯ КАЧЕСТВ --\n// Опишем пары качеств, чтобы рендерить их в цикле\nconst qualitiesData=[{positive:'Экспертный',negative:'Некомпетентный'},{positive:'Энергичный',negative:'Пассивный'},{positive:'Мотивирующий',negative:'Невдохновляющий'},{positive:'Харизматичный',negative:'Душный'},{positive:'Доступно доносит информацию',negative:'Говорит сложными терминами'}];// При выборе кнопки из пары мы меняем значение selectedRows[rowIndex].\n// Если пользователь выбрал \"положительную\" кнопку, записываем 'positive',\n// иначе 'negative'. Так мы исключаем ситуацию, что обе кнопки будут выбраны.\nconst handleQualityChange=(rowIndex,isPositive)=>{setSelectedRows(prev=>{const newRows=[...prev];newRows[rowIndex]=isPositive?'positive':'negative';return newRows;});};// Вопросы\nconst questions=[{type:'input',label:'Название партнера',renderInput:()=>/*#__PURE__*/_jsx(Autosuggest,{suggestions:partnerSuggestions,onSuggestionsFetchRequested:onSuggestionsFetchRequested,onSuggestionsClearRequested:onSuggestionsClearRequested,getSuggestionValue:suggestion=>suggestion,renderSuggestion:renderSuggestion,inputProps:partnerInputProps})},{type:'speakers',label:'Фамилия и имя спикера',renderSpeakers:()=>/*#__PURE__*/_jsx(\"div\",{children:speakersList.map((speaker,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{className:\"subquestion-name\",children:[\"\\u0424\\u0430\\u043C\\u0438\\u043B\\u0438\\u044F \\u0438 \\u0438\\u043C\\u044F \\u0441\\u043F\\u0438\\u043A\\u0435\\u0440\\u0430 \",index+1]}),/*#__PURE__*/_jsx(Autosuggest,{suggestions:speaker.suggestions||[],onSuggestionsFetchRequested:params=>handleSpeakerSuggestionsFetchRequested(index,params),onSuggestionsClearRequested:()=>handleSpeakerSuggestionsClearRequested(index),onSuggestionSelected:(event,data)=>handleSpeakerSuggestionSelected(event,data,index),getSuggestionValue:suggestion=>suggestion,renderSuggestion:suggestion=>/*#__PURE__*/_jsx(\"div\",{children:suggestion}),inputProps:{value:speaker.fullName,onChange:e=>handleSpeakerChange(e,index),placeholder:'Введите фамилию и имя'}}),index===speakersList.length-1&&/*#__PURE__*/_jsx(\"button\",{onClick:handleAddSpeaker,children:\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0435\\u0449\\u0435 \\u0441\\u043F\\u0438\\u043A\\u0435\\u0440\\u0430\"})]},index))})},{type:'qualities',label:'Оценка качеств спикера',// Рендерим все пары качеств из qualitiesData\nrenderQualities:()=>/*#__PURE__*/_jsx(\"div\",{children:qualitiesData.map((item,rowIndex)=>/*#__PURE__*/_jsxs(\"div\",{className:\"quality-row\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleQualityChange(rowIndex,true),className:selectedRows[rowIndex]==='positive'?'green':'',children:item.positive}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleQualityChange(rowIndex,false),className:selectedRows[rowIndex]==='negative'?'red':'',children:item.negative})]},rowIndex))})}];// Переход к следующему вопросу\nconst handleNext=()=>{if(currentQuestion<questions.length-1){setCurrentQuestion(currentQuestion+1);}else{handleFinish();}};// Завершение опроса и отправка данных\nconst handleFinish=async()=>{// Преобразуем наши selectedRows в более читабельный формат,\n// если нужно сохранять положительные и отрицательные качества отдельно:\nconst chosenPositive=[];const chosenNegative=[];// В цикле проходимся по selectedRows\nselectedRows.forEach((selection,index)=>{const{positive,negative}=qualitiesData[index];if(selection==='positive'){chosenPositive.push(positive);}else if(selection==='negative'){chosenNegative.push(negative);}});// Формируем данные для сохранения\nconst data={partner,dateTime:new Date().toISOString(),speakers:speakersList.map(speaker=>speaker.fullName).join(', '),positiveQualities:chosenPositive,negativeQualities:chosenNegative,usefulness,brightThoughts,additionalItems,impression};try{const response=await fetch(\"https://rgszh-miniapp.org/api/proxy/feedback/save\",{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(response.ok){setIsFinished(true);alert('Спасибо за участие в опросе!');}else{alert('Ошибка при сохранении данных');}}catch(error){console.error('Ошибка:',error);alert('Ошибка соединения с сервером');}};const currentQuestionData=questions[currentQuestion];return/*#__PURE__*/_jsxs(\"div\",{className:\"feedback-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"logo\"}),\" \",/*#__PURE__*/_jsx(\"h1\",{className:\"name-vote\",children:\"\\u041E\\u0446\\u0435\\u043D\\u043A\\u0430 \\u043C\\u0435\\u0440\\u043E\\u043F\\u0440\\u0438\\u044F\\u0442\\u0438\\u044F\"}),currentQuestionData.type==='input'&&currentQuestionData.renderInput(),currentQuestionData.type==='speakers'&&currentQuestionData.renderSpeakers(),currentQuestionData.type==='qualities'&&currentQuestionData.renderQualities(),/*#__PURE__*/_jsx(\"button\",{className:\"next-button\",onClick:handleNext,disabled:isFinished,children:currentQuestion===questions.length-1?'Завершить опрос':'Далее'})]});};export default FeedbackPage;","map":{"version":3,"names":["React","useState","useNavigate","Autosuggest","partners","speakers","logo","jsx","_jsx","jsxs","_jsxs","FeedbackPage","navigate","partner","setPartner","partnerSuggestions","setPartnerSuggestions","speakersList","setSpeakersList","fullName","id","selectedRows","setSelectedRows","Array","fill","usefulness","setUsefulness","brightThoughts","setBrightThoughts","additionalItems","setAdditionalItems","impression","setImpression","currentQuestion","setCurrentQuestion","isFinished","setIsFinished","getPartnerSuggestions","value","trimmedValue","trim","toLowerCase","length","filter","includes","onSuggestionsFetchRequested","_ref","onSuggestionsClearRequested","onPartnerChange","event","_ref2","newValue","renderSuggestion","suggestion","children","partnerInputProps","placeholder","onChange","className","handleAddSpeaker","handleSpeakerChange","e","index","updatedSpeakers","target","getSpeakerSuggestions","speaker","handleSpeakerSuggestionsFetchRequested","_ref3","suggestions","handleSpeakerSuggestionsClearRequested","handleSpeakerSuggestionSelected","_ref4","qualitiesData","positive","negative","handleQualityChange","rowIndex","isPositive","prev","newRows","questions","type","label","renderInput","getSuggestionValue","inputProps","renderSpeakers","map","params","onSuggestionSelected","data","onClick","renderQualities","item","handleNext","handleFinish","chosenPositive","chosenNegative","forEach","selection","push","dateTime","Date","toISOString","join","positiveQualities","negativeQualities","response","fetch","method","headers","body","JSON","stringify","ok","alert","error","console","currentQuestionData","disabled"],"sources":["C:/Users/shapeless/Desktop/miniapp/src/FeedbackPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport partners from './components/autosuggest/partners.json';\r\nimport speakers from './components/autosuggest/speakers.json';\r\nimport './FeedbackPage.css';\r\nimport logo from './components/logo.png';\r\n\r\nconst FeedbackPage = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // Состояния\r\n  const [partner, setPartner] = useState('');\r\n  const [partnerSuggestions, setPartnerSuggestions] = useState([]);\r\n  const [speakersList, setSpeakersList] = useState([{ fullName: '', id: 1 }]);\r\n\r\n  // Вместо двух массивов positiveQualities и negativeQualities\r\n  // мы храним все выборы в единой структуре selectedRows,\r\n  // где каждый элемент массива соответствует строке (паре качеств).\r\n  // Значение может быть: 'positive', 'negative', или null.\r\n  const [selectedRows, setSelectedRows] = useState(Array(5).fill(null));\r\n\r\n  const [usefulness, setUsefulness] = useState('');\r\n  const [brightThoughts, setBrightThoughts] = useState('');\r\n  const [additionalItems, setAdditionalItems] = useState([]);\r\n  const [impression, setImpression] = useState('');\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n\r\n  // -- ЛОГИКА ДЛЯ ПАРТНЕРА --\r\n  const getPartnerSuggestions = (value) => {\r\n    const trimmedValue = value && typeof value === 'string' ? value.trim().toLowerCase() : '';\r\n    if (!trimmedValue || trimmedValue.length < 2) {\r\n      return [];\r\n    }\r\n    return partners.filter((partner) => partner.toLowerCase().includes(trimmedValue));\r\n  };\r\n\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    setPartnerSuggestions(getPartnerSuggestions(value));\r\n  };\r\n\r\n  const onSuggestionsClearRequested = () => {\r\n    setPartnerSuggestions([]);\r\n  };\r\n\r\n  const onPartnerChange = (event, { newValue }) => {\r\n    setPartner(newValue);\r\n    setSpeakersList([{ fullName: '', id: 1 }]);\r\n  };\r\n\r\n  const renderSuggestion = (suggestion) => <div>{suggestion}</div>;\r\n\r\n  const partnerInputProps = {\r\n    placeholder: 'Введите название партнера',\r\n    value: partner,\r\n    onChange: onPartnerChange,\r\n    className: 'partner-input',\r\n  };\r\n\r\n  // -- ЛОГИКА ДЛЯ СПИКЕРОВ --\r\n  const handleAddSpeaker = () => {\r\n    setSpeakersList([...speakersList, { fullName: '', id: speakersList.length + 1 }]);\r\n  };\r\n\r\n  const handleSpeakerChange = (e, index) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].fullName = e.target.value || '';\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  const getSpeakerSuggestions = (value) => {\r\n    const trimmedValue = value && typeof value === 'string' ? value.trim().toLowerCase() : '';\r\n    if (!trimmedValue || trimmedValue.length < 2) {\r\n      return [];\r\n    }\r\n    return speakers.filter((speaker) => speaker.toLowerCase().includes(trimmedValue));\r\n  };\r\n\r\n  const handleSpeakerSuggestionsFetchRequested = (index, { value }) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].suggestions = getSpeakerSuggestions(value);\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  const handleSpeakerSuggestionsClearRequested = (index) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].suggestions = [];\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  const handleSpeakerSuggestionSelected = (event, { suggestion }, index) => {\r\n    const updatedSpeakers = [...speakersList];\r\n    updatedSpeakers[index].fullName = suggestion;\r\n    setSpeakersList(updatedSpeakers);\r\n  };\r\n\r\n  // -- ЛОГИКА ДЛЯ КАЧЕСТВ --\r\n  // Опишем пары качеств, чтобы рендерить их в цикле\r\n  const qualitiesData = [\r\n    { positive: 'Экспертный', negative: 'Некомпетентный' },\r\n    { positive: 'Энергичный', negative: 'Пассивный' },\r\n    { positive: 'Мотивирующий', negative: 'Невдохновляющий' },\r\n    { positive: 'Харизматичный', negative: 'Душный' },\r\n    { positive: 'Доступно доносит информацию', negative: 'Говорит сложными терминами' },\r\n  ];\r\n\r\n  // При выборе кнопки из пары мы меняем значение selectedRows[rowIndex].\r\n  // Если пользователь выбрал \"положительную\" кнопку, записываем 'positive',\r\n  // иначе 'negative'. Так мы исключаем ситуацию, что обе кнопки будут выбраны.\r\n  const handleQualityChange = (rowIndex, isPositive) => {\r\n    setSelectedRows((prev) => {\r\n      const newRows = [...prev];\r\n      newRows[rowIndex] = isPositive ? 'positive' : 'negative';\r\n      return newRows;\r\n    });\r\n  };\r\n\r\n  // Вопросы\r\n  const questions = [\r\n    {\r\n      type: 'input',\r\n      label: 'Название партнера',\r\n      renderInput: () => (\r\n        <Autosuggest\r\n          suggestions={partnerSuggestions}\r\n          onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n          onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n          getSuggestionValue={(suggestion) => suggestion}\r\n          renderSuggestion={renderSuggestion}\r\n          inputProps={partnerInputProps}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      type: 'speakers',\r\n      label: 'Фамилия и имя спикера',\r\n      renderSpeakers: () => (\r\n        <div>\r\n          {speakersList.map((speaker, index) => (\r\n            <div key={index}>\r\n              <label className=\"subquestion-name\">Фамилия и имя спикера {index + 1}</label>\r\n              <Autosuggest\r\n                suggestions={speaker.suggestions || []}\r\n                onSuggestionsFetchRequested={(params) => handleSpeakerSuggestionsFetchRequested(index, params)}\r\n                onSuggestionsClearRequested={() => handleSpeakerSuggestionsClearRequested(index)}\r\n                onSuggestionSelected={(event, data) => handleSpeakerSuggestionSelected(event, data, index)}\r\n                getSuggestionValue={(suggestion) => suggestion}\r\n                renderSuggestion={(suggestion) => <div>{suggestion}</div>}\r\n                inputProps={{\r\n                  value: speaker.fullName,\r\n                  onChange: (e) => handleSpeakerChange(e, index),\r\n                  placeholder: 'Введите фамилию и имя',\r\n                }}\r\n              />\r\n              {index === speakersList.length - 1 && (\r\n                <button onClick={handleAddSpeaker}>Добавить еще спикера</button>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      type: 'qualities',\r\n      label: 'Оценка качеств спикера',\r\n      // Рендерим все пары качеств из qualitiesData\r\n      renderQualities: () => (\r\n        <div>\r\n          {qualitiesData.map((item, rowIndex) => (\r\n            <div className=\"quality-row\" key={rowIndex}>\r\n              <button\r\n                onClick={() => handleQualityChange(rowIndex, true)}\r\n                className={\r\n                  selectedRows[rowIndex] === 'positive' ? 'green' : ''\r\n                }\r\n              >\r\n                {item.positive}\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => handleQualityChange(rowIndex, false)}\r\n                className={\r\n                  selectedRows[rowIndex] === 'negative' ? 'red' : ''\r\n                }\r\n              >\r\n                {item.negative}\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // Переход к следующему вопросу\r\n  const handleNext = () => {\r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      handleFinish();\r\n    }\r\n  };\r\n\r\n  // Завершение опроса и отправка данных\r\n  const handleFinish = async () => {\r\n    // Преобразуем наши selectedRows в более читабельный формат,\r\n    // если нужно сохранять положительные и отрицательные качества отдельно:\r\n    const chosenPositive = [];\r\n    const chosenNegative = [];\r\n\r\n    // В цикле проходимся по selectedRows\r\n    selectedRows.forEach((selection, index) => {\r\n      const { positive, negative } = qualitiesData[index];\r\n      if (selection === 'positive') {\r\n        chosenPositive.push(positive);\r\n      } else if (selection === 'negative') {\r\n        chosenNegative.push(negative);\r\n      }\r\n    });\r\n\r\n    // Формируем данные для сохранения\r\n    const data = {\r\n      partner,\r\n      dateTime: new Date().toISOString(),\r\n      speakers: speakersList.map((speaker) => speaker.fullName).join(', '),\r\n      positiveQualities: chosenPositive,\r\n      negativeQualities: chosenNegative,\r\n      usefulness,\r\n      brightThoughts,\r\n      additionalItems,\r\n      impression,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\"https://rgszh-miniapp.org/api/proxy/feedback/save\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setIsFinished(true);\r\n        alert('Спасибо за участие в опросе!');\r\n      } else {\r\n        alert('Ошибка при сохранении данных');\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка:', error);\r\n      alert('Ошибка соединения с сервером');\r\n    }\r\n  };\r\n\r\n  const currentQuestionData = questions[currentQuestion];\r\n\r\n  return (\r\n    <div className=\"feedback-container\">\r\n      <div className=\"logo\"></div> {/* Логотип */}\r\n      <h1 className=\"name-vote\">Оценка мероприятия</h1>\r\n\r\n      {/* Вопросы */}\r\n      {currentQuestionData.type === 'input' && currentQuestionData.renderInput()}\r\n      {currentQuestionData.type === 'speakers' && currentQuestionData.renderSpeakers()}\r\n      {currentQuestionData.type === 'qualities' && currentQuestionData.renderQualities()}\r\n\r\n      {/* Кнопка \"Далее\" или \"Завершить опрос\" */}\r\n        <button className=\"next-button\" onClick={handleNext} disabled={isFinished}>\r\n        {currentQuestion === questions.length - 1 ? 'Завершить опрос' : 'Далее'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}