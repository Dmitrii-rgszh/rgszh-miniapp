#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç JavaScript –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */

console.log('üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: JavaScript –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã');
console.log('===================================================================');

// –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function computeRecommended(params) {
  const {
    birthDate,
    income2022,
    income2023,
    income2024,
    scholarship,
    hasJob,
    breadwinnerStatus,
    incomeShare,
    numberOfChildren,
    specialCareRelatives,
    existingLoans
  } = params;

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ —á–∏—Å–ª–∞
  const toNumber = (val) => {
    if (val === null || val === undefined || val === '') return null;
    const num = parseFloat(val);
    return isNaN(num) ? null : num;
  };

  // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
  const computeAge = (dateStr) => {
    if (!dateStr) return null;
    const bd = new Date(dateStr);
    const today = new Date();
    let a = today.getFullYear() - bd.getFullYear();
    const m = today.getMonth() - bd.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < bd.getDate())) a--;
    return a;
  };

  const age = computeAge(birthDate);

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –¥–æ—Ö–æ–¥—ã –∏ —Å—Ç–∏–ø–µ–Ω–¥–∏—é, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ, —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ
  const incomes = [income2022, income2023, income2024, scholarship]
    .map(toNumber)
    .filter(v => v !== null);
  const avgIncome = incomes.length > 0 ? incomes.reduce((a, b) => a + b, 0) / incomes.length : 0;

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const norm = (v) => (v || '').toString().toLowerCase().trim();
  const jobNorm = norm(hasJob);
  const breadNorm = norm(breadwinnerStatus);
  const specialNorm = norm(specialCareRelatives);

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç F13: —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–º–∏–ª—å—Ü–∞ –∏ –¥–æ–ª—è –¥–æ—Ö–æ–¥–∞
  let breadwinnerCoeff = 1;
  if (breadNorm === '–¥–∞' || breadNorm === 'yes') {
    breadwinnerCoeff = 3;
  } else if (breadNorm === '–Ω–µ—Ç' || breadNorm === 'no') {
    // –ü–æ–¥–±–∏—Ä–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ –¥–æ–ª–µ –¥–æ—Ö–æ–¥–∞
    const shareMap = {
      '–¥–æ 10': 1,
      '10-24': 1.4,
      '25-49': 1.8,
      '50-74': 2.2,
      '75-89': 2.6,
      '–±–æ–ª–µ–µ 90': 3
    };
    // incomeShare –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä '75%-89%' –∏–ª–∏ '50-74%', —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    const shareKey = norm(incomeShare).replace(/[%]/g, '');
    breadwinnerCoeff = shareMap[shareKey] ?? 1;
  } else {
    // –ù–µ —è–≤–ª—è—é—Å—å –∫–æ—Ä–º–∏–ª—å—Ü–µ–º
    breadwinnerCoeff = 1;
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç F14: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
  const numChildren = toNumber(numberOfChildren) || 0;
  let childrenCoeff = 1;
  if (numChildren === 1) childrenCoeff = 1.125;
  else if (numChildren === 2) childrenCoeff = 1.40625;
  else if (numChildren >= 3) childrenCoeff = 1.5;

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç F15: –æ—Å–æ–±–∞—è –∑–∞–±–æ—Ç–∞ –æ–± –∏–∂–¥–∏–≤–µ–Ω—Ü–∞—Ö
  let specialCoeff = 1;
  if (specialNorm === '–¥–∞' || specialNorm === 'yes') {
    specialCoeff = 1.5;
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
  const productCoeff = breadwinnerCoeff * childrenCoeff * specialCoeff;

  // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (F5)
  let ageFactor = 10; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (age !== null) {
    if (age <= 25) ageFactor = 10;
    else if (age <= 30) ageFactor = 9;
    else if (age <= 35) ageFactor = 8;
    else if (age <= 40) ageFactor = 7;
    else if (age <= 45) ageFactor = 6;
    else if (age <= 50) ageFactor = 5;
    else if (age <= 55) ageFactor = 4;
    else ageFactor = 3;
  }

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞ = —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ * –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
  const maxInsuranceSum = avgIncome * ageFactor;

  // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ = —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ * –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
  let baseRecommendedSum = avgIncome * productCoeff;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã
  const loans = toNumber(existingLoans) || 0;
  baseRecommendedSum += loans;

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π
  const recommendedSum = Math.min(baseRecommendedSum, maxInsuranceSum);

  // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ = 20 - (–≤–æ–∑—Ä–∞—Å—Ç - 25)
  let recommendedTerm = 15; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (age !== null && age >= 25) {
    recommendedTerm = Math.max(5, Math.min(20, 20 - (age - 25)));
  }

  return {
    recommendedSum: Math.round(recommendedSum),
    recommendedTerm,
    debugInfo: {
      age: age || 'N/A',
      avgIncome,
      breadwinnerCoeff,
      childrenCoeff,
      specialCoeff,
      productCoeff: parseFloat(productCoeff.toFixed(3)),
      ageFactor,
      maxInsuranceSum,
      baseRecommendedSum,
      loans
    }
  };
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testCases = [
  {
    name: "–ú–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –±–µ–∑ –¥–µ—Ç–µ–π (25-49% –¥–æ—Ö–æ–¥–∞)",
    params: {
      birthDate: "1999-01-15",
      income2022: "600000",
      income2023: "700000", 
      income2024: "800000",
      scholarship: null,
      hasJob: "–¥–∞",
      breadwinnerStatus: "–Ω–µ—Ç",
      incomeShare: "25-49%",
      numberOfChildren: "0",
      specialCareRelatives: "–Ω–µ—Ç",
      existingLoans: "0"
    },
    expected: "–æ–∫–æ–ª–æ 1.3M"
  },
  {
    name: "–°–µ–º–µ–π–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü —Å 2 –¥–µ—Ç—å–º–∏",
    params: {
      birthDate: "1989-06-10",
      income2022: "900000",
      income2023: "1000000",
      income2024: "1100000", 
      scholarship: null,
      hasJob: "–¥–∞",
      breadwinnerStatus: "–¥–∞",
      incomeShare: "–±–æ–ª–µ–µ 90%",
      numberOfChildren: "2",
      specialCareRelatives: "–Ω–µ—Ç",
      existingLoans: "0"
    },
    expected: "–æ–∫–æ–ª–æ 4.2M"
  },
  {
    name: "–°–ª—É—á–∞–π –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: 50-74% –¥–æ—Ö–æ–¥–∞ (–ö–õ–Æ–ß–ï–í–û–ô –¢–ï–°–¢)",
    params: {
      birthDate: "1989-01-01",
      income2022: "1000000",
      income2023: "1000000",
      income2024: "1000000",
      scholarship: null,
      hasJob: "–¥–∞", 
      breadwinnerStatus: "–Ω–µ—Ç",
      incomeShare: "50-74%",
      numberOfChildren: "0",
      specialCareRelatives: "–Ω–µ—Ç",
      existingLoans: "0"
    },
    expected: "2.2M (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—ç—Ñ 2.2)"
  },
  {
    name: "–ì—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π: 75-89% –¥–æ—Ö–æ–¥–∞",
    params: {
      birthDate: "1992-01-01",
      income2022: "800000",
      income2023: "800000",
      income2024: "800000",
      scholarship: null,
      hasJob: "–¥–∞",
      breadwinnerStatus: "–Ω–µ—Ç", 
      incomeShare: "75-89%",
      numberOfChildren: "0",
      specialCareRelatives: "–Ω–µ—Ç",
      existingLoans: "0"
    },
    expected: "–æ–∫–æ–ª–æ 2.1M (–∫–æ—ç—Ñ 2.6)"
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testCases.forEach((testCase, index) => {
  console.log(`\n${index + 1}. ${testCase.name}`);
  console.log('‚îÄ'.repeat(50));
  
  const result = computeRecommended(testCase.params);
  const { debugInfo } = result;
  
  console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
  console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ${(result.recommendedSum / 1000000).toFixed(1)}M —Ä—É–±`);
  console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å—Ä–æ–∫: ${result.recommendedTerm} –ª–µ—Ç`);
  console.log(`   –í–æ–∑—Ä–∞—Å—Ç: ${debugInfo.age} –ª–µ—Ç`);
  console.log(`   –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: ${(debugInfo.avgIncome / 1000000).toFixed(1)}M —Ä—É–±`);
  console.log(`   –ö–æ—ç—Ñ. –∫–æ—Ä–º–∏–ª—å—Ü–∞: ${debugInfo.breadwinnerCoeff}`);
  console.log(`   –ö–æ—ç—Ñ. –¥–µ—Ç–µ–π: ${debugInfo.childrenCoeff}`);
  console.log(`   –ö–æ—ç—Ñ. –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤: ${debugInfo.specialCoeff}`);
  console.log(`   –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ—ç—Ñ.: ${debugInfo.productCoeff}`);
  console.log(`   –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–æ—ç—Ñ. (F5): ${debugInfo.ageFactor}`);
  console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${(debugInfo.maxInsuranceSum / 1000000).toFixed(1)}M —Ä—É–±`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤–æ–π —Ç–µ—Å—Ç
  if (testCase.name.includes('–ö–õ–Æ–ß–ï–í–û–ô –¢–ï–°–¢')) {
    const expectedSum = 2200000;
    const actualSum = result.recommendedSum;
    const isCorrect = Math.abs(actualSum - expectedSum) < 1000;
    
    console.log(`   üéØ –û–∂–∏–¥–∞–µ–º–æ: ${(expectedSum / 1000000).toFixed(1)}M —Ä—É–±`);
    console.log(`   üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: ${(actualSum / 1000000).toFixed(1)}M —Ä—É–±`);
    
    if (isCorrect) {
      console.log(`   ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    } else {
      console.log(`   ‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(actualSum - expectedSum)} —Ä—É–±`);
    }
  } else {
    console.log(`   üí° –û–∂–∏–¥–∞–µ–º–æ: ${testCase.expected}`);
  }
});

console.log('\n' + '='.repeat(60));
console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
console.log('üìù –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
console.log('üöÄ JavaScript –ª–æ–≥–∏–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
