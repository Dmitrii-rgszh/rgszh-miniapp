#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from justincase_routes_new import calculate_recommended_insurance_sum, get_family_multiplier_conservative

def test_calculation_logic():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —Å –æ—Ç–ª–∞–¥–∫–æ–π
    """
    print("üß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞")
    print()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞
    age = 35
    has_job = True
    income_2022 = 1000000
    income_2023 = 1000000
    income_2024 = 1000000
    scholarship = 0
    unsecured_loans = 0
    breadwinner_status = "main_breadwinner"
    income_share = 62  # 50-74% -> —Å—Ä–µ–¥–Ω–µ–µ 62%
    children_count = 0
    special_care_relatives = 0
    
    print(f"üìä –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   –í–æ–∑—Ä–∞—Å—Ç: {age}")
    print(f"   –ï—Å—Ç—å —Ä–∞–±–æ—Ç–∞: {has_job}")
    print(f"   –î–æ—Ö–æ–¥—ã: {income_2022}, {income_2023}, {income_2024}")
    print(f"   –°—Ç–∏–ø–µ–Ω–¥–∏—è: {scholarship}")
    print(f"   –î–æ–ª–≥–∏: {unsecured_loans}")
    print(f"   –°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–∏–ª—å—Ü–∞: {breadwinner_status}")
    print(f"   –î–æ–ª—è –¥–æ—Ö–æ–¥–∞: {income_share}%")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {children_count}")
    print(f"   –ò–∂–¥–∏–≤–µ–Ω—Ü—ã: {special_care_relatives}")
    print()
    
    # –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥
    incomes = [income_2022, income_2023, income_2024]
    valid_incomes = [inc for inc in incomes if inc > 0]
    
    if valid_incomes:
        average_income = sum(valid_incomes) / len(valid_incomes)
    elif scholarship > 0:
        average_income = scholarship
    else:
        average_income = 0
        
    print(f"üßÆ –®–∞–≥ 1 - –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥:")
    print(f"   –í–∞–ª–∏–¥–Ω—ã–µ –¥–æ—Ö–æ–¥—ã: {valid_incomes}")
    print(f"   –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: {average_income:,.0f}")
    print()
    
    # –®–∞–≥ 2: –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    base_multiplier = 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if age <= 25:
        base_multiplier = 2.5
    elif age <= 35:
        base_multiplier = 2.2  # –ù–∞—à —Å–ª—É—á–∞–π
    elif age <= 45:
        base_multiplier = 2.0
    elif age <= 55:
        base_multiplier = 1.8
    else:
        base_multiplier = 1.5
        
    print(f"üßÆ –®–∞–≥ 2 - –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å:")
    print(f"   –í–æ–∑—Ä–∞—Å—Ç {age} –ª–µ—Ç -> –º–Ω–æ–∂–∏—Ç–µ–ª—å {base_multiplier}")
    print()
    
    # –®–∞–≥ 3: –°–µ–º–µ–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    family_multiplier = get_family_multiplier_conservative(breadwinner_status, children_count, special_care_relatives)
    
    print(f"üßÆ –®–∞–≥ 3 - –°–µ–º–µ–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å:")
    print(f"   –ë–∞–∑–æ–≤—ã–π: 1.0")
    if breadwinner_status == 'main_breadwinner':
        print(f"   + –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–º–∏–ª–µ—Ü: +0.5")
    elif breadwinner_status == 'co_breadwinner':
        print(f"   + –°–æ-–∫–æ—Ä–º–∏–ª–µ—Ü: +0.3")
    print(f"   + –î–µ—Ç–∏: {children_count} * 0.3 = {children_count * 0.3}")
    print(f"   + –ò–∂–¥–∏–≤–µ–Ω—Ü—ã: {special_care_relatives} * 0.4 = {special_care_relatives * 0.4}")
    print(f"   –ò—Ç–æ–≥–æ: {family_multiplier}")
    print()
    
    # –®–∞–≥ 4: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∏ –¥–æ—Ö–æ–¥–∞
    if breadwinner_status == 'main_breadwinner' and income_share > 0:
        share_multiplier = 1.0 + (income_share - 50) / 100  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥ 50%
        share_multiplier = max(1.0, min(1.3, share_multiplier))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1.0-1.3
    else:
        share_multiplier = 1.0
        
    print(f"üßÆ –®–∞–≥ 4 - –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∏ –¥–æ—Ö–æ–¥–∞:")
    print(f"   –î–æ–ª—è: {income_share}%")
    print(f"   –†–∞—Å—á–µ—Ç: min({income_share} / 50, 2.0) = {share_multiplier}")
    print()
    
    # –®–∞–≥ 5: –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞
    base_sum = average_income * base_multiplier * family_multiplier * share_multiplier
    
    print(f"üßÆ –®–∞–≥ 5 - –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞:")
    print(f"   {average_income:,.0f} * {base_multiplier} * {family_multiplier} * {share_multiplier} = {base_sum:,.0f}")
    print()
    
    # –®–∞–≥ 6: –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–≥–∏
    total_recommended = base_sum + unsecured_loans
    
    print(f"üßÆ –®–∞–≥ 6 - –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–≥–∏:")
    print(f"   {base_sum:,.0f} + {unsecured_loans:,.0f} = {total_recommended:,.0f}")
    print()
    
    # –®–∞–≥ 7: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    min_sum = 500000
    max_sum = 10000000
    recommended = max(min_sum, min(max_sum, total_recommended))
    
    print(f"üßÆ –®–∞–≥ 7 - –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
    print(f"   –ú–∏–Ω: {min_sum:,.0f}, –ú–∞–∫—Å: {max_sum:,.0f}")
    print(f"   –î–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {total_recommended:,.0f}")
    print(f"   –ü–æ—Å–ª–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {recommended:,.0f}")
    print()
    
    # –®–∞–≥ 8: –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    final_recommended = round(recommended / 100000) * 100000
    
    print(f"üßÆ –®–∞–≥ 8 - –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 100 —Ç—ã—Å—è—á:")
    print(f"   {recommended:,.0f} -> {final_recommended:,.0f}")
    print()
    
    print(f"üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {final_recommended:,.0f} —Ä—É–±–ª–µ–π")
    print()
    
    # –¢–µ–ø–µ—Ä—å –≤—ã–∑–æ–≤–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    actual_result = calculate_recommended_insurance_sum(
        age=age,
        has_job=has_job,
        income_2022=income_2022,
        income_2023=income_2023,
        income_2024=income_2024,
        scholarship=scholarship,
        unsecured_loans=unsecured_loans,
        breadwinner_status=breadwinner_status,
        income_share=income_share,
        children_count=children_count,
        special_care_relatives=special_care_relatives
    )
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {actual_result:,.0f} —Ä—É–±–ª–µ–π")
    print(f"‚úÖ –†–∞—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {final_recommended == actual_result}")
    
    # –°—Ä–∞–≤–Ω–∏–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    expected = 2200000
    print()
    print(f"ü§î –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {expected:,.0f} —Ä—É–±–ª–µ–π")
    print(f"üìä –†–∞–∑–Ω–∏—Ü–∞: {abs(actual_result - expected):,.0f} —Ä—É–±–ª–µ–π")
    print(f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {actual_result / expected:.2f}x")

if __name__ == "__main__":
    test_calculation_logic()
