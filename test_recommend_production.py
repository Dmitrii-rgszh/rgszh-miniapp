#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
"""

import requests
import json
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def test_recommend_sum_production():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    """
    vm_ip = "176.108.243.189"
    endpoint = f"https://{vm_ip}/api/justincase/recommend-sum"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è JustinCase
    test_cases = [
        {
            "name": "–ú–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            "data": {
                "birthDate": "1999-01-01",  # 25 –ª–µ—Ç
                "hasJob": "yes",
                "income2022": 600000,
                "income2023": 700000,
                "income2024": 800000,
                "scholarship": 0,
                "unsecuredLoans": 0,
                "breadwinnerStatus": "not_breadwinner",
                "incomeShare": 30,
                "childrenCount": 0,
                "specialCareRelatives": 0
            }
        },
        {
            "name": "–°–µ–º–µ–π–Ω—ã–π –∫–æ—Ä–º–∏–ª–µ—Ü",
            "data": {
                "birthDate": "1989-01-01",  # 35 –ª–µ—Ç
                "hasJob": "yes",
                "income2022": 1000000,
                "income2023": 1000000,
                "income2024": 1000000,
                "scholarship": 0,
                "unsecuredLoans": 0,
                "breadwinnerStatus": "yes",
                "incomeShare": 70,
                "childrenCount": 2,
                "specialCareRelatives": 0
            }
        },
        {
            "name": "–°—Ç—É–¥–µ–Ω—Ç —Å–æ —Å—Ç–∏–ø–µ–Ω–¥–∏–µ–π",
            "data": {
                "birthDate": "2002-01-01",  # 22 –≥–æ–¥–∞
                "hasJob": "no",
                "income2022": 0,
                "income2023": 0,
                "income2024": 0,
                "scholarship": 50000,
                "unsecuredLoans": 100000,
                "breadwinnerStatus": "not_breadwinner",
                "incomeShare": 0,
                "childrenCount": 0,
                "specialCareRelatives": 0
            }
        },
        {
            "name": "–°—Ç–∞—Ä—à–∏–π –≤–æ–∑—Ä–∞—Å—Ç",
            "data": {
                "birthDate": "1964-01-01",  # 60 –ª–µ—Ç
                "hasJob": "yes",
                "income2022": 2000000,
                "income2023": 2200000,
                "income2024": 2500000,
                "scholarship": 0,
                "unsecuredLoans": 500000,
                "breadwinnerStatus": "yes",
                "incomeShare": 80,
                "childrenCount": 0,
                "specialCareRelatives": 1
            }
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    print(f"üåê –≠–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}")
    print("=" * 60)
    
    for i, test_case in enumerate(test_cases, 1):
        name = test_case["name"]
        data = test_case["data"]
        
        print(f"\n{i}. {name}")
        print("-" * 40)
        
        try:
            response = requests.post(endpoint, json=data, timeout=10, verify=False)
            print(f"HTTP Status: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    response_data = result.get('data', {})
                    recommended_sum = response_data.get('recommended_sum', 0)
                    recommended_term = response_data.get('recommended_term', 0)
                    details = response_data.get('calculation_details', {})
                    
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {recommended_sum:,} —Ä—É–±")
                    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å—Ä–æ–∫: {recommended_term} –ª–µ—Ç")
                    print(f"   –í–æ–∑—Ä–∞—Å—Ç: {details.get('age')} –ª–µ—Ç")
                    print(f"   –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: {details.get('average_income', 0):,} —Ä—É–±")
                    print(f"   –°–µ–º–µ–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {details.get('family_multiplier', 1)}")
                    print(f"   –î–æ–ª–≥–æ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä: {details.get('debt_factor', 0):,} —Ä—É–±")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
                    age = details.get('age', 0)
                    avg_income = details.get('average_income', 0)
                    ratio = recommended_sum / avg_income if avg_income > 0 else 0
                    
                    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫ –¥–æ—Ö–æ–¥—É: {ratio:.2f}x")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å—Ä–æ–∫
                    expected_terms = {
                        "‚â§30": 25,
                        "31-40": 20,
                        "41-50": 15,
                        "‚â•51": 10
                    }
                    
                    if age <= 30:
                        expected_term = 25
                        age_group = "‚â§30"
                    elif age <= 40:
                        expected_term = 20
                        age_group = "31-40"
                    elif age <= 50:
                        expected_term = 15
                        age_group = "41-50"
                    else:
                        expected_term = 10
                        age_group = "‚â•51"
                    
                    print(f"   –ì—Ä—É–ø–ø–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞: {age_group}")
                    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ä–æ–∫: {expected_term} –ª–µ—Ç")
                    print(f"   –°—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {'‚úÖ' if recommended_term == expected_term else '‚ùå'}")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_recommend_sum_production()
