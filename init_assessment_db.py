#!/usr/bin/env python3
# init_assessment_db.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π

import os
import sys
import logging
import psycopg2
from urllib.parse import urlparse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_and_add_column(cur, table_name, column_name, column_definition):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
        cur.execute("""
            SELECT COUNT(*) 
            FROM information_schema.columns 
            WHERE table_name = %s AND column_name = %s
        """, (table_name, column_name))
        
        exists = cur.fetchone()[0] > 0
        
        if not exists:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü
            cur.execute(f"ALTER TABLE {table_name} ADD COLUMN {column_definition}")
            logger.info(f"   ‚úÖ Added column {column_name} to {table_name}")
            return True
        else:
            logger.info(f"   ‚ÑπÔ∏è Column {column_name} already exists in {table_name}")
            return False
            
    except Exception as e:
        logger.error(f"   ‚ùå Error with column {column_name}: {e}")
        return False

def migrate_assessment_candidates(cur):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É assessment_candidates –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"""
    logger.info("üîÑ Migrating assessment_candidates table...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute("""
        SELECT COUNT(*) 
        FROM information_schema.tables 
        WHERE table_name = 'assessment_candidates'
    """)
    
    if cur.fetchone()[0] == 0:
        logger.info("   üìã Table assessment_candidates doesn't exist, will be created")
        return True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
    columns_to_add = [
        ("dominant_type", "VARCHAR(20)"),
        ("transcription", "TEXT"),
        ("total_score", "INTEGER DEFAULT 0"),
        ("percentage", "DECIMAL(5,2) DEFAULT 0"),
        ("innovator_score", "INTEGER DEFAULT 0"),
        ("optimizer_score", "INTEGER DEFAULT 0"),
        ("executor_score", "INTEGER DEFAULT 0"),
    ]
    
    for column_name, column_def in columns_to_add:
        check_and_add_column(cur, "assessment_candidates", column_name, column_def)
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        db_url = os.getenv('SQLALCHEMY_DATABASE_URI')
        if not db_url:
            logger.error("‚ùå SQLALCHEMY_DATABASE_URI not set")
            sys.exit(1)
        
        # –ü–∞—Ä—Å–∏–º URL
        parsed = urlparse(db_url)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = psycopg2.connect(
            host=parsed.hostname,
            port=parsed.port,
            user=parsed.username,
            password=parsed.password,
            database=parsed.path[1:]
        )
        
        conn.autocommit = True
        cur = conn.cursor()
        
        logger.info("üîÑ Initializing assessment database...")
        
        # –°–Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        migrate_assessment_candidates(cur)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
        logger.info("üìã Creating questionnaire tables...")
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS questionnaires (
                id SERIAL PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                questions_count INTEGER DEFAULT 0,
                max_time_minutes INTEGER,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS questions (
                id SERIAL PRIMARY KEY,
                questionnaire_id INTEGER REFERENCES questionnaires(id) ON DELETE CASCADE,
                question_order INTEGER NOT NULL,
                question_text TEXT NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS question_options (
                id SERIAL PRIMARY KEY,
                question_id INTEGER REFERENCES questions(id) ON DELETE CASCADE,
                option_order INTEGER NOT NULL,
                option_text TEXT NOT NULL,
                option_type VARCHAR(50) DEFAULT 'executor',
                score_value INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        logger.info("‚úÖ Questionnaire tables created/verified")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        cur.execute("SELECT COUNT(*) FROM questionnaires WHERE id = 1")
        questionnaire_exists = cur.fetchone()[0] > 0
        
        if not questionnaire_exists:
            logger.info("üìù Populating assessment questionnaire...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫
            cur.execute("""
                INSERT INTO questionnaires (id, title, description, questions_count, max_time_minutes) 
                VALUES (1, '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', 
                       '–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–∏—Ç—É–∞—Ü–∏–∏.',
                       25, 30)
                ON CONFLICT (id) DO NOTHING
            """)
            
            # –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
            try:
                with open('assessment_questions.sql', 'r', encoding='utf-8') as f:
                    questions_sql = f.read()
                
                logger.info("üìù Adding assessment questions...")
                cur.execute(questions_sql)
                logger.info("‚úÖ Assessment questions added")
                
            except FileNotFoundError:
                logger.warning("‚ö†Ô∏è assessment_questions.sql not found, creating minimal data...")
                
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                cur.execute("""
                    INSERT INTO questions (questionnaire_id, question_order, question_text) VALUES 
                    (1, 1, '–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –≤–∞–º –±–ª–∏–∂–µ?');
                    
                    INSERT INTO question_options (question_id, option_order, option_text, option_type, score_value) VALUES 
                    ((SELECT id FROM questions WHERE questionnaire_id = 1 AND question_order = 1), 1, '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥', 'innovator', 2),
                    ((SELECT id FROM questions WHERE questionnaire_id = 1 AND question_order = 1), 2, '–ì–∏–±–∫–∏–π –ø–æ–¥—Ö–æ–¥', 'optimizer', 1),
                    ((SELECT id FROM questions WHERE questionnaire_id = 1 AND question_order = 1), 3, '–ß–µ—Ç–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º', 'executor', 0);
                """)
                
        else:
            logger.info("‚ÑπÔ∏è Questionnaire data already exists")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cur.execute("SELECT COUNT(*) FROM questionnaires WHERE id = 1")
        questionnaire_count = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM questions WHERE questionnaire_id = 1")
        questions_count = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM question_options WHERE question_id IN (SELECT id FROM questions WHERE questionnaire_id = 1)")
        options_count = cur.fetchone()[0]
        
        if questionnaire_count > 0:
            logger.info("üéâ Assessment database initialized successfully!")
            logger.info(f"   üìã Questionnaires: {questionnaire_count}")
            logger.info(f"   ‚ùì Questions: {questions_count}")
            logger.info(f"   üìù Options: {options_count}")
            
            if questions_count > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                cur.execute("""
                    SELECT q.question_text, COUNT(qo.id) as options_count
                    FROM questions q
                    LEFT JOIN question_options qo ON q.id = qo.question_id
                    WHERE q.questionnaire_id = 1 AND q.question_order = 1
                    GROUP BY q.id, q.question_text
                """)
                
                first_question = cur.fetchone()
                if first_question:
                    logger.info(f"   üìã First question: {first_question[0][:50]}...")
                    logger.info(f"   üìù Options for first question: {first_question[1]}")
        else:
            logger.error("‚ùå Assessment database initialization incomplete")
            sys.exit(1)
        
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå Error initializing assessment database: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()