#!/usr/bin/env python3
# init_assessment_db.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Assessment

import os
import sys
import logging
from flask import Flask
from db_saver import init_db, db
from sqlalchemy import text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_app():
    """–°–æ–∑–¥–∞–µ—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    app = Flask(__name__)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    db_uri = (
        os.getenv("SQLALCHEMY_DATABASE_URI") 
        or os.getenv("DATABASE_URL") 
        or "postgresql://username:password@localhost:5432/miniapp_db"
    )
    
    logger.info(f"Connecting to database: {db_uri}")
    app.config["SQLALCHEMY_DATABASE_URI"] = db_uri
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    
    init_db(app)
    return app

def execute_sql_file(filepath):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            sql_content = file.read()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ ';'
        commands = [cmd.strip() for cmd in sql_content.split(';') if cmd.strip()]
        
        for command in commands:
            if command:
                try:
                    db.session.execute(text(command))
                    db.session.commit()
                except Exception as e:
                    logger.warning(f"Warning executing command: {e}")
                    db.session.rollback()
        
        logger.info(f"‚úÖ Successfully executed {filepath}")
        
    except Exception as e:
        logger.error(f"‚ùå Error executing {filepath}: {e}")
        db.session.rollback()
        raise

def init_assessment_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Assessment"""
    app = create_app()
    
    with app.app_context():
        try:
            logger.info("üîß Initializing Assessment database...")
            
            # 1. –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü
            logger.info("üìã Creating database schema...")
            execute_sql_file('assessment_schema.sql')
            
            # 2. –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            logger.info("‚ùì Inserting questions and options...")
            execute_sql_file('assessment_questions.sql')
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info("üîç Verifying database setup...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫–∏
            result = db.session.execute(text("SELECT COUNT(*) FROM questionnaires"))
            questionnaires_count = result.scalar()
            logger.info(f"üìä Questionnaires: {questionnaires_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
            result = db.session.execute(text("SELECT COUNT(*) FROM questions WHERE questionnaire_id = 1"))
            questions_count = result.scalar()
            logger.info(f"‚ùì Questions: {questions_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            result = db.session.execute(text("""
                SELECT COUNT(*) FROM question_options qo 
                JOIN questions q ON qo.question_id = q.id 
                WHERE q.questionnaire_id = 1
            """))
            options_count = result.scalar()
            logger.info(f"üìù Answer options: {options_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ª–∏—á–Ω–æ—Å—Ç–∏
            result = db.session.execute(text("SELECT COUNT(*) FROM personality_types"))
            types_count = result.scalar()
            logger.info(f"üë§ Personality types: {types_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            result = db.session.execute(text("SELECT COUNT(*) FROM score_transcriptions"))
            transcriptions_count = result.scalar()
            logger.info(f"üìú Score transcriptions: {transcriptions_count}")
            
            logger.info("‚úÖ Assessment database initialization completed successfully!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
            logger.info("üß™ Testing questionnaire loading...")
            result = db.session.execute(text("""
                SELECT q.title, COUNT(qs.id) as questions_count
                FROM questionnaires q
                LEFT JOIN questions qs ON q.id = qs.questionnaire_id
                WHERE q.id = 1
                GROUP BY q.id, q.title
            """))
            
            row = result.fetchone()
            if row:
                logger.info(f"üìã Questionnaire '{row[0]}' has {row[1]} questions")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize database: {e}")
            sys.exit(1)

if __name__ == "__main__":
    logger.info("üöÄ Starting Assessment database initialization...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SQL —Ñ–∞–π–ª–æ–≤
    required_files = ['assessment_schema.sql', 'assessment_questions.sql']
    for file in required_files:
        if not os.path.exists(file):
            logger.error(f"‚ùå Required file not found: {file}")
            logger.info("Please make sure the following files are in the current directory:")
            for f in required_files:
                logger.info(f"  - {f}")
            sys.exit(1)
    
    init_assessment_database()
    logger.info("üéâ All done! Your Assessment database is ready to use.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    logger.info("\nüìù Next steps:")
    logger.info("1. Start your Flask server: python server.py")
    logger.info("2. Open your React app and test the Assessment questionnaire")
    logger.info("3. Check the assessment_candidates table for saved results")