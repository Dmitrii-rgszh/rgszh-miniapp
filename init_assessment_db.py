#!/usr/bin/env python3
# init_assessment_db.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü Assessment

import os
import sys
import logging
from flask import Flask

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from db_saver import init_db, db
from assessment_models import AssessmentCandidate, AssessmentAnswer

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_assessment_tables():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Flask(__name__)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db(app)
    
    with app.app_context():
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            db.create_all()
            logger.info("‚úÖ Assessment tables created successfully!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
            from sqlalchemy import inspect
            inspector = inspect(db.engine)
            tables = inspector.get_table_names()
            
            if 'assessment_candidates' in tables:
                logger.info("‚úÖ Table 'assessment_candidates' exists")
            else:
                logger.warning("‚ùå Table 'assessment_candidates' not found")
                
            if 'assessment_answers' in tables:
                logger.info("‚úÖ Table 'assessment_answers' exists")
            else:
                logger.warning("‚ùå Table 'assessment_answers' not found")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            candidate_count = db.session.query(AssessmentCandidate).count()
            answer_count = db.session.query(AssessmentAnswer).count()
            
            logger.info(f"üìä Current data:")
            logger.info(f"   - Candidates: {candidate_count}")
            logger.info(f"   - Answers: {answer_count}")
            
        except Exception as e:
            logger.error(f"‚ùå Error creating tables: {e}")
            raise

def create_sample_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    app = Flask(__name__)
    init_db(app)
    
    with app.app_context():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            if db.session.query(AssessmentCandidate).count() > 0:
                logger.info("üìã Sample data already exists, skipping creation")
                return
            
            from assessment_models import save_assessment_to_db
            
            # –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–ª—è –¥–µ–º–æ)
            sample_questions = [
                {
                    "question": "1. –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –≤–∞–º –±–ª–∏–∂–µ?",
                    "answers": [
                        "–ù–æ–≤–∞—Ç–æ—Ä—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥",
                        "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥", 
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥"
                    ]
                },
                {
                    "question": "2. –ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º?",
                    "answers": [
                        "–ê–∫—Ç–∏–≤–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä—É—é",
                        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ",
                        "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
                    ]
                }
            ]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            sample_candidate = save_assessment_to_db(
                surname="–ò–≤–∞–Ω–æ–≤",
                first_name="–ò–≤–∞–Ω",
                patronymic="–ò–≤–∞–Ω–æ–≤–∏—á",
                answers=["–ù–æ–≤–∞—Ç–æ—Ä—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥", "–ê–∫—Ç–∏–≤–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä—É—é"],
                questions_data=sample_questions,
                session_id="sample_session_001",
                completion_time=5
            )
            
            logger.info(f"‚úÖ Sample candidate created: {sample_candidate.full_name}")
            logger.info(f"   Type: {sample_candidate.dominant_type} ({sample_candidate.dominant_percentage:.1f}%)")
            
        except Exception as e:
            logger.error(f"‚ùå Error creating sample data: {e}")
            raise

def show_current_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ü–µ–Ω–∫–∞–º"""
    app = Flask(__name__)
    init_db(app)
    
    with app.app_context():
        try:
            from assessment_models import get_assessment_stats
            
            stats = get_assessment_stats()
            
            logger.info("üìä Current Assessment Statistics:")
            logger.info(f"   Total assessments: {stats.get('total_assessments', 0)}")
            
            if 'type_distribution' in stats:
                logger.info("   Type distribution:")
                for type_stat in stats['type_distribution']:
                    logger.info(f"     - {type_stat['type']}: {type_stat['count']} ({type_stat['percentage']:.1f}%)")
            
            if 'average_scores' in stats:
                logger.info("   Average scores:")
                avg_scores = stats['average_scores']
                logger.info(f"     - Innovator: {avg_scores['innovator']}")
                logger.info(f"     - Optimizer: {avg_scores['optimizer']}")
                logger.info(f"     - Executor: {avg_scores['executor']}")
                
        except Exception as e:
            logger.error(f"‚ùå Error getting stats: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ Starting Assessment DB initialization...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        init_assessment_tables()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        create_sample_data()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        show_current_stats()
        
        logger.info("‚úÖ Assessment DB initialization completed successfully!")
        
    except Exception as e:
        logger.error(f"‚ùå Initialization failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()