# justincase_routes.py - –†–æ—É—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ

from flask import Blueprint, request, jsonify
import logging
from typing import Dict, Any
from justincase_calculator_simple import JustincaseCalculator, JustincaseCalculationInput

logger = logging.getLogger("justincase_routes")

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è —Ä–æ—É—Ç–æ–≤ –ù–°–ñ
justincase_bp = Blueprint('justincase', __name__, url_prefix='/api/justincase')

@justincase_bp.route('/calculate', methods=['POST'])
def calculate_justincase():
    """–†–∞—Å—á–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –ø—Ä–µ–º–∏–∏ –ù–°–ñ"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        
        if not data:
            logger.error("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")
            return jsonify({
                'success': False,
                'error': '–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞'
            }), 400
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ù–°–ñ: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['age', 'gender', 'term', 'sum']
        for field in required_fields:
            if field not in data:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return jsonify({
                    'success': False,
                    'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}'
                }), 400
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        input_data = JustincaseCalculationInput(
            age=int(data['age']),
            gender=str(data['gender']).lower(),
            term_years=int(data['term']),
            sum_insured=float(data['sum']),
            include_accident=bool(data.get('includeAccident', False)),
            include_critical_illness=bool(data.get('includeCritical', False)),
            critical_illness_type=str(data.get('criticalType', 'rf')),
            payment_frequency=str(data.get('paymentFrequency', 'annual'))
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calculator = JustincaseCalculator()
        result = calculator.calculate(input_data)
        
        if result.success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_data = {
                'success': True,
                'calculation_id': result.calculation_id,
                'client_age': result.client_age,
                'client_gender': result.client_gender,
                'insurance_term': result.insurance_term,
                'base_insurance_sum': result.base_insurance_sum,
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–º–∏–∏
                'base_premium': round(result.base_premium, 2),
                'death_premium': round(result.death_premium, 2),
                'disability_premium': round(result.disability_premium, 2),
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
                'accident_premium': round(result.accident_premium, 2),
                'accident_death_premium': round(result.accident_death_premium, 2),
                'traffic_death_premium': round(result.traffic_death_premium, 2),
                'injury_premium': round(result.injury_premium, 2),
                
                'critical_premium': round(result.critical_premium, 2),
                
                # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
                'total_premium': round(result.total_premium, 2),
                
                # –§–ª–∞–≥–∏ –ø–∞–∫–µ—Ç–æ–≤
                'accident_package_included': result.accident_package_included,
                'critical_package_included': result.critical_package_included,
                'treatment_region': result.treatment_region,
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                'calculator': result.calculator,
                'version': result.version,
                'calculation_date': result.calculation_date
            }
            
            logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –ù–°–ñ —É—Å–ø–µ—à–µ–Ω. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–µ–º–∏—è: {result.total_premium:.2f}")
            return jsonify(response_data)
        
        else:
            logger.error("‚ùå –†–∞—Å—á–µ—Ç –ù–°–ñ –Ω–µ —É–¥–∞–ª—Å—è")
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'
            }), 400
    
    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}'
        }), 400
    
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ù–°–ñ: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@justincase_bp.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ù–°–ñ"""
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        calculator = JustincaseCalculator()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        test_tariff = calculator.db_adapter.get_tariff(age=30, gender='m', term_years=10)
        
        if test_tariff:
            return jsonify({
                'status': 'ok',
                'calculator': 'JustincaseCalculatorSimple',
                'database': 'connected',
                'message': '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–°–ñ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'
            })
        else:
            return jsonify({
                'status': 'warning',
                'calculator': 'JustincaseCalculatorSimple',
                'database': 'empty',
                'message': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏'
            }), 503
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {str(e)}'
        }), 503

@justincase_bp.route('/test', methods=['GET'])
def test_calculation():
    """–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = JustincaseCalculationInput(
            age=35,
            gender='m',
            term_years=15,
            sum_insured=5_000_000,
            include_accident=True,
            include_critical_illness=True,
            critical_illness_type='rf',
            payment_frequency='annual'
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        calculator = JustincaseCalculator()
        result = calculator.calculate(test_data)
        
        if result.success:
            return jsonify({
                'test_status': 'passed',
                'calculation_id': result.calculation_id,
                'total_premium': round(result.total_premium, 2),
                'details': {
                    'base_premium': round(result.base_premium, 2),
                    'accident_premium': round(result.accident_premium, 2),
                    'critical_premium': round(result.critical_premium, 2)
                }
            })
        else:
            return jsonify({
                'test_status': 'failed',
                'error': '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è'
            }), 500
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return jsonify({
            'test_status': 'error',
            'error': str(e)
        }), 500

# –≠–∫—Å–ø–æ—Ä—Ç Blueprint –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
__all__ = ['justincase_bp']
