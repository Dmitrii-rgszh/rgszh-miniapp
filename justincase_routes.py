# justincase_routes.py
# –ü–û–õ–ù–´–ï API routes –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

import logging
from datetime import datetime, date
from typing import Dict, Any, List
from flask import Blueprint, request, jsonify, current_app
import traceback

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
from justincase_calculator import JustincaseCalculatorComplete

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π"
justincase_bp = Blueprint('justincase', __name__, url_prefix='')

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def safe_get_json():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        content_type = request.content_type or ''
        logger.info(f"üìã Content-Type: {content_type}")
        
        if 'application/json' not in content_type.lower():
            return None, "Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å application/json"
        
        if not request.data:
            return None, "–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"
        
        data = request.get_json(force=True)
        if data is None:
            return None, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ"
        
        logger.info(f"üì• JSON –ø–æ–ª—É—á–µ–Ω: {list(data.keys()) if isinstance(data, dict) else type(data)}")
        return data, None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è JSON: {e}")
        return None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

def format_error_response(error_message: str, error_code: int = 400, details: Dict = None) -> tuple:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –≤–∏–¥–µ"""
    response = {
        'success': False,
        'error': error_message,
        'timestamp': datetime.now().isoformat(),
        'calculator': 'JustincaseCalculatorComplete'
    }
    
    if details:
        response['details'] = details
    
    return jsonify(response), error_code

def format_success_response(data: Dict[str, Any], message: str = None) -> Dict[str, Any]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    response = {
        'success': True,
        'timestamp': datetime.now().isoformat(),
        'calculator': 'JustincaseCalculatorComplete',
        'version': '2.0.0'
    }
    
    if message:
        response['message'] = message
    
    response.update(data)
    return response

# =============================================================================
# –û–°–ù–û–í–ù–´–ï API ENDPOINTS
# =============================================================================

@justincase_bp.route('/api/proxy/calculator/save', methods=['POST', 'OPTIONS'])
def calculate_justincase_main():
    """
    –û–°–ù–û–í–ù–û–ô ENDPOINT –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π"
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º JustincasePage.js
    """
    # CORS preflight
    if request.method == "OPTIONS":
        return '', 200

    try:
        logger.info("üßÆ === –û–°–ù–û–í–ù–û–ô –†–ê–°–ß–ï–¢ '–ù–ê –í–°–Ø–ö–ò–ô –°–õ–£–ß–ê–ô' ===")
        
        # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        data, error = safe_get_json()
        if error:
            return format_error_response(error, 400)
        
        logger.info(f"üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {list(data.keys())}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        calculator = JustincaseCalculatorComplete()
        
        # –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        is_valid, validation_errors = calculator.validate_input_data(data)
        if not is_valid:
            return format_error_response(
                "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", 
                400, 
                {'validation_errors': validation_errors}
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        result = calculator.calculate_full_program(data)
        
        logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: –ø—Ä–µ–º–∏—è {result.get('annualPremium', 0):,} —Ä—É–±.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        return jsonify(result)
        
    except ValueError as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return format_error_response(str(e), 400)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return format_error_response(
            f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}', 
            500,
            {'traceback': traceback.format_exc() if current_app.debug else None}
        )

@justincase_bp.route('/api/justincase/calculate', methods=['POST', 'OPTIONS'])
def calculate_justincase_extended():
    """
    –†–ê–°–®–ò–†–ï–ù–ù–´–ô ENDPOINT —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    if request.method == "OPTIONS":
        return '', 200

    try:
        logger.info("üéØ === –†–ê–°–®–ò–†–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢ ===")
        
        data, error = safe_get_json()
        if error:
            return format_error_response(error, 400)
        
        calculator = JustincaseCalculatorComplete()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        is_valid, validation_errors = calculator.validate_input_data(data)
        if not is_valid:
            return format_error_response(
                "–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞", 
                400, 
                {
                    'validation_errors': validation_errors,
                    'input_data_received': list(data.keys()),
                    'required_fields': ['birthDate', 'gender', 'insuranceInfo']
                }
            )
        
        # –†–∞—Å—á–µ—Ç
        result = calculator.calculate_full_program(data)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        calculator_info = calculator.get_calculator_info()
        
        response_data = {
            'calculation_result': result,
            'calculator_info': calculator_info,
            'validation_passed': True
        }
        
        return jsonify(format_success_response(
            response_data, 
            "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        ))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return format_error_response(f'–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}', 500)

@justincase_bp.route('/api/justincase/validate', methods=['POST', 'OPTIONS'])
def validate_data():
    """
    ENDPOINT –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Ä–∞—Å—á–µ—Ç–∞
    """
    if request.method == "OPTIONS":
        return '', 200

    try:
        logger.info("üîç === –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• ===")
        
        data, error = safe_get_json()
        if error:
            return format_error_response(error, 400)
        
        calculator = JustincaseCalculatorComplete()
        is_valid, validation_errors = calculator.validate_input_data(data)
        
        response_data = {
            'validation_passed': is_valid,
            'errors': validation_errors,
            'input_fields_count': len(data.keys()),
            'received_fields': list(data.keys())
        }
        
        if is_valid:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            age = calculator.calculate_age(data['birthDate'])
            recommended_sum = calculator.calculate_recommended_sum(data) if data.get('insuranceInfo') == 'no' else None
            
            response_data.update({
                'calculated_age': age,
                'recommended_sum': recommended_sum,
                'ready_for_calculation': True
            })
        
        return jsonify(format_success_response(
            response_data,
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" + (" —É—Å–ø–µ—à–Ω–æ" if is_valid else " —Å –æ—à–∏–±–∫–∞–º–∏")
        ))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return format_error_response(f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}', 500)

@justincase_bp.route('/api/justincase/validate-sum', methods=['POST', 'OPTIONS'])
def validate_insurance_sum():
    """
    ENDPOINT –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã
    """
    if request.method == "OPTIONS":
        return '', 200

    try:
        data, error = safe_get_json()
        if error:
            return format_error_response(error, 400)
        
        if 'amount' not in data:
            return format_error_response('–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 400)
        
        calculator = JustincaseCalculatorComplete()
        
        try:
            amount_str = str(data['amount']).replace(' ', '').replace(',', '').replace('.', '')
            amount = int(amount_str)
        except:
            return format_error_response('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã', 400)
        
        errors = []
        if amount < calculator.MIN_INSURANCE_SUM:
            errors.append(f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {calculator.MIN_INSURANCE_SUM:,} —Ä—É–±.')
        
        if amount > calculator.MAX_INSURANCE_SUM:
            errors.append(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—É–º–º–∞: {calculator.MAX_INSURANCE_SUM:,} —Ä—É–±.')
        
        is_valid = len(errors) == 0
        
        response_data = {
            'valid': is_valid,
            'amount': amount,
            'formatted_amount': f"{amount:,}".replace(",", "."),
            'errors': errors,
            'limits': {
                'min': calculator.MIN_INSURANCE_SUM,
                'max': calculator.MAX_INSURANCE_SUM
            }
        }
        
        return jsonify(format_success_response(response_data, "–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã: {e}")
        return format_error_response(f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã: {str(e)}', 500)

@justincase_bp.route('/api/justincase/recommend-sum', methods=['POST', 'OPTIONS'])
def recommend_insurance_sum():
    """
    ENDPOINT –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã –∏ —Å—Ä–æ–∫–∞
    """
    if request.method == "OPTIONS":
        return '', 200

    try:
        logger.info("üí∞ === –†–ê–°–ß–ï–¢ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û–ô –°–£–ú–ú–´ ===")
        
        data, error = safe_get_json()
        if error:
            return format_error_response(error, 400)
        
        calculator = JustincaseCalculatorComplete()
        result = calculator.calculate_recommended_sum(data)
        
        # –¢–µ–ø–µ—Ä—å result - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å recommended_sum –∏ recommended_term
        recommended_sum = result.get('recommended_sum', 1000000)
        recommended_term = result.get('recommended_term', 15)
        
        response_data = {
            'recommended_sum': recommended_sum,
            'recommended_term': recommended_term,
            'formatted_sum': f"{recommended_sum:,}".replace(",", "."),
            'calculation_basis': {
                'income_2022': data.get('income2022'),
                'income_2023': data.get('income2023'), 
                'income_2024': data.get('income2024'),
                'breadwinner_status': data.get('breadwinnerStatus'),
                'children_count': data.get('childrenCount'),
                'special_care_relatives': data.get('specialCareRelatives'),
                'income_share': data.get('incomeShare'),
                'unsecured_loans': data.get('unsecuredLoans')
            }
        }
        
        return jsonify(format_success_response(response_data, "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞ –∏ —Å—Ä–æ–∫ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã"))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—É–º–º—ã: {e}")
        return format_error_response(f'–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}', 500)

@justincase_bp.route('/api/justincase/config', methods=['GET'])
def get_calculator_config():
    """
    ENDPOINT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    """
    try:
        calculator = JustincaseCalculatorComplete()
        config = calculator.get_calculator_info()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        frontend_config = {
            'api_version': '2.0.0',
            'calculator_name': '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è',
            'features': config['features'],
            'limits': config['limits'],
            'supported_options': {
                'payment_frequencies': ['–ï–∂–µ–≥–æ–¥–Ω–æ', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ', '–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ', '–ü–æ–ª—É–≥–æ–¥–∏–µ'],
                'treatment_regions': [
                    {'value': 'russia', 'label': '–õ–µ—á–µ–Ω–∏–µ –≤ –†–§'},
                    {'value': 'abroad', 'label': '–õ–µ—á–µ–Ω–∏–µ –∑–∞ —Ä—É–±–µ–∂–æ–º'}
                ],
                'sport_types': [
                    {'value': 'none', 'label': '–ë–µ–∑ —Å–ø–æ—Ä—Ç–∞'},
                    {'value': 'low_risk', 'label': '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫'},
                    {'value': 'medium_risk', 'label': '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫'},
                    {'value': 'high_risk', 'label': '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫'},
                    {'value': 'extreme', 'label': '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç'}
                ]
            },
            'validation_rules': {
                'age_range': f"{config['limits']['min_age']}-{config['limits']['max_age']} –ª–µ—Ç",
                'sum_range': f"{config['limits']['min_sum']:,}-{config['limits']['max_sum']:,} —Ä—É–±.",
                'term_range': f"{config['limits']['min_term']}-{config['limits']['max_term']} –ª–µ—Ç"
            }
        }
        
        return jsonify(format_success_response(
            {'config': frontend_config}, 
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞"
        ))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return format_error_response(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}', 500)

@justincase_bp.route('/api/justincase/test', methods=['GET'])
def test_calculator():
    """
    ENDPOINT –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    """
    try:
        logger.info("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê ===")
        
        calculator = JustincaseCalculatorComplete()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        test_scenarios = [
            {
                'name': '–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç - –º–æ–ª–æ–¥–æ–π –º—É–∂—á–∏–Ω–∞',
                'data': {
                    'birthDate': '1990-01-01',
                    'gender': 'male',
                    'insuranceInfo': 'yes',
                    'insuranceTerm': '5',
                    'insuranceSum': '1000000',
                    'accidentPackage': False,
                    'criticalPackage': False,
                    'sportPackage': False
                }
            },
            {
                'name': '–ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç - –∂–µ–Ω—â–∏–Ω–∞ —Å —Å–µ–º—å–µ–π',
                'data': {
                    'birthDate': '1985-05-15',
                    'gender': 'female',
                    'insuranceInfo': 'yes',
                    'insuranceTerm': '10',
                    'insuranceSum': '3000000',
                    'insuranceFrequency': '–ï–∂–µ–≥–æ–¥–Ω–æ',
                    'accidentPackage': True,
                    'criticalPackage': True,
                    'treatmentRegion': 'russia',
                    'sportPackage': True,
                    'breadwinnerStatus': 'yes',
                    'childrenCount': '2'
                }
            },
            {
                'name': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞',
                'data': {
                    'birthDate': '1975-12-01',
                    'gender': 'male',
                    'insuranceInfo': 'no',
                    'income2021': '2000000',
                    'income2022': '2200000',
                    'income2023': '2400000',
                    'breadwinnerStatus': 'yes',
                    'childrenCount': '1',
                    'specialCareRelatives': 'no'
                }
            }
        ]
        
        test_results = []
        
        for scenario in test_scenarios:
            try:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                is_valid, errors = calculator.validate_input_data(scenario['data'])
                
                if is_valid:
                    # –†–∞—Å—á–µ—Ç
                    result = calculator.calculate_full_program(scenario['data'])
                    test_results.append({
                        'scenario': scenario['name'],
                        'status': 'success',
                        'premium': result['annualPremium'],
                        'insurance_sum': result['insuranceSum'],
                        'details': {
                            'age': result['clientAge'],
                            'term': result['insuranceTerm'],
                            'base_premium': result['basePremium'],
                            'accident_premium': result['accidentPremium'],
                            'critical_premium': result['criticalPremium']
                        }
                    })
                else:
                    test_results.append({
                        'scenario': scenario['name'],
                        'status': 'validation_failed',
                        'errors': errors
                    })
                    
            except Exception as e:
                test_results.append({
                    'scenario': scenario['name'],
                    'status': 'error',
                    'error': str(e)
                })
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful_tests = len([r for r in test_results if r['status'] == 'success'])
        total_tests = len(test_results)
        
        calculator_info = calculator.get_calculator_info()
        
        response_data = {
            'test_summary': {
                'total_tests': total_tests,
                'successful_tests': successful_tests,
                'failed_tests': total_tests - successful_tests,
                'success_rate': f"{(successful_tests/total_tests*100):.1f}%" if total_tests > 0 else "0%"
            },
            'test_results': test_results,
            'calculator_info': calculator_info,
            'all_tests_passed': successful_tests == total_tests
        }
        
        message = f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
        
        return jsonify(format_success_response(response_data, message))
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return format_error_response(f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}', 500)

@justincase_bp.route('/api/justincase/status', methods=['GET'])
def get_calculator_status():
    """
    ENDPOINT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    """
    try:
        calculator = JustincaseCalculatorComplete()
        
        # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        test_data = {
            'birthDate': '1990-01-01',
            'gender': 'male',
            'insuranceInfo': 'yes',
            'insuranceTerm': '5',
            'insuranceSum': '1000000'
        }
        
        try:
            is_valid, _ = calculator.validate_input_data(test_data)
            result = calculator.calculate_full_program(test_data) if is_valid else None
            calculator_status = 'working'
            calculator_error = None
            test_premium = result['annualPremium'] if result else 0
        except Exception as e:
            calculator_status = 'error'
            calculator_error = str(e)
            test_premium = 0
        
        calculator_info = calculator.get_calculator_info()
        
        response_data = {
            'status': calculator_status,
            'error': calculator_error,
            'version': calculator_info['version'],
            'name': calculator_info['name'],
            'test_calculation': {
                'premium': test_premium,
                'test_data': test_data if calculator_status == 'working' else None
            },
            'features': calculator_info['features'],
            'limits': calculator_info['limits'],
            'endpoints': {
                'main_calculation': '/api/proxy/calculator/save',
                'extended_calculation': '/api/justincase/calculate',
                'validation': '/api/justincase/validate',
                'sum_validation': '/api/justincase/validate-sum',
                'recommend_sum': '/api/justincase/recommend-sum',
                'config': '/api/justincase/config',
                'test': '/api/justincase/test',
                'status': '/api/justincase/status'
            },
            'database_required': False,
            'external_dependencies': False
        }
        
        return jsonify(format_success_response(
            response_data,
            f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä {calculator_status}" + (f": {calculator_error}" if calculator_error else "")
        ))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return format_error_response(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}', 500)

# =============================================================================
# –§–£–ù–ö–¶–ò–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ROUTES
# =============================================================================

def register_justincase_routes(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ "–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π"
    """
    try:
        app.register_blueprint(justincase_bp)
        logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ '–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        with app.app_context():
            try:
                calculator = JustincaseCalculatorComplete()
                
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
                test_data = {
                    'birthDate': '1990-01-01',
                    'gender': 'male',
                    'insuranceInfo': 'yes',
                    'insuranceTerm': '5',
                    'insuranceSum': '1000000'
                }
                
                is_valid, errors = calculator.validate_input_data(test_data)
                if is_valid:
                    result = calculator.calculate_full_program(test_data)
                    premium = result['annualPremium']
                    logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤: —Ç–µ—Å—Ç-–ø—Ä–µ–º–∏—è {premium:,} —Ä—É–±.")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {errors}")
                
                logger.info("üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
                logger.info("  - POST /api/proxy/calculator/save (–æ—Å–Ω–æ–≤–Ω–æ–π, –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)")
                logger.info("  - POST /api/justincase/calculate (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)")
                logger.info("  - POST /api/justincase/validate (–≤–∞–ª–∏–¥–∞—Ü–∏—è)")
                logger.info("  - POST /api/justincase/validate-sum (–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã)")
                logger.info("  - POST /api/justincase/recommend-sum (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞)")
                logger.info("  - GET  /api/justincase/config (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)")
                logger.info("  - GET  /api/justincase/test (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)")
                logger.info("  - GET  /api/justincase/status (—Å—Ç–∞—Ç—É—Å)")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
        return False

# =============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò –ü–†–Ø–ú–û–ú –ó–ê–ü–£–°–ö–ï
# =============================================================================

if __name__ == "__main__":
    from flask import Flask
    
    app = Flask(__name__)
    app.config['DEBUG'] = True
    
    register_justincase_routes(app)
    
    print("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ü–û–õ–ù–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê ===")
    
    with app.test_client() as client:
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        response = client.get('/api/justincase/status')
        print(f"Status test: {response.status_code}")
        if response.status_code == 200:
            status_data = response.get_json()
            print(f"Calculator status: {status_data['data']['status']}")
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        response = client.get('/api/justincase/config')
        print(f"Config test: {response.status_code}")
        
        # –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        response = client.get('/api/justincase/test')
        print(f"Calculator test: {response.status_code}")
        if response.status_code == 200:
            test_data = response.get_json()
            print(f"Tests passed: {test_data['data']['test_summary']['success_rate']}")
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–∫–∞–∫ –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
        test_calculation = {
            'birthDate': '1985-05-15',
            'gender': 'female',
            'insuranceInfo': 'yes',
            'insuranceTerm': '10',
            'insuranceSum': '2000000',
            'insuranceFrequency': '–ï–∂–µ–≥–æ–¥–Ω–æ',
            'accidentPackage': True,
            'criticalPackage': True,
            'treatmentRegion': 'russia',
            'sportPackage': False
        }
        
        response = client.post('/api/proxy/calculator/save', 
                             json=test_calculation,
                             content_type='application/json')
        print(f"Main calculation test: {response.status_code}")
        
        if response.status_code == 200:
            result = response.get_json()
            premium = result.get('annualPremium', 0)
            print(f"Calculation successful: –ø—Ä–µ–º–∏—è {premium:,} —Ä—É–±.")
            print("üéâ –í—Å–µ API —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        else:
            error_data = response.get_json() if response.status_code != 500 else {'error': 'Internal server error'}
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {error_data}")